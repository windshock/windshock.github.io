<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Javascript on Code Before Breach</title><link>https://windshock.github.io/en/tags/javascript/</link><description>Recent content in Javascript on Code Before Breach</description><generator>Hugo -- 0.145.0</generator><language>en-US</language><lastBuildDate>Thu, 08 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://windshock.github.io/en/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>About the XSSAudit</title><link>https://windshock.github.io/en/post/2019-08-08-about-the-xssaudit/</link><pubDate>Thu, 08 Aug 2019 00:00:00 +0000</pubDate><guid>https://windshock.github.io/en/post/2019-08-08-about-the-xssaudit/</guid><description>&lt;h2 id="why-was-the-xssaudit-feature-removed-in-chrome">Why Was the XSSAudit Feature Removed in Chrome?&lt;/h2>
&lt;p>The Google Security Team proposed to the Chrome development team to remove the &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=898081">XSSAudit feature&lt;/a>. Although the only rationale provided was that the feature could be bypassed (as argued in a paper by &lt;a href="mailto:evn@google.com">evn@google.com&lt;/a>), it initially seemed unlikely that removal would proceed. However, it was ultimately decided that the feature would be completely eliminated in Chrome.&lt;/p>
&lt;p>The main point of the &lt;a href="https://windshock.github.io/pdf/p1709-lekiesA.pdf">paper&lt;/a> is that bypass methods using targets within new JavaScript frameworks are difficult to defend against. Therefore, it proposes a shift from the existing mitigation approach (the xssaudit filter) to an isolation/prevention method, namely Content Security Policy (CSP).&lt;/p></description></item></channel></rss>