<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Security on Code Before Breach</title><link>https://windshock.github.io/ko/tags/security/</link><description>Recent content in Security on Code Before Breach</description><generator>Hugo -- 0.145.0</generator><language>ko-KR</language><lastBuildDate>Mon, 12 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://windshock.github.io/ko/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Dicer 모듈 취약점 대응 가이드: CVE-2022-24434</title><link>https://windshock.github.io/ko/post/2025-05-12-cve-cve-2022-24434-dicer/</link><pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate><guid>https://windshock.github.io/ko/post/2025-05-12-cve-cve-2022-24434-dicer/</guid><description>Multer 의존성을 통해 간접적으로 영향을 받는 Dicer 모듈의 취약점을 분석하고, 실제 대응 방안을 정리했습니다. 유지보수 중단된 오픈소스에 대한 현실적인 대응 예시로 활용할 수 있습니다.</description></item><item><title>유지보수 중단 오픈소스를 Gmail과 Snyk 알림으로 관리한 방법</title><link>https://windshock.github.io/ko/post/2025-05-12-managing-unmaintained-open-source-with-snyk-and-gmail/</link><pubDate>Mon, 12 May 2025 00:00:00 +0000</pubDate><guid>https://windshock.github.io/ko/post/2025-05-12-managing-unmaintained-open-source-with-snyk-and-gmail/</guid><description>Snyk의 웹 UI에만 노출되는 정보를 자동으로 수집해야 했습니다. Gmail과 Apps Script를 활용한 취약점 알림 자동 수집기 구현 사례를 소개합니다.</description></item><item><title>개발자들 말하는 보안에 대한 흔한 거짓말</title><link>https://windshock.github.io/ko/post/2025-04-01-common-security-myths-developers-tell-themselves/</link><pubDate>Tue, 01 Apr 2025 00:00:00 +0000</pubDate><guid>https://windshock.github.io/ko/post/2025-04-01-common-security-myths-developers-tell-themselves/</guid><description>개발자들이 보안에 대해 자주 믿는 &amp;lsquo;책임 전가형&amp;rsquo;, &amp;lsquo;기술 과신형&amp;rsquo;, &amp;lsquo;보안 과소평가형&amp;rsquo; 거짓말을 분석하고, 현실적인 대응 방안을 제시합니다.</description></item><item><title>XML-RPC 보안 취약점 분석 및 완화 전략</title><link>https://windshock.github.io/ko/post/2025-03-28-xml-rpc-security-vulnerabilities-analysis-and-mitigation-strategies/</link><pubDate>Fri, 28 Mar 2025 08:39:00 +0900</pubDate><guid>https://windshock.github.io/ko/post/2025-03-28-xml-rpc-security-vulnerabilities-analysis-and-mitigation-strategies/</guid><description>&lt;hr>
&lt;p>&lt;img alt="xmlrpc 배경화면" loading="lazy" src="https://windshock.github.io/images/post/xmlrpc-security.webp">&lt;/p>
&lt;h2 id="주요-요약">주요 요약&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>XML-RPC 취약점 개요:&lt;/strong> 시스템 간 통신을 위한 경량 원격 호출 프로토콜인 XML-RPC는 명령 주입(RCE), XXE, DDoS, 권한 상승 등 다양한 위협에 노출됩니다.&lt;/li>
&lt;li>&lt;strong>대표 사례:&lt;/strong> NodeBB (CVE-2023-43187), Apache OFBiz (CVE-2020-9496), PHP XML-RPC (CVE-2005-1921) 등.&lt;/li>
&lt;li>&lt;strong>실제 사용처:&lt;/strong> WordPress, Bugzilla, ManageEngine, Apache OFBiz 외에도 일부 레거시 시스템에서 활용 중입니다.&lt;/li>
&lt;li>&lt;strong>완화 전략:&lt;/strong> XML-RPC 비활성화, 입력 검증 강화, 인증 체계 강화, 최신 보안 패치 적용, 접근 제어 및 WAF 도입.&lt;/li>
&lt;/ul>
&lt;h2 id="xml-rpc란-무엇인가">XML-RPC란 무엇인가?&lt;/h2>
&lt;p>**XML-RPC (XML Remote Procedure Call)**는 XML을 데이터 포맷으로, HTTP를 전송 수단으로 사용하는 원격 프로시저 호출(RPC) 프로토콜입니다. 1998년 Dave Winer와 Microsoft가 공동 제안했으며, 플랫폼 간 통신을 간편화하기 위해 설계되었습니다.&lt;/p></description></item></channel></rss>