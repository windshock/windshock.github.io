[{"content":"시트릭스 보안 정책 효과성 검토 1. 서론 시트릭스 관리자들은 Citrix 그룹 정책을 통해 각 사용자의 VDI(가상 데스크탑 인프라)에 보안 정책을 적용합니다. 그러나 Citrix CSE(시트릭스 서비스 엔진)와 Citrix VDI 에이전트 내의 일부 구조적 취약점으로 인해 이러한 보안 정책을 우회할 가능성이 존재합니다.\n2. 보안 정책 우회 레지스트리 조작을 통한 우회 Citrix VDI 에이전트(PicaSvc2.exe)가 정책을 저장하는 과정에서 발생하는 레이스 컨디션을 이용해 레지스트리를 조작함으로써 보안 정책 우회가 가능합니다. 시트릭스는 이 취약점을 완화하기 위해 스텔스 패치를 적용했지만, 레지스트리 보안 설정을 조정하고 쓰기 권한을 거부함으로써 여전히 보안 정책을 비활성화할 수 있습니다.\nCSE의 강제 종료 시트릭스 CSE(시트릭스 서비스 엔진)가 강제로 종료되거나 삭제되면 보안 정책이 적용되지 않아, 제한된 리소스에 대한 무단 접근이 발생할 가능성이 있습니다.\nGPF 파일 조작 GPF(그룹 정책 파일)를 수정하거나 그 권한을 제한하여 보안 정책을 우회하려는 시도도 가능하지만, 이 방법은 불안정하며 여러 한계점이 존재합니다.\n3. 레지스트리 수정 및 쓰기 권한 거부를 통한 우회 사용자가 일반 계정(예: User A)으로 로그인하면, Citrix 보안 정책 설정은 Windows 세션 ID를 기반으로 레지스트리에 생성됩니다. 시트릭스가 보안보다 사용성을 우선시하는 경향으로 인해, 레지스트리 설정(CdmPolicies, IO, VCPolicies)을 수정하고 모든 사용자에 대해 쓰기 권한을 거부함으로써 보안 정책 우회가 가능해집니다. 이로 인해 재접속 시 보안 정책 우회가 이루어집니다.\n테스트 환경에서는 Citrix 보안 정책 레지스트리 설정이 변경되고 권한이 제한되면 자동 로그아웃이 발생합니다. ICA 파일 내의 ClearPassword, Domain, LogonTicket 등의 값을 임의의 값(예: “test”)으로 수정하면, 로컬 계정이 이 자동 로그아웃을 우회할 수 있습니다.\n또한, 로컬 보조 계정으로 로그인하면 강제 로그아웃 제한을 우회할 수 있습니다. 비록 시트릭스가 다중 로그인 세션을 제한하지만, Ctrl-Alt-Del을 눌러 작업 관리자를 실행하고 PicaSessionAgent.exe 프로세스를 종료함으로써 로그인을 완료할 수 있습니다.\n마지막으로, 로컬 계정(예: \u0026ldquo;windshock\u0026rdquo;)으로 로그인하면 Windows 세션 1에서 시트릭스 보안 정책이 우회되어 Citrix VDI를 사용할 수 있습니다.\n4. 결론 시트릭스의 보안 정책 적용 방식은 사용성을 우선시하는 것으로 보이며, 이는 사용자 접근성을 향상시킬 수 있지만 보안 정책 우회를 용이하게 하는 구조적 취약점을 초래합니다. 시트릭스를 사용하는 조직은 이러한 잠재적 보안 우회 가능성을 인식하고, 관리자들이 실시간으로 대응할 수 있도록 추가적인 내부 모니터링 또는 경보 시스템을 구현해야 합니다.\n더 나아가, 시트릭스가 Xen Hypervisor와 같은 하위 시스템 수준에서 보안 정책을 강제한다면, 보안과 사용성 사이의 균형을 유지하면서 우회 시도를 효과적으로 차단할 수 있을 것입니다. 이를 통해 조직은 요구되는 보안 수준과 시트릭스가 제공하는 접근성을 모두 달성할 수 있습니다.\nReferences Citrix Group Policy Troubleshooting for XenApp and XenDesktop 시트릭스 정책 우회는 취약점이 아니라 법률 위반이다 ","permalink":"http://localhost:1313/ko/post/2024-11-05-review-of-citrix-security-policy-effectiveness/","summary":"\u003ch1 id=\"시트릭스-보안-정책-효과성-검토\"\u003e시트릭스 보안 정책 효과성 검토\u003c/h1\u003e\n\u003ch2 id=\"1-서론\"\u003e1. 서론\u003c/h2\u003e\n\u003cp\u003e시트릭스 관리자들은 Citrix 그룹 정책을 통해 각 사용자의 VDI(가상 데스크탑 인프라)에 보안 정책을 적용합니다. 그러나 Citrix CSE(시트릭스 서비스 엔진)와 Citrix VDI 에이전트 내의 일부 구조적 취약점으로 인해 이러한 보안 정책을 우회할 가능성이 존재합니다.\u003c/p\u003e\n\u003ch2 id=\"2-보안-정책-우회\"\u003e2. 보안 정책 우회\u003c/h2\u003e\n\u003ch3 id=\"레지스트리-조작을-통한-우회\"\u003e레지스트리 조작을 통한 우회\u003c/h3\u003e\n\u003cp\u003eCitrix VDI 에이전트(PicaSvc2.exe)가 정책을 저장하는 과정에서 발생하는 레이스 컨디션을 이용해 레지스트리를 조작함으로써 보안 정책 우회가 가능합니다. 시트릭스는 이 취약점을 완화하기 위해 스텔스 패치를 적용했지만, 레지스트리 보안 설정을 조정하고 쓰기 권한을 거부함으로써 여전히 보안 정책을 비활성화할 수 있습니다.\u003c/p\u003e","title":"시트릭스 보안 정책 효과성 검토"},{"content":"시트릭스 정책 우회는 취약점이 아니라 법률 위반이다 주의!! cert.org의 VINCE를 통한 Citrix와의 논의를 바탕으로, 이 문제는 관리 권한이 필요하기 때문에 취약점으로 분류되지 않는 것으로 결론지어졌습니다. 따라서 보안상의 문제 없이 이 정보를 공유할 수 있습니다. 그러나 보안상의 이유로, 논리적으로 격리되거나 폐쇄된 네트워크와 같은 특수 환경에서는 Xendesktop (VDI)의 사용을 권장하지 않습니다. 만약 VDI를 반드시 사용해야 한다면, 관리자 권한을 제거하고 보안 전용 소프트웨어를 설치해야 합니다.\n관리자 권한이 필요하다는 점은 위험을 낮출 수 있지만, 잠재적인 영향력을 완전히 제거하지는 않습니다. 아래는 Citrix 정책이 어떻게 우회될 수 있는지에 대한 상세한 기술 설명입니다.\n설명 Citrix VDI 에이전트(PicaSvc2.exe)는 Citrix 관리 서버로부터 정책을 수신하고, 이를 레지스트리(HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User)에 기록한 후, 레지스트리에서 읽어 정책을 적용하는 구조로 보입니다. 공격자는 아래의 개념 증명(POC)을 참고하여, 레지스트리 조작을 통해 Citrix 정책 서버가 강제하는 드라이브, 네트워크 접근, 클립보드 작업 등의 보안 정책을 우회할 수 있습니다.\nCitrix의 Common Criteria 인증 문서에 따르면, 이러한 구성 데이터(Configdata)가 공격자에 의해 변경되지 않도록 보호하는 메커니즘이 설계되어 있습니다. 이와 같은 우회는 구현상의 결함으로 간주될 수 있습니다.\n폐쇄되거나 격리된 네트워크 환경에서 VDI를 사용할 경우, Citrix 정책을 우회하여 VDI를 강제로 인터넷에 연결하게 되면 민감한 내부 정보가 외부로 유출될 위험이 있습니다. 특히 대한민국에서는 이러한 행위가 명백한 법 위반으로 간주되며, 네트워크 격리 대책에 대한 재검토가 필요합니다.\n개념 증명 (POC) 공격자는 우선 회사 계정에 접근한 후, 회사의 Citrix VDI(Windows 10 실행 중)에 로그인해야 합니다. VDI 환경은 일반적으로 네트워크 접근, 프린터 사용, 외부 드라이브 연결, 클립보드 접근 등이 제한되어 있습니다.\n공격자는 VDI에 로그인하여 레지스트리를 지속적으로 수정하는 배치 파일(다운로드 링크)을 실행한 후, VDI 세션에서 로그아웃합니다.\n배치 파일을 실행하여 레지스트리를 수정한 후, 공격자는 VDI에서 로그아웃합니다. 재로그인 시, 레지스트리 값이 변조되어 Citrix 정책을 우회할 수 있게 됩니다.\n예시 레지스트리 수정 내용:\nWindows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User] \u0026#34;AutoConnectDrives\u0026#34;=dword:00000001 \u0026#34;AllowCdromDrives\u0026#34;=dword:00000001 \u0026#34;AllowFixedDrives\u0026#34;=dword:00000001 \u0026#34;AllowFloppyDrives\u0026#34;=dword:00000001 \u0026#34;AllowNetworkDrives\u0026#34;=dword:00000001 \u0026#34;AllowRemoveableDrives\u0026#34;=dword:00000001 \u0026#34;UseAsyncWrites\u0026#34;=dword:00000001 \u0026#34;ReadOnlyMappedDrive\u0026#34;=dword:00000000 VDI에 다시 로그인하면, PicaSvc2.exe가 Citrix 서버로부터 정책 설정을 가져와 레지스트리에 저장합니다.\nPicaSvc2.exe가 정책을 쓰고 읽는 동안, 이미 배치 파일에 의해 레지스트리 값이 조작되어 있습니다.\nPicaSvc2.exe는 조작된 정책을 VDI 환경에 적용합니다.\n추가 사항:\n연결 PC의 레지스트리를 수정함으로써 하드웨어 리디렉션이 활성화되어 무단 네트워크 접근이 가능해질 수 있습니다. Citrix의 기본 정책은 USB 클래스 FFh를 허용하므로, iPhone을 테더링 용도로 사용하거나 USB 기반 무선 카드를 통해 네트워크 격리를 우회할 수 있습니다. iPhone 테더링을 활성화하려면, 공격자는 iTunes 설치 프로그램에서 추출한 드라이버인 Apple 네트워크 드라이버와 Apple USB 드라이버를 설치해야 합니다. Citrix 세션에서 iPhone을 리디렉션하면, 네트워크 격리 환경에서도 인터넷 접근이 가능해집니다. 영향 VDI를 사용하여 논리적 네트워크 분리를 유지하는 기업의 경우, 이 취약점을 통해 내부 정보 유출 및 내부 서버에 대한 무단 접근이 발생할 수 있습니다.\n잠재적 영향을 고려할 때, 이러한 공격을 실시간으로 탐지하고 완화하는 것이 매우 중요합니다. 아래는 잠재적인 우회 활동을 발견하고 모니터링하는 단계입니다.\n탐지 이 문제를 탐지하기 위해:\nProcmon을 사용하여 PicaSvc2.exe의 동작을 모니터링합니다. Citrix 에이전트가 정책 설정을 저장하는 레지스트리 키를 조사합니다. 해당 레지스트리 값의 변경 효과를 조작하고 관찰합니다. 설계 분석 Citrix의 Common Criteria 인증 문서에는 구성 데이터의 무단 변경을 방지하기 위한 조치들이 포함되어 있습니다. Citrix의 Common Criteria 인증 정보에 따르면, 가상 데스크탑이나 애플리케이션의 설정과 할당에 필요한 데이터의 기밀성과 무결성이 서버 간 전송 중에도 유지됩니다. 이 설계에는 공격자, 애플리케이션 사용자 또는 데스크탑 사용자가 구성 데이터를 변경하지 못하도록 하는 예방 조치도 포함되어 있습니다.\nCitrix가 위에 언급된 보안 기능들을 구현했음에도 불구하고, 특히 대한민국과 같이 엄격한 네트워크 격리 법규가 적용되는 지역에서는 법적 고려사항도 반드시 검토되어야 합니다.\nCitrix의 보안 목표인 O.Secure_Setup_Data, OE.TLS, OE.Encryption 등은 서버 간 처리 및 전송 중에 구성 데이터의 기밀성과 무결성을 보장합니다.\n자세한 보안 목표와 관리 기능의 역할에 대해서는 다음을 참조하세요:\nFMT_SMF.1/Authorise: 엔드포인트 데이터 접근 제어 정책 관리 FMT_MSA.1/Desktop FMT_MSA.3/Desktop FMT_MSA.1/Application FMT_MSA.3/Application FPT_ITT.1 법적 고려사항 대한민국에서는 전자금융거래법에 따라 금융감독원이 논리적 네트워크 분리를 선택적으로 구현할 수 있는 조치를 도입하였습니다. 금융 기관은 민감한 데이터가 외부 공격으로부터 보호받도록 네트워크 격리 조치를 채택하여 무단 접근을 차단하고 사고를 예방해야 합니다.\n해당 공격은 관리자 권한이 필요하므로, 기업은 논리적으로 분리된 네트워크 환경에서 PC 사용자에 대한 관리자 권한 제거 정책을 재검토해야 합니다. 또한, 이러한 시스템의 오남용을 방지할 수 있는 규정을 포함하도록 법적 개선이 필요합니다.\n한계 관리자 권한 및 설치 권한이 제한되더라도, 화면 캡처 등의 방법으로 인한 데이터 유출을 완전히 방지하기는 어렵습니다. 논리적 네트워크 격리 모델에 대한 보다 자세한 분석과 해결책은 이 보고서에서 확인할 수 있습니다.\n이러한 한계는 관리자 권한이 제거된 경우에도 조직이 여전히 취약함을 시사하며, 최근 은행 부문에서 유사 사건에 대응하는 사례에서도 보듯이, 기술적 및 규제적 차원에서 이러한 문제들을 해결하는 것이 중요함을 강조합니다.\n관련 이슈 2011년 농협 해킹 사건 이후, 대한민국의 여러 주요 은행은 개인 정보의 유출, 절도 또는 변조를 방지하기 위해 내부-외부 네트워크 분리를 시행하기 시작했습니다. 네트워크 격리는 개인 데이터의 안전을 보장하기 위한 핵심 권고사항으로 남아 있습니다. 관련 지침은 여기에서, ISMS-P 인증 관련 정보는 여기에서 확인할 수 있습니다.\n추가로 Citrix Common Criteria 인증에 관한 정보는 여기와 여기에서 확인할 수 있습니다.\n","permalink":"http://localhost:1313/ko/post/2023-04-27-bypassing-citrix-policy-is-not-a-vulnerability-but-it-can-be-a-violation-of-the-law/","summary":"\u003ch3 id=\"시트릭스-정책-우회는-취약점이-아니라-법률-위반이다\"\u003e시트릭스 정책 우회는 취약점이 아니라 법률 위반이다\u003c/h3\u003e\n\u003ch4 id=\"주의\"\u003e주의!!\u003c/h4\u003e\n\u003cp\u003ecert.org의 \u003ca href=\"https://kb.cert.org/vince/comm/case/1022/\"\u003eVINCE\u003c/a\u003e를 통한 Citrix와의 논의를 바탕으로, 이 문제는 관리 권한이 필요하기 때문에 취약점으로 분류되지 않는 것으로 결론지어졌습니다. 따라서 보안상의 문제 없이 이 정보를 공유할 수 있습니다. 그러나 보안상의 이유로, 논리적으로 격리되거나 폐쇄된 네트워크와 같은 특수 환경에서는 Xendesktop (VDI)의 사용을 권장하지 않습니다. 만약 VDI를 반드시 사용해야 한다면, 관리자 권한을 제거하고 보안 전용 소프트웨어를 설치해야 합니다.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e관리자 권한이 필요하다는 점은 위험을 낮출 수 있지만, 잠재적인 영향력을 완전히 제거하지는 않습니다. 아래는 Citrix 정책이 어떻게 우회될 수 있는지에 대한 상세한 기술 설명입니다.\u003c/strong\u003e\u003c/p\u003e","title":"시트릭스 정책 우회는 취약점이 아니라 법률 위반이다"},{"content":"정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화: 보안세와 그 실행 사례 살펴보기\n오늘날의 디지털 시대에서 정보 보안은 개인, 기업, 그리고 정부 모두에게 중요한 이슈가 되었습니다. 사이버 공격과 데이터 유출이 점점 더 빈번해지고 정교해지면서 그 결과는 매우 치명적일 수 있습니다. 이러한 위협에 대비하기 위해 강력한 사이버 보안 대책을 마련하는 것이 필수적입니다.\n최근 인기를 얻고 있는 한 가지 접근 방식은 정부 NGO(비정부기구)와 버그 바운티 프로그램의 활용입니다. 이 프로그램들은 개인과 조직이 디지털 시스템의 취약점과 약점을 식별하고 신고하도록 장려하여, 적시에 효과적인 대응을 가능하게 합니다. 이들은 포괄적인 사이버 보안 전략의 핵심 요소로서, 그 중요성은 아무리 강조해도 지나치지 않습니다.\n일부 국가에서는 이러한 프로그램을 지원하기 위해 보안세를 도입하기도 했습니다. 이 보안세는 사이버 공격 위험이 높은 기업에 부과되며, 그 수익은 정부 NGO와 버그 바운티 프로그램을 설립 및 지원하는 데 사용됩니다. 이 접근 방식은 다소 논란의 여지가 있지만, 사이버 위협에 대비하기 위해 필요한 자금을 마련하는 데 효과적임은 부정할 수 없습니다.\n예를 들어, 보안세를 도입한 국가 중 하나는 대한민국입니다. 2030년에 대한민국 정부는 사이버 공격 위험이 높은 기업에 대해 보안세를 도입하였습니다. 이 세금은 기업의 연간 매출에 따라 0.09%에서 2%까지 부과되며, 기업의 규모와 위험 수준에 따라 차등 적용됩니다. 세금 수익은 국가 사이버 보안 기관 및 다양한 정부 NGO와 버그 바운티 프로그램을 지원하는 데 사용됩니다.\n이와 같은 맥락에서 NGO의 중요성은 매우 큽니다. NGO는 사이버 보안 분야에서 정부와 민간 부문 간의 격차를 메우는 역할을 하며, 기술적 측면의 보안 문제를 보다 효과적으로 처리할 수 있습니다. 이들은 기업 및 조직과 긴밀하게 협력하여 시스템의 취약점과 약점을 식별하고, 정부와의 파트너십을 통해 사이버 위협에 대응하는 데 중요한 역할을 수행합니다.\n정부 NGO와 버그 바운티 프로그램의 역할과 책임(R\u0026amp;R)은 국가와 프로그램에 따라 다를 수 있습니다. 일반적으로 정부 NGO는 사이버 보안 위협에 대한 연구 및 분석을 수행하고, 모범 사례와 가이드라인을 개발하는 역할을 맡습니다. 또한, 기업과 조직에 이러한 모범 사례를 구현할 수 있도록 지침과 지원을 제공하기도 합니다.\n반면, 버그 바운티 프로그램은 개인과 조직이 디지털 시스템의 취약점을 식별하고 신고하도록 유도하기 위해 설계되었습니다. 이 프로그램들은 유효한 취약점을 발견해 신고한 이들에게 현금 등으로 보상함으로써, 사이버 범죄자들이 취약점을 악용하기 전에 이를 찾아내고 해결하는 데 매우 효과적임이 입증되었습니다.\n또한, 이러한 프로그램들은 개인에게 보안세를 부과해서는 안 되며, 보안세 부담은 사이버 공격 위험이 높은 기업과 조직에 있어야 합니다.\n요약하자면, 보안세, NGO, 그리고 버그 바운티 프로그램은 점점 더 복잡해지는 위협 환경 속에서 사이버 보안을 강화하기 위한 중요한 도구들입니다. 정부 기관, NGO, 그리고 민간 기업이 함께 협력함으로써, 취약점을 신속하고 효과적으로 식별 및 해결하여 비용이 많이 들고 파괴적인 사이버 공격의 위험을 줄일 수 있습니다.\n","permalink":"http://localhost:1313/ko/post/2023-04-18-strengthening-cybersecurity-through-government-ngos-and-bug-bounty-programs/","summary":"\u003cp\u003e정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화: 보안세와 그 실행 사례 살펴보기\u003c/p\u003e\n\u003cp\u003e오늘날의 디지털 시대에서 정보 보안은 개인, 기업, 그리고 정부 모두에게 중요한 이슈가 되었습니다. 사이버 공격과 데이터 유출이 점점 더 빈번해지고 정교해지면서 그 결과는 매우 치명적일 수 있습니다. 이러한 위협에 대비하기 위해 강력한 사이버 보안 대책을 마련하는 것이 필수적입니다.\u003c/p\u003e\n\u003cp\u003e최근 인기를 얻고 있는 한 가지 접근 방식은 정부 NGO(비정부기구)와 버그 바운티 프로그램의 활용입니다. 이 프로그램들은 개인과 조직이 디지털 시스템의 취약점과 약점을 식별하고 신고하도록 장려하여, 적시에 효과적인 대응을 가능하게 합니다. 이들은 포괄적인 사이버 보안 전략의 핵심 요소로서, 그 중요성은 아무리 강조해도 지나치지 않습니다.\u003c/p\u003e","title":"정부 NGO 및 버그 바운티 프로그램을 통한 사이버 보안 강화"},{"content":"자바 리플렉션의 보안 위협과 완화 전략 자바 리플렉션 API는 런타임에 클래스, 메서드, 인터페이스를 동적으로 조작할 수 있게 해주는 강력한 도구입니다. 하지만 그 유연성 때문에 공격자가 이를 악용해 시스템에 무단 접근할 수 있는 심각한 보안 위험이 발생합니다. 본 문서에서는 자바 리플렉션이 야기하는 보안 위협을 살펴보고, 이러한 위험을 완화하기 위한 전략들을 설명합니다.\n리플렉션 API 사용 시의 위험성 리플렉션은 객체의 구조를 검사하거나 런타임에 메서드를 동적으로 호출하는 데 일반적으로 사용됩니다. 그러나 적절한 **보안 관리자(Security Manager)**가 없는 경우, execute, eval 등과 같은 민감한 메서드에 접근할 수 있어 잠재적인 원격 코드 실행(RCE) 공격을 유발할 수 있습니다.\n예를 들어, 아래 코드는 시스템 명령어를 실행하기 위해 리플렉션을 사용하는 위험성을 보여줍니다:\n#set($exp=\u0026#34;test\u0026#34;) $exp.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;) .getMethod(\u0026#34;getRuntime\u0026#34;, null) .invoke(null, null) .exec(\u0026#34;calc\u0026#34;) 이 코드는 Velocity 템플릿 엔진과 리플렉션을 사용하여 시스템 명령어를 실행하는데, 적절한 보안 조치가 마련되지 않은 경우 공격자에 의해 악용될 수 있습니다. 다행히도, Java 9에서는 이러한 위험을 완화하기 위한 보안 메커니즘이 강화되었습니다.\nJava 9와 StackWalker API Java 9에서는 기존의 Reflection.getCallerClass 메서드가 더 이상 사용되지 않고, 대신 StackWalker API가 도입되었습니다. 이 API는 호출 클래스를 검사하는 보다 안전한 방법을 제공합니다. 이전에는 보안 검사가 바로 직전 호출자에 대해서만 수행되었지만, StackWalker를 사용하면 전체 호출 스택을 검사하여 보다 포괄적인 보안을 확보할 수 있습니다.\n자세한 내용은 Stack Walking API 가이드를 참고하세요. 이 방법은 호출 체인 전체에 걸친 잠재적 취약점을 모두 해결하도록 돕는데, 이는 CVE-2012-4681 취약점 사례에서도 확인할 수 있습니다. 이 취약점에서는 자바의 호출자 민감 메서드가 악용되어 공격이 발생했으나, Java 8 이후로 @CallerSensitive 애노테이션을 통해 이러한 메서드를 보호할 수 있게 되었습니다.\n블랙리스트 기반 보안의 문제점과 화이트리스트의 필요성 전통적인 블랙리스트 기반 보안 접근 방식은 특정 위험 요소를 차단하는 데 초점을 맞추지만, 모든 공격 벡터를 포괄하지 못하는 한계가 있습니다. 예를 들어, 특정 메서드나 클래스를 블랙리스트에 올려도, 공격자는 차단되지 않은 다른 대체 방법을 사용하여 우회할 수 있습니다.\n표현 언어 주입(Expression Language Injection) 및 기타 동적 코드 실행 공격은 이러한 한계를 자주 악용합니다. Blackhat JSON Attacks에서처럼, 블랙리스트 필터링 방식은 우회될 수 있으며, 공격자는 차단되지 않은 경로를 통해 악의적인 명령어를 실행할 수 있습니다.\n이러한 이유로 화이트리스트 접근 방식이 일반적으로 더 효과적입니다. 화이트리스트 방식은 명시적으로 신뢰할 수 있는 클래스와 메서드만 접근을 허용하고 기본적으로 나머지를 모두 차단하므로, 승인되지 않은 메서드나 리플렉션 기반 공격을 통한 코드 실행 위험을 크게 줄일 수 있습니다.\nSecureUberspector의 역할과 한계 Apache Velocity의 SecureUberspector는 클래스 로딩과 리플렉션을 제한하는 도구로, 특히 신뢰할 수 없는 다수의 템플릿 작성자가 관여하는 경우에 유용합니다. 이는 임의의 객체 실행과 해당 객체에 대한 리플렉션을 차단하여 보안을 강화합니다. 그러나 한계가 존재합니다.\n예를 들어, CVE-2019-17558에서 SecureUberspector는 모든 리플렉션 기반 공격을 완전히 차단하지 못했습니다. 특히, javax.script.ScriptEngineManager의 사용을 막지 못해, 이를 통해 임의의 코드 실행이 가능해졌습니다. GHSL-2020-048에서는 공격자가 이 취약점을 이용하여 SecureUberspector를 우회하는 방법을 보여줍니다:\n#set($engine = $scriptEngineManager.getEngineByName(\u0026#34;nashorn\u0026#34;)) #engine.eval(\u0026#34;java.lang.Runtime.getRuntime().exec(\u0026#39;calc\u0026#39;)\u0026#34;) 이 스크립트는 SecureUberspector를 우회하여 원격 명령어 실행을 가능하게 합니다. 마찬가지로, 공격자는 SecureLayer7 분석에서 언급된 바와 같이 Groovy 스크립트를 사용해 보안 메커니즘을 우회할 수 있습니다.\n화이트리스트 적용: 구체적인 전략 화이트리스트는 신뢰할 수 있는 클래스, 메서드, 객체만 허용하고 그 외는 모두 차단하는 보안 모델로, 선호되는 방식입니다. 아래는 자바에서 화이트리스트를 적용하는 구체적인 방법들입니다.\n보안 관리자(Security Manager) 사용\n자바 보안 관리자를 사용하면 민감한 리소스에 대한 접근을 제한하고 특정 클래스나 메서드만 실행할 수 있도록 할 수 있습니다.\nSystem.setSecurityManager(new SecurityManager()); // 신뢰할 수 있는 메서드/클래스에 대한 권한 정의 PermissionCollection perms = new Permissions(); perms.add(new RuntimePermission(\u0026#34;accessDeclaredMembers\u0026#34;)); // 리플렉션 접근 허용 perms.add(new RuntimePermission(\u0026#34;createClassLoader\u0026#34;)); // 클래스 로더 생성 허용 AccessController.doPrivileged(new PrivilegedAction\u0026lt;Void\u0026gt;() { public Void run() { // 화이트리스트에 포함된 메서드 내에서만 실행 secureMethod(); return null; } }, new AccessControlContext(new ProtectionDomain[] {new ProtectionDomain(null, perms)})); 리플렉션을 통한 접근 제어\n리플렉션 사용 시, 특정 클래스와 메서드에 대한 접근을 수동으로 제한하여 명시적으로 허용되지 않은 경우 접근을 거부할 수 있습니다.\nprivate static final Set\u0026lt;String\u0026gt; allowedMethods = Set.of( \u0026#34;java.lang.String\u0026#34;, \u0026#34;java.util.List\u0026#34; // 화이트리스트에 포함된 클래스 ); public static Object invokeMethod(Method method, Object target, Object... args) throws Exception { if (!allowedMethods.contains(method.getDeclaringClass().getName())) { throw new SecurityException(\u0026#34;Unauthorized method invocation: \u0026#34; + method.getName()); } return method.invoke(target, args); // 화이트리스트에 포함된 메서드만 실행 } 스크립트 엔진에서의 화이트리스트 적용\njavax.script.ScriptEngineManager와 같은 스크립트 엔진도 화이트리스트를 구현하여 안전한 스크립트나 명령어만 실행되도록 할 수 있습니다.\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\u0026#34;nashorn\u0026#34;); engine.setBindings(new SimpleBindings(allowedMethods), ScriptContext.ENGINE_SCOPE); // 화이트리스트 적용 engine.eval(\u0026#34;some safe script here\u0026#34;); 템플릿 엔진에서의 화이트리스트 적용\nSecureUberspector와 같은 도구는 템플릿 엔진 내에서 신뢰할 수 있는 메서드와 객체에 대한 접근을 제한하는 화이트리스트 방식을 강제하도록 설정할 수 있습니다.\npublic Iterator getIterator(Object obj, Info i) { if (obj != null) { SecureIntrospectorControl sic = (SecureIntrospectorControl) introspector; if (sic.checkObjectExecutePermission(obj.getClass(), null)) { return super.getIterator(obj, i); } else { log.warn(\u0026#34;보안 제한으로 인해 \u0026#34; + obj.getClass() + \u0026#34;에서 iterator를 가져올 수 없습니다.\u0026#34;); } } return null; } StackWalker를 통한 보호: 호출자 검증 Java 9에서 도입된 StackWalker API는 호출 스택을 검사하는 안전한 방법을 제공하여, 메서드 호출에 대한 더 나은 제어를 가능하게 합니다. StackWalker를 사용하면 메서드가 신뢰할 수 있는 호출자에 의해서만 호출되는지 확인할 수 있습니다.\n다음은 StackWalker를 사용하여 메서드의 호출자를 검증하는 예제입니다:\nimport java.lang.StackWalker; import java.util.List; import java.util.Set; import java.util.stream.Collectors; public class SecurityManagerUtil { // 화이트리스트에 포함된 호출자 클래스 private static final Set\u0026lt;String\u0026gt; allowedCallers = Set.of(\u0026#34;com.example.TrustedClass\u0026#34;); public static void checkCaller() { List\u0026lt;String\u0026gt; stackTrace = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE) .walk(frames -\u0026gt; frames.map(frame -\u0026gt; frame.getDeclaringClass().getName()) .collect(Collectors.toList())); // 호출자가 화이트리스트에 포함되지 않은 경우 예외 발생 boolean isCallerAllowed = stackTrace.stream().anyMatch(allowedCallers::contains); if (!isCallerAllowed) { throw new SecurityException(\u0026#34;Unauthorized caller detected: \u0026#34; + stackTrace); } } public static void secureMethod() { checkCaller(); // 실행 전 호출자 검증 System.out.println(\u0026#34;Secure method executed.\u0026#34;); } } 이 예제는 신뢰할 수 있는 클래스만이 secureMethod()를 호출할 수 있도록 보장합니다. 만약 허가되지 않은 클래스가 메서드에 접근하려 할 경우, 예외가 발생합니다.\n결론: 리플렉션의 올바른 사용과 보호 자바 리플렉션 API는 유연하고 강력한 도구이지만, 특히 Velocity와 같은 템플릿 엔진과 결합될 경우 심각한 보안 위험을 초래합니다. 블랙리스트 기반 접근 방식은 우회될 가능성이 높지만, 화이트리스트 방식은 신뢰할 수 있는 요소만 실행되도록 하여 더 강력한 보호를 제공합니다. 또한, StackWalker API를 활용하면 메서드 호출을 검증하고 무단 접근을 차단하여 보안을 한층 강화할 수 있습니다.\n화이트리스트와 StackWalker와 같은 도구를 결합함으로써, 자바 애플리케이션을 리플렉션 기반 공격에 대해 더욱 안전하고 견고하게 만들 수 있습니다.\n","permalink":"http://localhost:1313/ko/post/2019-09-03-security-threats-and-mitigation-strategies-for-java-reflection/","summary":"\u003ch3 id=\"자바-리플렉션의-보안-위협과-완화-전략\"\u003e자바 리플렉션의 보안 위협과 완화 전략\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e자바 리플렉션 API\u003c/strong\u003e는 런타임에 클래스, 메서드, 인터페이스를 동적으로 조작할 수 있게 해주는 강력한 도구입니다. 하지만 그 유연성 때문에 공격자가 이를 악용해 시스템에 무단 접근할 수 있는 심각한 보안 위험이 발생합니다. 본 문서에서는 자바 리플렉션이 야기하는 보안 위협을 살펴보고, 이러한 위험을 완화하기 위한 전략들을 설명합니다.\u003c/p\u003e\n\u003ch4 id=\"리플렉션-api-사용-시의-위험성\"\u003e리플렉션 API 사용 시의 위험성\u003c/h4\u003e\n\u003cp\u003e리플렉션은 객체의 구조를 검사하거나 런타임에 메서드를 동적으로 호출하는 데 일반적으로 사용됩니다. 그러나 적절한 **보안 관리자(Security Manager)**가 없는 경우, \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003eeval\u003c/code\u003e 등과 같은 민감한 메서드에 접근할 수 있어 잠재적인 \u003cstrong\u003e원격 코드 실행(RCE)\u003c/strong\u003e 공격을 유발할 수 있습니다.\u003c/p\u003e","title":"자바 리플렉션의 보안 위협과 완화 전략"},{"content":"Chrome에서 XSSAudit 기능이 제거하는 이유? Google 보안팀에서는 Chrome 개발팀에게 XSSAudit 기능을 제거하자는 제안을 했지만, Google 보안팀이 제시한 근거는 우회 가능하다는 내용( evn@google.com의 논문)뿐이라 제거까지 가지 않을 것 같았지만, Chrome version 에서는 완전히 제외되는 것으로 결정되었습니다.\n논문의 주요 내용은 신규 javascript framework의 garget을 이용한 우회 방법은 방어하기 어려우므로, 기존 완화하는 방법(xssaudit filter)에서 격리/예방하는 방법(Content Security Policy, 이하 CSP)으로 변화하자는 것이 주요 내용입니다.\nXSSAudit은 유용하지 않았던가? Google과 같은 업체 입장에서는 XSSAudit 기능에 의해 유지 비용이 소모되고 경쟁 업체(MS 등) 브라우저보다 성능이 느려진다면, 이 기능은 제거하고 싶은 것이 당연할 겁니다. (실제로 MS EDGE에서 해당 기능을 제거하였습니다.)\n모의해커 등 공격자 입장에서는 매우 비정상적인 상황에서만 XSSAudit 우회가 가능하므로 해당 기능을 매우 귀찮고 성가신 존재입니다.\n보안 담당자 등 방어자 입장에서는 적용하기 어려운 CSP를 도입해야 하므로 업무적으로 피곤하게 됩니다. 또한 CSP도 완벽한 방어 방법은 아닙니다. # Content Security Policy Level 2 RFP의 내용에서도 CSP는 방어를 강화하는 한가지 방식으로 기술하고 있습니다.\nContent Security Policy (CSP) is not intended as a first line of defense against content injection vulnerabilities. Instead, CSP is best used as defense-in-depth, to reduce the harm caused by content injection attacks. As a first line of defense against content injection, server operators should validate their input and encode their output.\n구글 등 브라우저 개발사 외에는 모두 유용했던 기능인데 제거하려는 이유가 우회된다는 것 뿐이라면, 업체 중심적인 의사 결정으로 보입니다. Google은 Don\u0026rsquo;t be evil, Do the right thing 아니었나요?\n어떻게 되었든 CSP 도입으로 공부를 많이 해야 합니다. ㅠㅠ How do I Content Security Policy So we broke all CSPs …\n","permalink":"http://localhost:1313/ko/post/2019-08-08-about-the-xssaudit/","summary":"\u003ch2 id=\"chrome에서-xssaudit-기능이-제거하는-이유\"\u003eChrome에서 XSSAudit 기능이 제거하는 이유?\u003c/h2\u003e\n\u003cp\u003eGoogle 보안팀에서는 Chrome 개발팀에게 \u003ca href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=898081\"\u003eXSSAudit 기능을 제거하자는 제안\u003c/a\u003e을 했지만, Google 보안팀이 제시한 근거는 우회 가능하다는 내용( \u003ca href=\"mailto:evn@google.com\"\u003eevn@google.com\u003c/a\u003e의 논문)뿐이라 제거까지 가지 않을 것 같았지만, \u003ca href=\"https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/TuYw-EZhO9g/blGViehIAwAJ\"\u003eChrome version 에서는 완전히 제외\u003c/a\u003e되는 것으로 결정되었습니다.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"/pdf/p1709-lekiesA.pdf\"\u003e논문\u003c/a\u003e의 주요 내용은 신규 javascript framework의 garget을 이용한 우회 방법은 방어하기 어려우므로, 기존 완화하는 방법(xssaudit filter)에서  격리/예방하는 방법(Content Security Policy, 이하 CSP)으로 변화하자는 것이 주요 내용입니다.\u003c/p\u003e\n\u003ch2 id=\"xssaudit은-유용하지-않았던가\"\u003eXSSAudit은 유용하지 않았던가?\u003c/h2\u003e\n\u003cp\u003eGoogle과 같은 업체 입장에서는 XSSAudit 기능에 의해 유지 비용이 소모되고 경쟁 업체(MS 등) 브라우저보다 성능이 느려진다면, 이 기능은 제거하고 싶은 것이 당연할 겁니다. (실제로 MS EDGE에서 해당 기능을 제거하였습니다.)\u003c/p\u003e","title":"About the XSSAudit"},{"content":"🚀 보안 취약점 분석가 및 보안 자동화 전문가 🚀\n17년 이상의 경험을 바탕으로 취약점 분석, 안전한 코딩, 자동화된 보안 솔루션 구축에 집중하고 있습니다. 제 작업은 조직이 보안 문제를 더 빠르고 효과적으로 해결할 수 있도록 코드화된 보안 솔루션을 제공하는 데 중점을 둡니다. 주요 보안 원칙을 따르며, 개발 과정 초기에 보안을 통합하는 시프트-레프트 접근 방식을 강조하고, 데이터 기반 보안을 활용하여 더 스마트한 시스템을 구축합니다.\n🔑 시프트-레프트 - 개발자 및 이해관계자를 위한 안전한 코딩 지침: 보안은 개발 과정 초기에 통합되어야 합니다. 이를 위해 개발자와 비즈니스 이해관계자를 대상으로 한 안전한 코딩 지침을 제공하여 취약점을 즉시 해결할 수 있도록 지원합니다. 이러한 지침은 개발 초기 단계부터 보안을 강화하여 시프트-레프트 접근 방식을 촉진합니다.\n🔑 보안 자동화 - 자동화된 보안 솔루션 구축: 오늘날의 개발 환경에서 보안 자동화는 필수적입니다. DevSecOps 환경 내에서 자동화된 보안 솔루션을 구축하여 개발 파이프라인에 보안을 원활하게 통합했습니다. 자동화된 악성코드 탐지 및 보안 로그 분석을 통해 수작업을 크게 줄이고 보안 위협에 대한 대응 시간을 최소화했습니다.\n🔑 데이터 기반 보안 - Fortify를 활용한 취약점 클러스터링 및 이상 트래픽 분석: 데이터 기반 보안에 집중하여 Fortify를 사용한 취약점 클러스터링 및 이상 트래픽 분석 도구를 개발했습니다. 이러한 도구는 보안 취약점에 대한 더 빠르고 체계적인 분석과 대응을 가능하게 하여 다양한 환경에서 보안 문제를 사전에 예방합니다.\n🔑 재능 기부 - CVE, CWE 보고 및 GitHub 도구 공유: 보안 커뮤니티에 적극 기여하며 CVE 및 CWE 취약점을 보고합니다. 또한 이러한 취약점을 해결하기 위한 도구를 개발하여 GitHub에 공유합니다. 이러한 재능 기부는 글로벌 보안 생태계를 강화하고 조직이 중요한 보안 문제를 해결하는 데 도움을 줍니다.\n📧 Email: windshock@gmail.com 🔗 Website: https://windshock.github.io/\n","permalink":"http://localhost:1313/ko/about/","summary":"보안 자동화와 취약점 분석 전문가입니다.","title":"소개"}]