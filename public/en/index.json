[{"content":"Review of Citrix Security Policy Effectiveness 1. Introduction Citrix administrators apply security policies to each user’s VDI (Virtual Desktop Infrastructure) through Citrix Group Policy. However, certain structural vulnerabilities in Citrix CSE (Citrix Service Engine) and the Citrix VDI Agent allow for potential bypassing of these security policies.\n2. Security Policy Bypass Bypass through Registry Manipulation A security policy bypass is possible by manipulating the registry using a race condition that occurs during the Citrix VDI Agent (PicaSvc2.exe) policy storage process. While Citrix has implemented a stealth patch to mitigate this vulnerability, it is still possible to disable security policies by adjusting registry security settings and denying write permissions.\nForced Termination of CSE If the Citrix CSE (Citrix Service Engine) is forcibly terminated or deleted, security policies are not applied, potentially allowing unauthorized access to restricted resources.\nGPF File Manipulation Attempting to bypass security policies by modifying the GPF (Group Policy File) or limiting its permissions is possible, though this method is unstable and has several limitations.\n3. Bypass via Registry Modification and Write Permission Denial When a user logs in with a standard account (e.g., User A), Citrix Security Policy settings are created in the registry based on the Windows session ID. Citrix\u0026rsquo;s tendency to prioritize usability over security allows security policies to be bypassed by modifying the registry settings (CdmPolicies, IO, VCPolicies) and denying write permissions for all users. This enables bypassing security policies upon reconnection.\nIn test environments, automatic logout is triggered if the Citrix security policy registry settings are altered and permissions are restricted. By modifying values such as ClearPassword, Domain, and LogonTicket in the ICA file to arbitrary values (e.g., “test”), local accounts can bypass this automatic logout.\nFurthermore, logging in with a local secondary account bypasses forced logout restrictions. Although Citrix limits multi-login sessions, it is possible to complete login by pressing Ctrl-Alt-Del, launching the Task Manager, and terminating the PicaSessionAgent.exe process.\nFinally, logging in with a local account (e.g., \u0026ldquo;windshock\u0026rdquo;) allows use of Citrix VDI without Citrix’s security policies, as they are bypassed in Windows Session 1.\n4. Conclusion Citrix’s approach to applying security policies seems to prioritize usability, which may enhance user accessibility but also introduces a structural vulnerability that could facilitate policy bypass. Organizations using Citrix should recognize these potential security bypasses and implement additional internal monitoring or alert systems to enable administrators to respond in real-time.\nFurthermore, if Citrix were to enforce security policies at a lower system level, such as the Xen Hypervisor, this could help maintain a balance between security and usability while effectively preventing bypass attempts. This would ensure that organizations can achieve both the required security and the accessibility Citrix offers.\nReferences Citrix Group Policy Troubleshooting for XenApp and XenDesktop Bypassing Citrix Policy Is Not A Vulnerability, But It Can Be A Violation Of The Law ","permalink":"http://localhost:1313/en/post/2024-11-05-review-of-citrix-security-policy-effectiveness/","summary":"\u003ch1 id=\"review-of-citrix-security-policy-effectiveness\"\u003eReview of Citrix Security Policy Effectiveness\u003c/h1\u003e\n\u003ch2 id=\"1-introduction\"\u003e1. Introduction\u003c/h2\u003e\n\u003cp\u003eCitrix administrators apply security policies to each user’s VDI (Virtual Desktop Infrastructure) through Citrix Group Policy. However, certain structural vulnerabilities in Citrix CSE (Citrix Service Engine) and the Citrix VDI Agent allow for potential bypassing of these security policies.\u003c/p\u003e\n\u003ch2 id=\"2-security-policy-bypass\"\u003e2. Security Policy Bypass\u003c/h2\u003e\n\u003ch3 id=\"bypass-through-registry-manipulation\"\u003eBypass through Registry Manipulation\u003c/h3\u003e\n\u003cp\u003eA security policy bypass is possible by manipulating the registry using a race condition that occurs during the Citrix VDI Agent (PicaSvc2.exe) policy storage process. While Citrix has implemented a stealth patch to mitigate this vulnerability, it is still possible to disable security policies by adjusting registry security settings and denying write permissions.\u003c/p\u003e","title":"Review of Citrix Security Policy Effectiveness"},{"content":"Bypassing Citrix Policy is Not a Vulnerability but a Legal Violation Note!! Based on discussions with Citrix through VINCE from cert.org, it was concluded that this is not classified as a vulnerability because it requires administrative privileges. Therefore, I can share this information without security concerns. However, for security reasons, I do not recommend using Xendesktop (VDI) in special environments such as logically isolated or closed networks. If VDI must be used in such environments, please ensure that administrator privileges are removed and security-specific software is installed.\nWhile the need for administrative privileges may reduce the risk, it does not eliminate the potential impact. Below is a detailed technical explanation of how the Citrix policy can be bypassed.\nDescription The Citrix VDI Agent (PicaSvc2.exe) seems to follow a structure where it receives policies from the Citrix management server, records them in the registry (HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User), and applies these policies by reading from the registry. An attacker can bypass security policies for drives, network access, clipboard operations, etc., enforced by the Citrix Policy Server through manipulation of the registry (refer to the proof of concept [POC] below).\nAccording to Citrix\u0026rsquo;s Common Criteria Certification documentation, protections are designed to prevent an attacker from altering this configuration data (Configdata). This type of bypass could be considered an implementation flaw.\nIf VDI is used in closed or isolated network environments, bypassing Citrix Policy and forcibly connecting the VDI to the internet could expose sensitive internal information to external parties. In South Korea, such actions are a clear violation of the law and would require a reassessment of network isolation measures.\nProof of Concept (POC) An attacker would first need to log into the company\u0026rsquo;s Citrix VDI (running Windows 10) after gaining access to the company’s account. The VDI environment is typically restricted from network access, printer use, external drives, clipboard access, etc.\nThe attacker logs into the VDI and runs a batch file (download link) that continuously modifies the registry, then disconnects from the VDI session.\nAfter running the batch file to modify the registry, the attacker disconnects from the VDI. Upon reconnection, the registry values have been tampered with, allowing the attacker to bypass Citrix policies.\nExample registry modification:\nWindows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Citrix\\1\\User] \u0026#34;AutoConnectDrives\u0026#34;=dword:00000001 \u0026#34;AllowCdromDrives\u0026#34;=dword:00000001 \u0026#34;AllowFixedDrives\u0026#34;=dword:00000001 \u0026#34;AllowFloppyDrives\u0026#34;=dword:00000001 \u0026#34;AllowNetworkDrives\u0026#34;=dword:00000001 \u0026#34;AllowRemoveableDrives\u0026#34;=dword:00000001 \u0026#34;UseAsyncWrites\u0026#34;=dword:00000001 \u0026#34;ReadOnlyMappedDrive\u0026#34;=dword:00000000 Upon logging back into the VDI, PicaSvc2.exe retrieves the policy settings from the Citrix server and stores them in the registry.\nWhile PicaSvc2.exe is writing and reading policies, the registry values have already been tampered with by the previously executed batch file.\nPicaSvc2.exe then applies the manipulated policies in the VDI environment.\nAdditionally:\nBy modifying the registry of the connecting PC, hardware redirection can be enabled, which allows unauthorized network access. Citrix\u0026rsquo;s default policy allows USB class FFh, which means an iPhone can be used for tethering or a USB-based wireless card could be used to bypass network isolation. To enable iPhone tethering, the attacker would need to install drivers extracted from the iTunes installer: Apple network driver and Apple USB driver. After redirecting the iPhone in the Citrix session, internet access can be obtained even in a network-isolated environment. Impact For companies using VDI to maintain logical network separation, this vulnerability could lead to the leakage of internal information and unauthorized access to internal servers.\nGiven the potential impact, it is crucial to identify and mitigate such attacks in real-time. Below are steps to discover and monitor potential bypass activities.\nDiscovery To discover this issue:\nUse Procmon to monitor the operations of PicaSvc2.exe. Examine the registry keys where the Citrix agent stores its policy settings. Manipulate and observe the effects of changes in these registry values. Design Analysis The Citrix Common Criteria Certification document includes measures to prevent unauthorized modification of configuration data. According to Citrix\u0026rsquo;s Common Criteria Certification Information, the integrity and confidentiality of the data required for setup and assignment of a virtual desktop or application are maintained during transmission between servers. This design also includes prevention measures against attackers, application users, or desktop users from modifying the configuration data.\nDespite Citrix\u0026rsquo;s implementation of security features as outlined above, legal considerations must also be addressed, particularly in regions like South Korea where strict network isolation laws apply.\nCitrix’s security objectives, including O.Secure_Setup_Data, OE.TLS, and OE.Encryption, ensure the confidentiality and integrity of the configuration data during processing and transmission between servers.\nFor more details on the security objectives and the roles of management functions, see:\nFMT_SMF.1/Authorise: Management of the endpoint data access control policy FMT_MSA.1/Desktop FMT_MSA.3/Desktop FMT_MSA.1/Application FMT_MSA.3/Application FPT_ITT.1 Legal Considerations In South Korea, the Financial Supervisory Service (FSS) has introduced measures under the Electronic Financial Transactions Act that provide companies with the option of implementing logical network separation. Financial institutions are required to block unauthorized access and prevent incidents by adopting network isolation measures to protect sensitive data from external attacks.\nSince the attack requires administrative privileges, companies should review their policy regarding the removal of administrative privileges for PC users in logically separated network environments. Furthermore, there is a need for legal improvements to include regulations that prevent the misuse of these systems.\nLimitation Even with administrative and installation privileges restricted, it is still difficult to fully prevent data leaks through methods such as capturing screen images. More detailed analysis and solutions regarding logical network isolation models can be found in this report.\nThese limitations suggest that even with administrator rights removed, organizations remain vulnerable. This highlights the importance of addressing these issues at both a technical and regulatory level, as seen in recent banking sector responses to similar incidents.\nRelated Issues Following a 2011 hacking incident at Nonghyup, several major banks in South Korea began implementing internal-external network separation to prevent the leakage, theft, or tampering of personal information. Network isolation remains a key recommendation to ensure the safety of personal data. See relevant guidelines here and information on ISMS-P certification here.\nAdditional information on Citrix Common Criteria certification can be found here and here.\n","permalink":"http://localhost:1313/en/post/2023-04-27-bypassing-citrix-policy-is-not-a-vulnerability-but-it-can-be-a-violation-of-the-law/","summary":"\u003ch3 id=\"bypassing-citrix-policy-is-not-a-vulnerability-but-a-legal-violation\"\u003eBypassing Citrix Policy is Not a Vulnerability but a Legal Violation\u003c/h3\u003e\n\u003ch4 id=\"note\"\u003eNote!!\u003c/h4\u003e\n\u003cp\u003eBased on discussions with Citrix through \u003ca href=\"https://kb.cert.org/vince/comm/case/1022/\"\u003eVINCE\u003c/a\u003e from cert.org, it was concluded that this is not classified as a vulnerability because it requires administrative privileges. Therefore, I can share this information without security concerns. However, for security reasons, I do not recommend using Xendesktop (VDI) in special environments such as logically isolated or closed networks. If VDI must be used in such environments, please ensure that administrator privileges are removed and security-specific software is installed.\u003c/p\u003e","title":"Bypassing citrix policy is not a vulnerability, but it can be a violation of the law"},{"content":"﻿ Strengthening Cybersecurity Through Government NGOs and Bug Bounty Programs: A Look at Security Taxes and Their Implementation in Various Countries\nIn today\u0026rsquo;s digital age, information security has become a critical concern for individuals, businesses, and governments alike. Cyber attacks and data breaches have become increasingly common and sophisticated, and the consequences can be devastating. This is why it is essential to have robust cybersecurity measures in place to protect against these threats.\nOne approach that is gaining popularity is the use of government NGOs (non-governmental organizations) and bug bounty programs. These programs are designed to encourage individuals and organizations to identify and report vulnerabilities and weaknesses in digital systems, allowing for timely and effective remediation. They are an essential component of any comprehensive cybersecurity strategy, and their importance cannot be overstated.\nIn some countries, governments have also implemented security taxes to fund these programs. These taxes are charged on businesses that are deemed to be at high risk of cyber attacks, and the proceeds are used to establish and support government NGOs and bug bounty programs. While this approach has been met with some controversy, there is no denying its effectiveness in raising the necessary funds to protect against cyber threats.\nOne example of a country that has implemented a security tax is South Korea. In 2030, the South Korean government introduced a tax on companies that are deemed to be at high risk of cyber attacks. The tax ranges from 0.09% to 2% of the company\u0026rsquo;s annual revenue, depending on their size and level of risk. The funds collected from the tax are used to support the country\u0026rsquo;s national cybersecurity agency, as well as various government NGOs and bug bounty programs.\nThe importance of NGOs in this context cannot be overstated. NGOs are essential in bridging the gap between the government and the private sector when it comes to cybersecurity. They are better equipped to handle the technical aspects of cybersecurity and can work closely with businesses and organizations to identify vulnerabilities and weaknesses in their systems. This partnership between the government and NGOs is crucial in protecting against cyber threats.\nThe R\u0026amp;R (roles and responsibilities) of government NGOs and bug bounty programs can vary depending on the country and the specific program. In general, government NGOs are responsible for conducting research and analysis on cybersecurity threats and developing best practices and guidelines. They also work closely with businesses and organizations to provide guidance and assistance in implementing these best practices.\nBug bounty programs, on the other hand, are designed to incentivize individuals and organizations to identify and report vulnerabilities in digital systems. These programs offer rewards, often in the form of cash, to those who identify and report valid vulnerabilities. This approach has proven to be highly effective in identifying and addressing vulnerabilities before they can be exploited by cybercriminals.\nIt is important to note that these programs should not charge security taxes on individuals. The burden of funding these programs should be on businesses and organizations that are at high risk of cyber attacks.\nIn summary, security taxes, NGOs, and bug bounty programs are all important tools for strengthening cybersecurity in the face of an increasingly complex threat landscape. By working together, government agencies, NGOs, and private companies can help identify and address vulnerabilities in a timely and effective manner, thereby reducing the risk of costly and damaging cyberattacks.\n","permalink":"http://localhost:1313/en/post/2023-04-18-strengthening-cybersecurity-through-government-ngos-and-bug-bounty-programs/","summary":"\u003cp\u003e﻿\nStrengthening Cybersecurity Through Government NGOs and Bug Bounty Programs: A Look at Security Taxes and Their Implementation in Various Countries\u003c/p\u003e\n\u003cp\u003eIn today\u0026rsquo;s digital age, information security has become a critical concern for individuals, businesses, and governments alike. Cyber attacks and data breaches have become increasingly common and sophisticated, and the consequences can be devastating. This is why it is essential to have robust cybersecurity measures in place to protect against these threats.\u003c/p\u003e","title":"Strengthening cybersecurity through government ngos and bug bounty programs"},{"content":"Security Threats and Mitigation Strategies for Java Reflection The Java Reflection API is a powerful tool that allows dynamic manipulation of classes, methods, and interfaces at runtime. However, due to its flexibility, it introduces significant security risks, as attackers can exploit it to gain unauthorized access to systems. In this article, we will explore the security threats posed by Java Reflection and outline strategies to mitigate these risks.\nThe Risks of Using Reflection API Reflection is commonly used to inspect the structure of objects or dynamically invoke methods at runtime. However, without a proper Security Manager, sensitive methods (like execute, eval, etc.) can be accessed, leading to potential Remote Code Execution (RCE) attacks.\nFor example, the following code demonstrates the risks of using Reflection to execute system commands:\n#set($exp=\u0026#34;test\u0026#34;) $exp.getClass().forName(\u0026#34;java.lang.Runtime\u0026#34;) .getMethod(\u0026#34;getRuntime\u0026#34;, null) .invoke(null, null) .exec(\u0026#34;calc\u0026#34;) This code uses the Velocity template engine with Reflection to execute a system command, which can be exploited by attackers if proper security measures are not in place. However, Java 9 introduced enhanced security mechanisms to mitigate such risks.\nJava 9 and the StackWalker API In Java 9, the traditional Reflection.getCallerClass method was deprecated and replaced with the StackWalker API, which provides a more secure way to inspect the calling class. Previously, security checks were only performed on the immediate caller, but with StackWalker, the entire call stack can be examined for more comprehensive security.\nFor more details, refer to the Stack Walking API guide. This ensures that all potential vulnerabilities along the call chain are addressed, as demonstrated by the CVE-2012-4681 exploit. In this vulnerability, issues with caller-sensitive methods in Java were exploited, leading to attacks, but since Java 8, the @CallerSensitive annotation has helped safeguard such methods.\nThe Problem with Blacklist-Based Security and the Need for Whitelisting Traditional blacklist-based security approaches focus on blocking specific dangerous elements but often fail to cover all attack vectors. For instance, blacklisting certain methods or classes can easily be bypassed by attackers who find alternate methods that aren\u0026rsquo;t blocked.\nExpression Language Injection and other dynamic code execution attacks frequently exploit this limitation. As demonstrated in the Blackhat JSON Attacks, blacklist filtering methods can be bypassed, and attackers can execute malicious commands through unblocked pathways.\nFor this reason, a whitelisting approach is generally more effective. Whitelisting only allows access to explicitly trusted classes and methods, while blocking everything else by default. This significantly reduces the risk of code execution through unapproved methods or reflection-based attacks.\nThe Role and Limitations of SecureUberspector SecureUberspector in Apache Velocity is a tool that limits class loading and Reflection, especially in scenarios where untrusted or numerous template writers are involved. It prevents the execution of arbitrary objects and reflection on those objects, enhancing security. However, it has limitations.\nFor example, in CVE-2019-17558, SecureUberspector could not fully block all reflection-based attacks. Particularly, it does not prevent the use of javax.script.ScriptEngineManager, which can be exploited to execute arbitrary code. GHSL-2020-048 demonstrates how attackers can bypass SecureUberspector using this vulnerability:\n#set($engine = $scriptEngineManager.getEngineByName(\u0026#34;nashorn\u0026#34;)) #engine.eval(\u0026#34;java.lang.Runtime.getRuntime().exec(\u0026#39;calc\u0026#39;)\u0026#34;) This script bypasses SecureUberspector and allows remote command execution. Similarly, attackers can bypass security mechanisms using Groovy scripts, as noted in the SecureLayer7 analysis.\nApplying Whitelisting: Concrete Strategies Whitelisting is the preferred security model, allowing only trusted classes, methods, and objects while blocking all others. Below are specific methods for applying whitelisting in Java.\nUsing the Security Manager\nThe Java Security Manager can be employed to restrict access to sensitive resources and only allow specific classes or methods to be executed.\nSystem.setSecurityManager(new SecurityManager()); // Define permissions for trusted methods/classes PermissionCollection perms = new Permissions(); perms.add(new RuntimePermission(\u0026#34;accessDeclaredMembers\u0026#34;)); // Allow reflection access perms.add(new RuntimePermission(\u0026#34;createClassLoader\u0026#34;)); // Allow class loader creation AccessController.doPrivileged(new PrivilegedAction\u0026lt;Void\u0026gt;() { public Void run() { // Execute only within whitelisted methods secureMethod(); return null; } }, new AccessControlContext(new ProtectionDomain[] {new ProtectionDomain(null, perms)})); Controlling Access with Reflection\nWhen using Reflection, you can manually restrict access to certain classes and methods, rejecting any that are not explicitly allowed.\nprivate static final Set\u0026lt;String\u0026gt; allowedMethods = Set.of( \u0026#34;java.lang.String\u0026#34;, \u0026#34;java.util.List\u0026#34; // Whitelisted classes ); public static Object invokeMethod(Method method, Object target, Object... args) throws Exception { if (!allowedMethods.contains(method.getDeclaringClass().getName())) { throw new SecurityException(\u0026#34;Unauthorized method invocation: \u0026#34; + method.getName()); } return method.invoke(target, args); // Only whitelisted methods are executed } Whitelisting in Script Engines\nScript engines such as javax.script.ScriptEngineManager can also implement whitelisting to ensure that only safe scripts or commands are executed.\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\u0026#34;nashorn\u0026#34;); engine.setBindings(new SimpleBindings(allowedMethods), ScriptContext.ENGINE_SCOPE); // Apply whitelisting engine.eval(\u0026#34;some safe script here\u0026#34;); Whitelisting in Template Engines\nTools like SecureUberspector can be configured to enforce a whitelisting approach by limiting access to trusted methods and objects in template engines.\npublic Iterator getIterator(Object obj, Info i) { if (obj != null) { SecureIntrospectorControl sic = (SecureIntrospectorControl) introspector; if (sic.checkObjectExecutePermission(obj.getClass(), null)) { return super.getIterator(obj, i); } else { log.warn(\u0026#34;Cannot retrieve iterator from \u0026#34; + obj.getClass() + \u0026#34; due to security restrictions.\u0026#34;); } } return null; } Protecting with StackWalker: Caller Validation Introduced in Java 9, the StackWalker API provides a secure way to inspect the call stack, offering better control over method invocations. StackWalker can be used to ensure that methods are only invoked by trusted callers.\nBelow is an example using StackWalker to validate the caller of a method:\nimport java.lang.StackWalker; import java.util.List; import java.util.Set; import java.util.stream.Collectors; public class SecurityManagerUtil { // Whitelisted caller classes private static final Set\u0026lt;String\u0026gt; allowedCallers = Set.of(\u0026#34;com.example.TrustedClass\u0026#34;); public static void checkCaller() { List\u0026lt;String\u0026gt; stackTrace = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE) .walk(frames -\u0026gt; frames.map(frame -\u0026gt; frame.getDeclaringClass().getName()) .collect(Collectors.toList())); // If caller is not whitelisted, throw an exception boolean isCallerAllowed = stackTrace.stream().anyMatch(allowedCallers::contains); if (!isCallerAllowed) { throw new SecurityException(\u0026#34;Unauthorized caller detected: \u0026#34; + stackTrace); } } public static void secureMethod() { checkCaller(); // Verify caller before execution System.out.println(\u0026#34;Secure method executed.\u0026#34;); } } This example ensures that only trusted classes are allowed to invoke secureMethod(). If an unauthorized class tries to access the method, an exception is thrown.\nConclusion: Proper Use and Protection of Reflection The Java Reflection API is a flexible and powerful tool, but it introduces significant security risks, especially when combined with template engines like Velocity. Blacklist-based approaches are prone to bypasses, while whitelisting provides stronger protection by allowing only trusted elements to be executed. Furthermore, leveraging the StackWalker API enhances security by validating method invocations and blocking unauthorized access.\nBy combining whitelisting with tools like StackWalker, you can ensure that your Java applications are more secure and resilient against reflection-based attacks.\n","permalink":"http://localhost:1313/en/post/2019-09-03-security-threats-and-mitigation-strategies-for-java-reflection/","summary":"\u003ch3 id=\"security-threats-and-mitigation-strategies-for-java-reflection\"\u003eSecurity Threats and Mitigation Strategies for Java Reflection\u003c/h3\u003e\n\u003cp\u003eThe \u003cstrong\u003eJava Reflection API\u003c/strong\u003e is a powerful tool that allows dynamic manipulation of classes, methods, and interfaces at runtime. However, due to its flexibility, it introduces significant security risks, as attackers can exploit it to gain unauthorized access to systems. In this article, we will explore the security threats posed by Java Reflection and outline strategies to mitigate these risks.\u003c/p\u003e\n\u003ch4 id=\"the-risks-of-using-reflection-api\"\u003eThe Risks of Using Reflection API\u003c/h4\u003e\n\u003cp\u003eReflection is commonly used to inspect the structure of objects or dynamically invoke methods at runtime. However, without a proper \u003cstrong\u003eSecurity Manager\u003c/strong\u003e, sensitive methods (like \u003ccode\u003eexecute\u003c/code\u003e, \u003ccode\u003eeval\u003c/code\u003e, etc.) can be accessed, leading to potential \u003cstrong\u003eRemote Code Execution (RCE)\u003c/strong\u003e attacks.\u003c/p\u003e","title":"Security threats and mitigation strategies for java reflection"},{"content":"Why Was the XSSAudit Feature Removed in Chrome? The Google Security Team proposed to the Chrome development team to remove the XSSAudit feature. Although the only rationale provided was that the feature could be bypassed (as argued in a paper by evn@google.com), it initially seemed unlikely that removal would proceed. However, it was ultimately decided that the feature would be completely eliminated in Chrome.\nThe main point of the paper is that bypass methods using targets within new JavaScript frameworks are difficult to defend against. Therefore, it proposes a shift from the existing mitigation approach (the xssaudit filter) to an isolation/prevention method, namely Content Security Policy (CSP).\nWasn\u0026rsquo;t XSSAudit Useful? From the perspective of companies like Google, if the XSSAudit feature incurs maintenance costs and results in poorer performance compared to competitors’ browsers (e.g., Microsoft’s), it is only natural to want to remove it. (In fact, this feature was already removed in MS EDGE.)\nFor ethical hackers and attackers, bypassing XSSAudit is only possible under very unusual circumstances, making the feature a particularly annoying and troublesome obstacle.\nFor security professionals and defenders, implementing the challenging CSP adds significant workload. Moreover, CSP is not a perfect defense mechanism. The Content Security Policy Level 2 RFP also describes CSP as one way to enhance defenses:\nContent Security Policy (CSP) is not intended as a first line of defense against content injection vulnerabilities. Instead, CSP is best used as defense-in-depth, to reduce the harm caused by content injection attacks. As a first line of defense against content injection, server operators should validate their input and encode their output.\nApart from browser developers like Google, the XSSAudit feature was useful to nearly everyone. If the only reason for its removal is that it can be bypassed, it seems like a decision driven by corporate interests. Wasn\u0026rsquo;t Google supposed to follow the motto “Don\u0026rsquo;t be evil, do the right thing”?\nRegardless, We Now Must Study CSP Implementation Intensively :( How do I Content Security Policy\nSo we broke all CSPs …\n","permalink":"http://localhost:1313/en/post/2019-08-08-about-the-xssaudit/","summary":"\u003ch2 id=\"why-was-the-xssaudit-feature-removed-in-chrome\"\u003eWhy Was the XSSAudit Feature Removed in Chrome?\u003c/h2\u003e\n\u003cp\u003eThe Google Security Team proposed to the Chrome development team to remove the \u003ca href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=898081\"\u003eXSSAudit feature\u003c/a\u003e. Although the only rationale provided was that the feature could be bypassed (as argued in a paper by \u003ca href=\"mailto:evn@google.com\"\u003eevn@google.com\u003c/a\u003e), it initially seemed unlikely that removal would proceed. However, it was ultimately decided that the feature would be completely eliminated in Chrome.\u003c/p\u003e\n\u003cp\u003eThe main point of the \u003ca href=\"/pdf/p1709-lekiesA.pdf\"\u003epaper\u003c/a\u003e is that bypass methods using targets within new JavaScript frameworks are difficult to defend against. Therefore, it proposes a shift from the existing mitigation approach (the xssaudit filter) to an isolation/prevention method, namely Content Security Policy (CSP).\u003c/p\u003e","title":"About the XSSAudit"},{"content":"🚀 Security Vulnerability Analyst and Security Automation Expert 🚀\nWith over 17 years of experience, I focus on vulnerability analysis, secure coding, and building automated security solutions. My work revolves around providing coded security solutions that help organizations address security challenges faster and more effectively. By following key security principles, I emphasize a shift-left approach to integrate security earlier in the development process, while leveraging data-driven security to build smarter systems.\n🔑 Shift Left - Secure Coding Guidelines for Developers and Stakeholders: Security should be integrated early in the development process. To achieve this, I provide secure coding guidelines targeted at developers and business stakeholders, offering immediate support for addressing vulnerabilities. These guidelines help strengthen security from the initial stages of development, promoting a shift-left approach to security.\n🔑 Security Automation - Building Automated Security Solutions: Security automation is critical in today’s development environments. I have established automated security solutions within DevSecOps environments, seamlessly integrating security into development pipelines. Through automated malware detection and security log analysis, I have significantly reduced manual efforts and minimized response times to security threats.\n🔑 Data-Driven Security - Fortify Vulnerability Clustering and Anomalous Traffic Analysis: I focus on data-driven security and have developed tools using Fortify for vulnerability clustering and analyzing anomalous traffic. These tools allow for faster, more systematic analysis and response to security vulnerabilities, ensuring proactive prevention of security issues across various environments.\n🔑 Talent Donation - CVE, CWE Reporting and GitHub Tool Sharing: I actively contribute to the security community by reporting CVE and CWE vulnerabilities. I also develop and share tools on GitHub to help others address these vulnerabilities. This talent donation strengthens the global security ecosystem and supports organizations in resolving critical security challenges.\nI am dedicated to coding solutions for discovered vulnerabilities and sharing these tools to help organizations implement effective security measures. By promoting shift-left security, security automation, and data-driven analysis, I continue to drive security innovation. Let’s connect and explore ways to enhance security together!\n📧 Email: windshock@gmail.com 🔗 Website: https://windshock.github.io/\n","permalink":"http://localhost:1313/en/about/","summary":"Learn more about my professional background and expertise.","title":"About"}]